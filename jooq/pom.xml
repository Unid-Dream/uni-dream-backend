<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <packaging>pom</packaging>

    <modules>
        <module>modules/mono</module>
        <module>untitled</module>
    </modules>

    <parent>
        <groupId>pwh</groupId>
        <artifactId>core</artifactId>
        <version>20230315.0</version>
        <relativePath/>
    </parent>

    <groupId>unid</groupId>
    <artifactId>jooq-generator</artifactId>
    <version>${revision}</version>

    <properties>
        <revision>${unid.jooq-generator.version}</revision>
        <unid.jooq-generator.version>20230928.0</unid.jooq-generator.version>

        <!-- below are default values (or empty) if not override by any children -->

        <!-- db -->
        <unid.jooq-generator.db-host/>
        <unid.jooq-generator.db-port/>
        <unid.jooq-generator.db-name/>
        <unid.jooq-generator.db-user/>
        <unid.jooq-generator.db-password/>

        <!-- output -->
        <unid.jooq-generator.generated-directory>./src/main/java</unid.jooq-generator.generated-directory>
        <unid.jooq-generator.generated-package>${project.groupId}.jooqMono.model</unid.jooq-generator.generated-package>

        <!-- regex for defining which table.columns to convert -->
        <!-- example, encrypt public.user.password:
        (public\.)
        (
            (user\.(password))
        )
        -->
        <unid.jooq-generator.columns-ignorecase>
            (public\.)
            (
            (user\.(email|login_id))
            )
        </unid.jooq-generator.columns-ignorecase>
        <unid.jooq-generator.columns-encrypted-ignorecase>(?!)</unid.jooq-generator.columns-encrypted-ignorecase>
        <unid.jooq-generator.columns-encrypted>(?!)</unid.jooq-generator.columns-encrypted>
        <unid.jooq-generator.columns-hashed>
            (public\.)
            (
                (user\.(login_password))
            )
        </unid.jooq-generator.columns-hashed>
        <unid.jooq-generator.columns-hashed-ignorecase>(?!)</unid.jooq-generator.columns-hashed-ignorecase>

        <!-- convertors -->
        <!-- java package.class -->
        <unid.jooq-generator.columns-ignorecase-convertor>pwh.coreJooqLibs.converter.IgnoreCaseConverter</unid.jooq-generator.columns-ignorecase-convertor>
        <unid.jooq-generator.columns-encrypted-ignorecase-convertor>pwh.coreJooqLibs.converter.EncryptionIgnoreCaseConverter</unid.jooq-generator.columns-encrypted-ignorecase-convertor>
        <unid.jooq-generator.columns-encrypted-convertor>pwh.coreJooqLibs.converter.EncryptionConverter</unid.jooq-generator.columns-encrypted-convertor>
        <unid.jooq-generator.columns-hashed-convertor>pwh.coreJooqLibs.converter.HashingConverter</unid.jooq-generator.columns-hashed-convertor>
        <unid.jooq-generator.columns-hashed-ignorecase-convertor>pwh.coreJooqLibs.converter.HashingIgnoreCaseConverter</unid.jooq-generator.columns-hashed-ignorecase-convertor>
    </properties>

    <dependencies>
        <dependency>
            <groupId>pwh</groupId>
            <artifactId>core-jooq-libs</artifactId>
        </dependency>
        <dependency>
            <groupId>pwh</groupId>
            <artifactId>core-jooq-code-gen</artifactId>
        </dependency>
        <dependency>
            <groupId>org.postgresql</groupId>
            <artifactId>postgresql</artifactId>
            <scope>runtime</scope>
        </dependency>
<!--        <dependency>-->
<!--            <groupId>org.flywaydb</groupId>-->
<!--            <artifactId>flyway-core</artifactId>-->
<!--        </dependency>-->
    </dependencies>

    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>unid</groupId>
                <artifactId>jooq-mono</artifactId>
                <version>${unid.jooq-generator.version}</version>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <!-- @GENERATED -->
    <!-- Default to Postgres -->
    <!-- Alter to your preference of DB -->

    <build>
        <pluginManagement>
            <plugins>
                <plugin>
                    <groupId>org.jooq</groupId>
                    <artifactId>jooq-codegen-maven</artifactId>
                    <version>${pwh.version.jooq}</version>
                    <dependencies>
                        <!-- @YOUR PREFERENCE OF DB -->
                        <dependency>
                            <groupId>org.postgresql</groupId>
                            <artifactId>postgresql</artifactId>
                            <version>${pwh.version.postgres}</version>
                        </dependency>
                    </dependencies>
                    <configuration>
                        <!-- @YOUR PREFERENCE OF DB -->
                        <jdbc>
                            <driver>org.postgresql.Driver</driver>
                            <url>jdbc:postgresql://${unid.jooq-generator.db-host}:${unid.jooq-generator.db-port}/${unid.jooq-generator.db-name}</url>
                            <user>${unid.jooq-generator.db-user}</user>
                            <password>${unid.jooq-generator.db-password}</password>
                        </jdbc>
                        <generator>
                            <name>pwh.coreJooqCodeGen.generator.DefaultJavaGenerator</name>
                            <strategy>
                                <matchers>
                                    <tables>
                                        <table>
                                            <tableClass>
                                                <transform>PASCAL</transform>
                                                <expression>$0_Table</expression>
                                            </tableClass>

                                            <daoClass>
                                                <transform>PASCAL</transform>
                                                <expression>$0_Dao</expression>
                                            </daoClass>

                                            <pojoClass>
                                                <transform>PASCAL</transform>
                                                <expression>$0_Pojo</expression>
                                            </pojoClass>

                                            <interfaceClass>
                                                <transform>PASCAL</transform>
                                                <expression>$0_Interface</expression>
                                            </interfaceClass>
                                        </table>
                                    </tables>
                                    <enums>
                                        <enum>
                                            <enumClass>
                                                <transform>PASCAL</transform>
                                                <expression>$0_Enum</expression>
                                            </enumClass>
                                        </enum>
                                    </enums>
                                </matchers>
                            </strategy>
                            <database>
                                <!-- @YOUR PREFERENCE OF DB -->
                                <!-- command-leftClick on package (.meta) to see all options -->
                                <name>org.jooq.meta.postgres.PostgresDatabase</name>
                                <includeTables>true</includeTables>
                                <includeInvisibleColumns>true</includeInvisibleColumns>
                                <includeEmbeddables>false</includeEmbeddables>
                                <includeRoutines>true</includeRoutines>
                                <includePackages>false</includePackages>
                                <includePackageRoutines>false</includePackageRoutines>
                                <includePackageUDTs>false</includePackageUDTs>
                                <includePackageConstants>false</includePackageConstants>
                                <includeUDTs>false</includeUDTs>
                                <includeDomains>false</includeDomains>
                                <includeSequences>true</includeSequences>
                                <includePrimaryKeys>true</includePrimaryKeys>
                                <includeUniqueKeys>true</includeUniqueKeys>
                                <includeForeignKeys>true</includeForeignKeys>
                                <includeCheckConstraints>false</includeCheckConstraints>
                                <includeSystemCheckConstraints>false</includeSystemCheckConstraints>
                                <includeIndexes>false</includeIndexes>
                                <includeSystemIndexes>false</includeSystemIndexes>
                                <schemata>
                                    <schema>
                                        <inputSchema>public</inputSchema>
                                    </schema>
                                </schemata>
                                <forcedTypes>
                                    <!-- converters & expressions -->
                                    <forcedType>
                                        <objectType>COLUMN</objectType>
                                        <userType>java.lang.String</userType>
                                        <converter>${unid.jooq-generator.columns-encrypted-ignorecase-convertor}</converter>
                                        <includeExpression>${unid.jooq-generator.columns-encrypted-ignorecase}</includeExpression>
                                    </forcedType>
                                    <forcedType>
                                        <objectType>COLUMN</objectType>
                                        <userType>java.lang.String</userType>
                                        <converter>${unid.jooq-generator.columns-encrypted-convertor}</converter>
                                        <includeExpression>${unid.jooq-generator.columns-encrypted}</includeExpression>
                                    </forcedType>
                                    <forcedType>
                                        <objectType>COLUMN</objectType>
                                        <userType>java.lang.String</userType>
                                        <converter>${unid.jooq-generator.columns-ignorecase-convertor}</converter>
                                        <includeExpression>${unid.jooq-generator.columns-ignorecase}</includeExpression>
                                    </forcedType>
                                    <forcedType>
                                        <objectType>COLUMN</objectType>
                                        <userType>java.lang.String</userType>
                                        <converter>${unid.jooq-generator.columns-hashed-ignorecase-convertor}</converter>
                                        <includeExpression>${unid.jooq-generator.columns-hashed-ignorecase}</includeExpression>
                                    </forcedType>
                                    <forcedType>
                                        <objectType>COLUMN</objectType>
                                        <userType>java.lang.String</userType>
                                        <converter>${unid.jooq-generator.columns-hashed-convertor}</converter>
                                        <includeExpression>${unid.jooq-generator.columns-hashed}</includeExpression>
                                    </forcedType>
                                </forcedTypes>
                            </database>
                            <target>
                                <packageName>${unid.jooq-generator.generated-package}</packageName>
                                <directory>${unid.jooq-generator.generated-directory}</directory>
                                <clean>true</clean>
                            </target>
                            <generate>
                                <!-- https://www.jooq.org/doc/3.15/manual/code-generation/codegen-advanced/codegen-config-generate/ -->
                                <fluentSetters>true</fluentSetters>
                                <interfaces>false</interfaces>
                                <pojos>true</pojos>
                                <!-- annotations -->
                                <generatedAnnotation>true</generatedAnnotation>
                                <generatedAnnotationType>DETECT_FROM_JDK</generatedAnnotationType>
                                <generatedAnnotationDate>true</generatedAnnotationDate>
                                <nullableAnnotation>true</nullableAnnotation>
                                <nullableAnnotationType>javax.annotation.Nullable</nullableAnnotationType>
                                <nonnullAnnotation>true</nonnullAnnotation>
                                <nonnullAnnotationType>javax.annotation.Nonnull</nonnullAnnotationType>
                                <validationAnnotations>true</validationAnnotations>
                                <springAnnotations>false</springAnnotations>
                                <daos>true</daos>
                                <constructorPropertiesAnnotation>true</constructorPropertiesAnnotation>
                                <constructorPropertiesAnnotationOnPojos>true</constructorPropertiesAnnotationOnPojos>
                                <constructorPropertiesAnnotationOnRecords>true</constructorPropertiesAnnotationOnRecords>
                            </generate>
                        </generator>
                    </configuration>
                </plugin>
            </plugins>
        </pluginManagement>
    </build>
</project>
