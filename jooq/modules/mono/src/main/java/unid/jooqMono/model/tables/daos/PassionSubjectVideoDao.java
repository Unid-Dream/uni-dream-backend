/*
 * This file is generated by jOOQ.
 */
package unid.jooqMono.model.tables.daos;


import java.util.List;
import java.util.UUID;

import javax.annotation.Nonnull;
import javax.annotation.Nullable;
import javax.annotation.processing.Generated;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;

import unid.jooqMono.model.tables.PassionSubjectVideoTable;
import unid.jooqMono.model.tables.pojos.PassionSubjectVideoPojo;
import unid.jooqMono.model.tables.records.PassionSubjectVideoRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.15.12"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PassionSubjectVideoDao extends DAOImpl<PassionSubjectVideoRecord, PassionSubjectVideoPojo, UUID> {

    /**
     * Create a new PassionSubjectVideoDao without any configuration
     */
    public PassionSubjectVideoDao() {
        super(PassionSubjectVideoTable.PASSION_SUBJECT_VIDEO, PassionSubjectVideoPojo.class);
    }

    /**
     * Create a new PassionSubjectVideoDao with an attached configuration
     */
    public PassionSubjectVideoDao(Configuration configuration) {
        super(PassionSubjectVideoTable.PASSION_SUBJECT_VIDEO, PassionSubjectVideoPojo.class, configuration);
    }

    @Override
    @Nonnull
    public UUID getId(PassionSubjectVideoPojo object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<PassionSubjectVideoPojo> fetchRangeOfId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(PassionSubjectVideoTable.PASSION_SUBJECT_VIDEO.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    @Nonnull
    public List<PassionSubjectVideoPojo> fetchById(UUID... values) {
        return fetch(PassionSubjectVideoTable.PASSION_SUBJECT_VIDEO.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    @Nullable
    public PassionSubjectVideoPojo fetchOneById(UUID value) {
        return fetchOne(PassionSubjectVideoTable.PASSION_SUBJECT_VIDEO.ID, value);
    }

    /**
     * Fetch records that have <code>name_i18n_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<PassionSubjectVideoPojo> fetchRangeOfNameI18nId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(PassionSubjectVideoTable.PASSION_SUBJECT_VIDEO.NAME_I18N_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>name_i18n_id IN (values)</code>
     */
    @Nonnull
    public List<PassionSubjectVideoPojo> fetchByNameI18nId(UUID... values) {
        return fetch(PassionSubjectVideoTable.PASSION_SUBJECT_VIDEO.NAME_I18N_ID, values);
    }

    /**
     * Fetch records that have <code>subject_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<PassionSubjectVideoPojo> fetchRangeOfSubjectId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(PassionSubjectVideoTable.PASSION_SUBJECT_VIDEO.SUBJECT_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>subject_id IN (values)</code>
     */
    @Nonnull
    public List<PassionSubjectVideoPojo> fetchBySubjectId(UUID... values) {
        return fetch(PassionSubjectVideoTable.PASSION_SUBJECT_VIDEO.SUBJECT_ID, values);
    }

    /**
     * Fetch records that have <code>author_i18n_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<PassionSubjectVideoPojo> fetchRangeOfAuthorI18nId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(PassionSubjectVideoTable.PASSION_SUBJECT_VIDEO.AUTHOR_I18N_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>author_i18n_id IN (values)</code>
     */
    @Nonnull
    public List<PassionSubjectVideoPojo> fetchByAuthorI18nId(UUID... values) {
        return fetch(PassionSubjectVideoTable.PASSION_SUBJECT_VIDEO.AUTHOR_I18N_ID, values);
    }

    /**
     * Fetch records that have <code>url BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<PassionSubjectVideoPojo> fetchRangeOfUrl(String lowerInclusive, String upperInclusive) {
        return fetchRange(PassionSubjectVideoTable.PASSION_SUBJECT_VIDEO.URL, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>url IN (values)</code>
     */
    @Nonnull
    public List<PassionSubjectVideoPojo> fetchByUrl(String... values) {
        return fetch(PassionSubjectVideoTable.PASSION_SUBJECT_VIDEO.URL, values);
    }

    /**
     * Fetch records that have <code>type BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<PassionSubjectVideoPojo> fetchRangeOfType(String lowerInclusive, String upperInclusive) {
        return fetchRange(PassionSubjectVideoTable.PASSION_SUBJECT_VIDEO.TYPE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>type IN (values)</code>
     */
    @Nonnull
    public List<PassionSubjectVideoPojo> fetchByType(String... values) {
        return fetch(PassionSubjectVideoTable.PASSION_SUBJECT_VIDEO.TYPE, values);
    }
}
