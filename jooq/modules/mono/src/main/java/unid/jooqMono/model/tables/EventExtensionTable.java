/*
 * This file is generated by jOOQ.
 */
package unid.jooqMono.model.tables;


import java.time.LocalDate;
import java.util.UUID;

import javax.annotation.Nonnull;
import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import unid.jooqMono.model.Keys;
import unid.jooqMono.model.Public;
import unid.jooqMono.model.enums.EventStatusEnum;
import unid.jooqMono.model.tables.records.EventExtensionRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.15.12"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class EventExtensionTable extends TableImpl<EventExtensionRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.event_extension</code>
     */
    public static final EventExtensionTable EVENT_EXTENSION = new EventExtensionTable();

    /**
     * The class holding records for this type
     */
    @Override
    @Nonnull
    public Class<EventExtensionRecord> getRecordType() {
        return EventExtensionRecord.class;
    }

    /**
     * The column <code>public.event_extension.id</code>.
     */
    public final TableField<EventExtensionRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field("gen_random_uuid()", SQLDataType.UUID)), this, "");

    /**
     * The column <code>public.event_extension.event_id</code>.
     */
    public final TableField<EventExtensionRecord, UUID> EVENT_ID = createField(DSL.name("event_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.event_extension.educator_profile_id</code>.
     */
    public final TableField<EventExtensionRecord, UUID> EDUCATOR_PROFILE_ID = createField(DSL.name("educator_profile_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.event_extension.agenda</code>.
     */
    public final TableField<EventExtensionRecord, String> AGENDA = createField(DSL.name("agenda"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.event_extension.event_status</code>.
     */
    public final TableField<EventExtensionRecord, EventStatusEnum> EVENT_STATUS = createField(DSL.name("event_status"), SQLDataType.VARCHAR.asEnumDataType(unid.jooqMono.model.enums.EventStatusEnum.class), this, "");

    /**
     * The column <code>public.event_extension.event_dates</code>.
     */
    public final TableField<EventExtensionRecord, LocalDate[]> EVENT_DATES = createField(DSL.name("event_dates"), SQLDataType.LOCALDATE.getArrayDataType(), this, "");

    /**
     * The column <code>public.event_extension.agenda_i18n_id</code>.
     */
    public final TableField<EventExtensionRecord, UUID> AGENDA_I18N_ID = createField(DSL.name("agenda_i18n_id"), SQLDataType.UUID, this, "");

    private EventExtensionTable(Name alias, Table<EventExtensionRecord> aliased) {
        this(alias, aliased, null);
    }

    private EventExtensionTable(Name alias, Table<EventExtensionRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.event_extension</code> table reference
     */
    public EventExtensionTable(String alias) {
        this(DSL.name(alias), EVENT_EXTENSION);
    }

    /**
     * Create an aliased <code>public.event_extension</code> table reference
     */
    public EventExtensionTable(Name alias) {
        this(alias, EVENT_EXTENSION);
    }

    /**
     * Create a <code>public.event_extension</code> table reference
     */
    public EventExtensionTable() {
        this(DSL.name("event_extension"), null);
    }

    public <O extends Record> EventExtensionTable(Table<O> child, ForeignKey<O, EventExtensionRecord> key) {
        super(child, key, EVENT_EXTENSION);
    }

    @Override
    @Nonnull
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    @Nonnull
    public UniqueKey<EventExtensionRecord> getPrimaryKey() {
        return Keys.EVENT_EXTENSION_PKEY;
    }

    @Override
    @Nonnull
    public EventExtensionTable as(String alias) {
        return new EventExtensionTable(DSL.name(alias), this);
    }

    @Override
    @Nonnull
    public EventExtensionTable as(Name alias) {
        return new EventExtensionTable(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public EventExtensionTable rename(String name) {
        return new EventExtensionTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public EventExtensionTable rename(Name name) {
        return new EventExtensionTable(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    @Nonnull
    public Row7<UUID, UUID, UUID, String, EventStatusEnum, LocalDate[], UUID> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
