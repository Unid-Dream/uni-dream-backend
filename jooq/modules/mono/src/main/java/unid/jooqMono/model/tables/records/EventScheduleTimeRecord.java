/*
 * This file is generated by jOOQ.
 */
package unid.jooqMono.model.tables.records;


import java.beans.ConstructorProperties;
import java.time.LocalDateTime;
import java.util.UUID;

import javax.annotation.Nonnull;
import javax.annotation.Nullable;
import javax.annotation.processing.Generated;
import javax.validation.constraints.NotNull;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record5;
import org.jooq.Row5;
import org.jooq.impl.UpdatableRecordImpl;

import unid.jooqMono.model.enums.ScheduleEventTypeEnum;
import unid.jooqMono.model.tables.EventScheduleTimeTable;
import unid.jooqMono.model.tables.pojos.EventScheduleTimePojo;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.15.12"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@lombok.experimental.FieldNameConstants(innerTypeName = "Columns")
public class EventScheduleTimeRecord extends UpdatableRecordImpl<EventScheduleTimeRecord> implements Record5<UUID, LocalDateTime, LocalDateTime, UUID, ScheduleEventTypeEnum> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.event_schedule_time.id</code>.
     */
    public EventScheduleTimeRecord setId(@Nonnull UUID value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>public.event_schedule_time.id</code>.
     */
    @Nonnull
    public UUID getId() {
        return (UUID) get(0);
    }

    /**
     * Setter for <code>public.event_schedule_time.start_time</code>.
     */
    public EventScheduleTimeRecord setStartTime(@Nullable LocalDateTime value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>public.event_schedule_time.start_time</code>.
     */
    @Nullable
    public LocalDateTime getStartTime() {
        return (LocalDateTime) get(1);
    }

    /**
     * Setter for <code>public.event_schedule_time.end_time</code>.
     */
    public EventScheduleTimeRecord setEndTime(@Nullable LocalDateTime value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>public.event_schedule_time.end_time</code>.
     */
    @Nullable
    public LocalDateTime getEndTime() {
        return (LocalDateTime) get(2);
    }

    /**
     * Setter for <code>public.event_schedule_time.ref_event_id</code>.
     */
    public EventScheduleTimeRecord setRefEventId(@Nullable UUID value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>public.event_schedule_time.ref_event_id</code>.
     */
    @Nullable
    public UUID getRefEventId() {
        return (UUID) get(3);
    }

    /**
     * Setter for <code>public.event_schedule_time.event_type</code>.
     */
    public EventScheduleTimeRecord setEventType(@Nonnull ScheduleEventTypeEnum value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>public.event_schedule_time.event_type</code>.
     */
    @NotNull
    @Nonnull
    public ScheduleEventTypeEnum getEventType() {
        return (ScheduleEventTypeEnum) get(4);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    @Nonnull
    public Record1<UUID> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record5 type implementation
    // -------------------------------------------------------------------------

    @Override
    @Nonnull
    public Row5<UUID, LocalDateTime, LocalDateTime, UUID, ScheduleEventTypeEnum> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    @Override
    @Nonnull
    public Row5<UUID, LocalDateTime, LocalDateTime, UUID, ScheduleEventTypeEnum> valuesRow() {
        return (Row5) super.valuesRow();
    }

    @Override
    @Nonnull
    public Field<UUID> field1() {
        return EventScheduleTimeTable.EVENT_SCHEDULE_TIME.ID;
    }

    @Override
    @Nonnull
    public Field<LocalDateTime> field2() {
        return EventScheduleTimeTable.EVENT_SCHEDULE_TIME.START_TIME;
    }

    @Override
    @Nonnull
    public Field<LocalDateTime> field3() {
        return EventScheduleTimeTable.EVENT_SCHEDULE_TIME.END_TIME;
    }

    @Override
    @Nonnull
    public Field<UUID> field4() {
        return EventScheduleTimeTable.EVENT_SCHEDULE_TIME.REF_EVENT_ID;
    }

    @Override
    @Nonnull
    public Field<ScheduleEventTypeEnum> field5() {
        return EventScheduleTimeTable.EVENT_SCHEDULE_TIME.EVENT_TYPE;
    }

    @Override
    @Nonnull
    public UUID component1() {
        return getId();
    }

    @Override
    @Nullable
    public LocalDateTime component2() {
        return getStartTime();
    }

    @Override
    @Nullable
    public LocalDateTime component3() {
        return getEndTime();
    }

    @Override
    @Nullable
    public UUID component4() {
        return getRefEventId();
    }

    @Override
    @Nonnull
    public ScheduleEventTypeEnum component5() {
        return getEventType();
    }

    @Override
    @Nonnull
    public UUID value1() {
        return getId();
    }

    @Override
    @Nullable
    public LocalDateTime value2() {
        return getStartTime();
    }

    @Override
    @Nullable
    public LocalDateTime value3() {
        return getEndTime();
    }

    @Override
    @Nullable
    public UUID value4() {
        return getRefEventId();
    }

    @Override
    @Nonnull
    public ScheduleEventTypeEnum value5() {
        return getEventType();
    }

    @Override
    @Nonnull
    public EventScheduleTimeRecord value1(@Nonnull UUID value) {
        setId(value);
        return this;
    }

    @Override
    @Nonnull
    public EventScheduleTimeRecord value2(@Nullable LocalDateTime value) {
        setStartTime(value);
        return this;
    }

    @Override
    @Nonnull
    public EventScheduleTimeRecord value3(@Nullable LocalDateTime value) {
        setEndTime(value);
        return this;
    }

    @Override
    @Nonnull
    public EventScheduleTimeRecord value4(@Nullable UUID value) {
        setRefEventId(value);
        return this;
    }

    @Override
    @Nonnull
    public EventScheduleTimeRecord value5(@Nonnull ScheduleEventTypeEnum value) {
        setEventType(value);
        return this;
    }

    @Override
    @Nonnull
    public EventScheduleTimeRecord values(@Nonnull UUID value1, @Nullable LocalDateTime value2, @Nullable LocalDateTime value3, @Nullable UUID value4, @Nonnull ScheduleEventTypeEnum value5) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached EventScheduleTimeRecord
     */
    public EventScheduleTimeRecord() {
        super(EventScheduleTimeTable.EVENT_SCHEDULE_TIME);
    }

    /**
     * Create a detached, initialised EventScheduleTimeRecord
     */
    @ConstructorProperties({ "id", "startTime", "endTime", "refEventId", "eventType" })
    public EventScheduleTimeRecord(@Nonnull UUID id, @Nullable LocalDateTime startTime, @Nullable LocalDateTime endTime, @Nullable UUID refEventId, @Nonnull ScheduleEventTypeEnum eventType) {
        super(EventScheduleTimeTable.EVENT_SCHEDULE_TIME);

        setId(id);
        setStartTime(startTime);
        setEndTime(endTime);
        setRefEventId(refEventId);
        setEventType(eventType);
    }

    /**
     * Create a detached, initialised EventScheduleTimeRecord
     */
    public EventScheduleTimeRecord(EventScheduleTimePojo value) {
        super(EventScheduleTimeTable.EVENT_SCHEDULE_TIME);

        if (value != null) {
            setId(value.getId());
            setStartTime(value.getStartTime());
            setEndTime(value.getEndTime());
            setRefEventId(value.getRefEventId());
            setEventType(value.getEventType());
        }
    }
}
