/*
 * This file is generated by jOOQ.
 */
package unid.jooqMono.model.tables;


import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import javax.annotation.Nonnull;
import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row13;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import unid.jooqMono.model.Keys;
import unid.jooqMono.model.Public;
import unid.jooqMono.model.tables.records.EcaCourseRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.15.12"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class EcaCourseTable extends TableImpl<EcaCourseRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.eca_course</code>
     */
    public static final EcaCourseTable ECA_COURSE = new EcaCourseTable();

    /**
     * The class holding records for this type
     */
    @Override
    @Nonnull
    public Class<EcaCourseRecord> getRecordType() {
        return EcaCourseRecord.class;
    }

    /**
     * The column <code>public.eca_course.id</code>.
     */
    public final TableField<EcaCourseRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field("gen_random_uuid()", SQLDataType.UUID)), this, "");

    /**
     * The column <code>public.eca_course.title_i18n_id</code>.
     */
    public final TableField<EcaCourseRecord, UUID> TITLE_I18N_ID = createField(DSL.name("title_i18n_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.eca_course.description_i18n_id</code>.
     */
    public final TableField<EcaCourseRecord, UUID> DESCRIPTION_I18N_ID = createField(DSL.name("description_i18n_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.eca_course.eligibility_i18n_id</code>.
     */
    public final TableField<EcaCourseRecord, UUID> ELIGIBILITY_I18N_ID = createField(DSL.name("eligibility_i18n_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.eca_course.created_on</code>.
     */
    public final TableField<EcaCourseRecord, OffsetDateTime> CREATED_ON = createField(DSL.name("created_on"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    /**
     * The column <code>public.eca_course.created_by</code>.
     */
    public final TableField<EcaCourseRecord, String> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.eca_course.updated_on</code>.
     */
    public final TableField<EcaCourseRecord, OffsetDateTime> UPDATED_ON = createField(DSL.name("updated_on"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    /**
     * The column <code>public.eca_course.updated_by</code>.
     */
    public final TableField<EcaCourseRecord, String> UPDATED_BY = createField(DSL.name("updated_by"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.eca_course.ref_url</code>.
     */
    public final TableField<EcaCourseRecord, String> REF_URL = createField(DSL.name("ref_url"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.eca_course.cover_image</code>.
     */
    public final TableField<EcaCourseRecord, String> COVER_IMAGE = createField(DSL.name("cover_image"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.eca_course.academic_id</code>.
     */
    public final TableField<EcaCourseRecord, UUID[]> ACADEMIC_ID = createField(DSL.name("academic_id"), SQLDataType.UUID.getArrayDataType(), this, "");

    /**
     * The column <code>public.eca_course.opportunity_id</code>.
     */
    public final TableField<EcaCourseRecord, UUID[]> OPPORTUNITY_ID = createField(DSL.name("opportunity_id"), SQLDataType.UUID.getArrayDataType(), this, "");

    /**
     * The column <code>public.eca_course.grade</code>.
     */
    public final TableField<EcaCourseRecord, Integer[]> GRADE = createField(DSL.name("grade"), SQLDataType.INTEGER.getArrayDataType(), this, "");

    private EcaCourseTable(Name alias, Table<EcaCourseRecord> aliased) {
        this(alias, aliased, null);
    }

    private EcaCourseTable(Name alias, Table<EcaCourseRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.eca_course</code> table reference
     */
    public EcaCourseTable(String alias) {
        this(DSL.name(alias), ECA_COURSE);
    }

    /**
     * Create an aliased <code>public.eca_course</code> table reference
     */
    public EcaCourseTable(Name alias) {
        this(alias, ECA_COURSE);
    }

    /**
     * Create a <code>public.eca_course</code> table reference
     */
    public EcaCourseTable() {
        this(DSL.name("eca_course"), null);
    }

    public <O extends Record> EcaCourseTable(Table<O> child, ForeignKey<O, EcaCourseRecord> key) {
        super(child, key, ECA_COURSE);
    }

    @Override
    @Nonnull
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    @Nonnull
    public UniqueKey<EcaCourseRecord> getPrimaryKey() {
        return Keys.ECA_COURSE_PKEY;
    }

    @Override
    @Nonnull
    public List<ForeignKey<EcaCourseRecord, ?>> getReferences() {
        return Arrays.asList(Keys.ECA_COURSE__FK_ECA_COUR_TITL, Keys.ECA_COURSE__FK_ECA_COUR_DESC, Keys.ECA_COURSE__FK_ECA_COUR_ELIG);
    }

    private transient I18nTable _fkEcaCourTitl;
    private transient I18nTable _fkEcaCourDesc;
    private transient I18nTable _fkEcaCourElig;

    public I18nTable fkEcaCourTitl() {
        if (_fkEcaCourTitl == null)
            _fkEcaCourTitl = new I18nTable(this, Keys.ECA_COURSE__FK_ECA_COUR_TITL);

        return _fkEcaCourTitl;
    }

    public I18nTable fkEcaCourDesc() {
        if (_fkEcaCourDesc == null)
            _fkEcaCourDesc = new I18nTable(this, Keys.ECA_COURSE__FK_ECA_COUR_DESC);

        return _fkEcaCourDesc;
    }

    public I18nTable fkEcaCourElig() {
        if (_fkEcaCourElig == null)
            _fkEcaCourElig = new I18nTable(this, Keys.ECA_COURSE__FK_ECA_COUR_ELIG);

        return _fkEcaCourElig;
    }

    @Override
    @Nonnull
    public EcaCourseTable as(String alias) {
        return new EcaCourseTable(DSL.name(alias), this);
    }

    @Override
    @Nonnull
    public EcaCourseTable as(Name alias) {
        return new EcaCourseTable(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public EcaCourseTable rename(String name) {
        return new EcaCourseTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public EcaCourseTable rename(Name name) {
        return new EcaCourseTable(name, null);
    }

    // -------------------------------------------------------------------------
    // Row13 type methods
    // -------------------------------------------------------------------------

    @Override
    @Nonnull
    public Row13<UUID, UUID, UUID, UUID, OffsetDateTime, String, OffsetDateTime, String, String, String, UUID[], UUID[], Integer[]> fieldsRow() {
        return (Row13) super.fieldsRow();
    }
}
