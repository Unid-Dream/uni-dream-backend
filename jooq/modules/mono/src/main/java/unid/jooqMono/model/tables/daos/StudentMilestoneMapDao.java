/*
 * This file is generated by jOOQ.
 */
package unid.jooqMono.model.tables.daos;


import java.util.List;
import java.util.UUID;

import javax.annotation.Nonnull;
import javax.annotation.Nullable;
import javax.annotation.processing.Generated;

import org.jooq.Configuration;
import org.jooq.JSONB;
import org.jooq.impl.DAOImpl;

import unid.jooqMono.model.tables.StudentMilestoneMapTable;
import unid.jooqMono.model.tables.pojos.StudentMilestoneMapPojo;
import unid.jooqMono.model.tables.records.StudentMilestoneMapRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.15.12"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class StudentMilestoneMapDao extends DAOImpl<StudentMilestoneMapRecord, StudentMilestoneMapPojo, UUID> {

    /**
     * Create a new StudentMilestoneMapDao without any configuration
     */
    public StudentMilestoneMapDao() {
        super(StudentMilestoneMapTable.STUDENT_MILESTONE_MAP, StudentMilestoneMapPojo.class);
    }

    /**
     * Create a new StudentMilestoneMapDao with an attached configuration
     */
    public StudentMilestoneMapDao(Configuration configuration) {
        super(StudentMilestoneMapTable.STUDENT_MILESTONE_MAP, StudentMilestoneMapPojo.class, configuration);
    }

    @Override
    @Nonnull
    public UUID getId(StudentMilestoneMapPojo object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<StudentMilestoneMapPojo> fetchRangeOfId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(StudentMilestoneMapTable.STUDENT_MILESTONE_MAP.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    @Nonnull
    public List<StudentMilestoneMapPojo> fetchById(UUID... values) {
        return fetch(StudentMilestoneMapTable.STUDENT_MILESTONE_MAP.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    @Nullable
    public StudentMilestoneMapPojo fetchOneById(UUID value) {
        return fetchOne(StudentMilestoneMapTable.STUDENT_MILESTONE_MAP.ID, value);
    }

    /**
     * Fetch records that have <code>student_profile_id BETWEEN lowerInclusive
     * AND upperInclusive</code>
     */
    @Nonnull
    public List<StudentMilestoneMapPojo> fetchRangeOfStudentProfileId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(StudentMilestoneMapTable.STUDENT_MILESTONE_MAP.STUDENT_PROFILE_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>student_profile_id IN (values)</code>
     */
    @Nonnull
    public List<StudentMilestoneMapPojo> fetchByStudentProfileId(UUID... values) {
        return fetch(StudentMilestoneMapTable.STUDENT_MILESTONE_MAP.STUDENT_PROFILE_ID, values);
    }

    /**
     * Fetch records that have <code>questionnaire BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<StudentMilestoneMapPojo> fetchRangeOfQuestionnaire(JSONB lowerInclusive, JSONB upperInclusive) {
        return fetchRange(StudentMilestoneMapTable.STUDENT_MILESTONE_MAP.QUESTIONNAIRE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>questionnaire IN (values)</code>
     */
    @Nonnull
    public List<StudentMilestoneMapPojo> fetchByQuestionnaire(JSONB... values) {
        return fetch(StudentMilestoneMapTable.STUDENT_MILESTONE_MAP.QUESTIONNAIRE, values);
    }
}
