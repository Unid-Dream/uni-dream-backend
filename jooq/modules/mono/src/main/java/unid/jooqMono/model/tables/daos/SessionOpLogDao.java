/*
 * This file is generated by jOOQ.
 */
package unid.jooqMono.model.tables.daos;


import java.time.OffsetDateTime;
import java.util.List;
import java.util.UUID;

import javax.annotation.Nonnull;
import javax.annotation.Nullable;
import javax.annotation.processing.Generated;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;

import unid.jooqMono.model.enums.BookingStatusEnum;
import unid.jooqMono.model.enums.SessionOpTypeEnum;
import unid.jooqMono.model.tables.SessionOpLogTable;
import unid.jooqMono.model.tables.pojos.SessionOpLogPojo;
import unid.jooqMono.model.tables.records.SessionOpLogRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.15.12"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SessionOpLogDao extends DAOImpl<SessionOpLogRecord, SessionOpLogPojo, UUID> {

    /**
     * Create a new SessionOpLogDao without any configuration
     */
    public SessionOpLogDao() {
        super(SessionOpLogTable.SESSION_OP_LOG, SessionOpLogPojo.class);
    }

    /**
     * Create a new SessionOpLogDao with an attached configuration
     */
    public SessionOpLogDao(Configuration configuration) {
        super(SessionOpLogTable.SESSION_OP_LOG, SessionOpLogPojo.class, configuration);
    }

    @Override
    @Nonnull
    public UUID getId(SessionOpLogPojo object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<SessionOpLogPojo> fetchRangeOfId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(SessionOpLogTable.SESSION_OP_LOG.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    @Nonnull
    public List<SessionOpLogPojo> fetchById(UUID... values) {
        return fetch(SessionOpLogTable.SESSION_OP_LOG.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    @Nullable
    public SessionOpLogPojo fetchOneById(UUID value) {
        return fetchOne(SessionOpLogTable.SESSION_OP_LOG.ID, value);
    }

    /**
     * Fetch records that have <code>time_utc BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<SessionOpLogPojo> fetchRangeOfTimeUtc(OffsetDateTime lowerInclusive, OffsetDateTime upperInclusive) {
        return fetchRange(SessionOpLogTable.SESSION_OP_LOG.TIME_UTC, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>time_utc IN (values)</code>
     */
    @Nonnull
    public List<SessionOpLogPojo> fetchByTimeUtc(OffsetDateTime... values) {
        return fetch(SessionOpLogTable.SESSION_OP_LOG.TIME_UTC, values);
    }

    /**
     * Fetch records that have <code>user_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<SessionOpLogPojo> fetchRangeOfUserId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(SessionOpLogTable.SESSION_OP_LOG.USER_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>user_id IN (values)</code>
     */
    @Nonnull
    public List<SessionOpLogPojo> fetchByUserId(UUID... values) {
        return fetch(SessionOpLogTable.SESSION_OP_LOG.USER_ID, values);
    }

    /**
     * Fetch records that have <code>status BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<SessionOpLogPojo> fetchRangeOfStatus(BookingStatusEnum lowerInclusive, BookingStatusEnum upperInclusive) {
        return fetchRange(SessionOpLogTable.SESSION_OP_LOG.STATUS, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>status IN (values)</code>
     */
    @Nonnull
    public List<SessionOpLogPojo> fetchByStatus(BookingStatusEnum... values) {
        return fetch(SessionOpLogTable.SESSION_OP_LOG.STATUS, values);
    }

    /**
     * Fetch records that have <code>op_type BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<SessionOpLogPojo> fetchRangeOfOpType(SessionOpTypeEnum lowerInclusive, SessionOpTypeEnum upperInclusive) {
        return fetchRange(SessionOpLogTable.SESSION_OP_LOG.OP_TYPE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>op_type IN (values)</code>
     */
    @Nonnull
    public List<SessionOpLogPojo> fetchByOpType(SessionOpTypeEnum... values) {
        return fetch(SessionOpLogTable.SESSION_OP_LOG.OP_TYPE, values);
    }

    /**
     * Fetch records that have <code>transaction_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<SessionOpLogPojo> fetchRangeOfTransactionId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(SessionOpLogTable.SESSION_OP_LOG.TRANSACTION_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>transaction_id IN (values)</code>
     */
    @Nonnull
    public List<SessionOpLogPojo> fetchByTransactionId(UUID... values) {
        return fetch(SessionOpLogTable.SESSION_OP_LOG.TRANSACTION_ID, values);
    }
}
