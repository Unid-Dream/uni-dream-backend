/*
 * This file is generated by jOOQ.
 */
package unid.jooqMono.model.tables.daos;


import java.time.OffsetDateTime;
import java.util.List;
import java.util.UUID;

import javax.annotation.Nonnull;
import javax.annotation.Nullable;
import javax.annotation.processing.Generated;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;

import unid.jooqMono.model.tables.EcaCourseTable;
import unid.jooqMono.model.tables.pojos.EcaCoursePojo;
import unid.jooqMono.model.tables.records.EcaCourseRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.15.12"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class EcaCourseDao extends DAOImpl<EcaCourseRecord, EcaCoursePojo, UUID> {

    /**
     * Create a new EcaCourseDao without any configuration
     */
    public EcaCourseDao() {
        super(EcaCourseTable.ECA_COURSE, EcaCoursePojo.class);
    }

    /**
     * Create a new EcaCourseDao with an attached configuration
     */
    public EcaCourseDao(Configuration configuration) {
        super(EcaCourseTable.ECA_COURSE, EcaCoursePojo.class, configuration);
    }

    @Override
    @Nonnull
    public UUID getId(EcaCoursePojo object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<EcaCoursePojo> fetchRangeOfId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(EcaCourseTable.ECA_COURSE.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    @Nonnull
    public List<EcaCoursePojo> fetchById(UUID... values) {
        return fetch(EcaCourseTable.ECA_COURSE.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    @Nullable
    public EcaCoursePojo fetchOneById(UUID value) {
        return fetchOne(EcaCourseTable.ECA_COURSE.ID, value);
    }

    /**
     * Fetch records that have <code>title_i18n_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<EcaCoursePojo> fetchRangeOfTitleI18nId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(EcaCourseTable.ECA_COURSE.TITLE_I18N_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>title_i18n_id IN (values)</code>
     */
    @Nonnull
    public List<EcaCoursePojo> fetchByTitleI18nId(UUID... values) {
        return fetch(EcaCourseTable.ECA_COURSE.TITLE_I18N_ID, values);
    }

    /**
     * Fetch records that have <code>description_i18n_id BETWEEN lowerInclusive
     * AND upperInclusive</code>
     */
    @Nonnull
    public List<EcaCoursePojo> fetchRangeOfDescriptionI18nId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(EcaCourseTable.ECA_COURSE.DESCRIPTION_I18N_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>description_i18n_id IN (values)</code>
     */
    @Nonnull
    public List<EcaCoursePojo> fetchByDescriptionI18nId(UUID... values) {
        return fetch(EcaCourseTable.ECA_COURSE.DESCRIPTION_I18N_ID, values);
    }

    /**
     * Fetch records that have <code>eligibility_i18n_id BETWEEN lowerInclusive
     * AND upperInclusive</code>
     */
    @Nonnull
    public List<EcaCoursePojo> fetchRangeOfEligibilityI18nId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(EcaCourseTable.ECA_COURSE.ELIGIBILITY_I18N_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>eligibility_i18n_id IN (values)</code>
     */
    @Nonnull
    public List<EcaCoursePojo> fetchByEligibilityI18nId(UUID... values) {
        return fetch(EcaCourseTable.ECA_COURSE.ELIGIBILITY_I18N_ID, values);
    }

    /**
     * Fetch records that have <code>created_on BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<EcaCoursePojo> fetchRangeOfCreatedOn(OffsetDateTime lowerInclusive, OffsetDateTime upperInclusive) {
        return fetchRange(EcaCourseTable.ECA_COURSE.CREATED_ON, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>created_on IN (values)</code>
     */
    @Nonnull
    public List<EcaCoursePojo> fetchByCreatedOn(OffsetDateTime... values) {
        return fetch(EcaCourseTable.ECA_COURSE.CREATED_ON, values);
    }

    /**
     * Fetch records that have <code>created_by BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<EcaCoursePojo> fetchRangeOfCreatedBy(String lowerInclusive, String upperInclusive) {
        return fetchRange(EcaCourseTable.ECA_COURSE.CREATED_BY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>created_by IN (values)</code>
     */
    @Nonnull
    public List<EcaCoursePojo> fetchByCreatedBy(String... values) {
        return fetch(EcaCourseTable.ECA_COURSE.CREATED_BY, values);
    }

    /**
     * Fetch records that have <code>updated_on BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<EcaCoursePojo> fetchRangeOfUpdatedOn(OffsetDateTime lowerInclusive, OffsetDateTime upperInclusive) {
        return fetchRange(EcaCourseTable.ECA_COURSE.UPDATED_ON, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>updated_on IN (values)</code>
     */
    @Nonnull
    public List<EcaCoursePojo> fetchByUpdatedOn(OffsetDateTime... values) {
        return fetch(EcaCourseTable.ECA_COURSE.UPDATED_ON, values);
    }

    /**
     * Fetch records that have <code>updated_by BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<EcaCoursePojo> fetchRangeOfUpdatedBy(String lowerInclusive, String upperInclusive) {
        return fetchRange(EcaCourseTable.ECA_COURSE.UPDATED_BY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>updated_by IN (values)</code>
     */
    @Nonnull
    public List<EcaCoursePojo> fetchByUpdatedBy(String... values) {
        return fetch(EcaCourseTable.ECA_COURSE.UPDATED_BY, values);
    }

    /**
     * Fetch records that have <code>ref_url BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<EcaCoursePojo> fetchRangeOfRefUrl(String lowerInclusive, String upperInclusive) {
        return fetchRange(EcaCourseTable.ECA_COURSE.REF_URL, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>ref_url IN (values)</code>
     */
    @Nonnull
    public List<EcaCoursePojo> fetchByRefUrl(String... values) {
        return fetch(EcaCourseTable.ECA_COURSE.REF_URL, values);
    }

    /**
     * Fetch records that have <code>cover_image BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<EcaCoursePojo> fetchRangeOfCoverImage(String lowerInclusive, String upperInclusive) {
        return fetchRange(EcaCourseTable.ECA_COURSE.COVER_IMAGE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>cover_image IN (values)</code>
     */
    @Nonnull
    public List<EcaCoursePojo> fetchByCoverImage(String... values) {
        return fetch(EcaCourseTable.ECA_COURSE.COVER_IMAGE, values);
    }

    /**
     * Fetch records that have <code>academic_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<EcaCoursePojo> fetchRangeOfAcademicId(UUID[] lowerInclusive, UUID[] upperInclusive) {
        return fetchRange(EcaCourseTable.ECA_COURSE.ACADEMIC_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>academic_id IN (values)</code>
     */
    @Nonnull
    public List<EcaCoursePojo> fetchByAcademicId(UUID[]... values) {
        return fetch(EcaCourseTable.ECA_COURSE.ACADEMIC_ID, values);
    }

    /**
     * Fetch records that have <code>opportunity_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<EcaCoursePojo> fetchRangeOfOpportunityId(UUID[] lowerInclusive, UUID[] upperInclusive) {
        return fetchRange(EcaCourseTable.ECA_COURSE.OPPORTUNITY_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>opportunity_id IN (values)</code>
     */
    @Nonnull
    public List<EcaCoursePojo> fetchByOpportunityId(UUID[]... values) {
        return fetch(EcaCourseTable.ECA_COURSE.OPPORTUNITY_ID, values);
    }

    /**
     * Fetch records that have <code>grade BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<EcaCoursePojo> fetchRangeOfGrade(Integer[] lowerInclusive, Integer[] upperInclusive) {
        return fetchRange(EcaCourseTable.ECA_COURSE.GRADE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>grade IN (values)</code>
     */
    @Nonnull
    public List<EcaCoursePojo> fetchByGrade(Integer[]... values) {
        return fetch(EcaCourseTable.ECA_COURSE.GRADE, values);
    }
}
