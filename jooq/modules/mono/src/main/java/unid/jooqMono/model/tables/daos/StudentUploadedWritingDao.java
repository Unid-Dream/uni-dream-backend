/*
 * This file is generated by jOOQ.
 */
package unid.jooqMono.model.tables.daos;


import java.time.OffsetDateTime;
import java.util.List;
import java.util.UUID;

import javax.annotation.Nonnull;
import javax.annotation.Nullable;
import javax.annotation.processing.Generated;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;

import unid.jooqMono.model.tables.StudentUploadedWritingTable;
import unid.jooqMono.model.tables.pojos.StudentUploadedWritingPojo;
import unid.jooqMono.model.tables.records.StudentUploadedWritingRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.15.12"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class StudentUploadedWritingDao extends DAOImpl<StudentUploadedWritingRecord, StudentUploadedWritingPojo, UUID> {

    /**
     * Create a new StudentUploadedWritingDao without any configuration
     */
    public StudentUploadedWritingDao() {
        super(StudentUploadedWritingTable.STUDENT_UPLOADED_WRITING, StudentUploadedWritingPojo.class);
    }

    /**
     * Create a new StudentUploadedWritingDao with an attached configuration
     */
    public StudentUploadedWritingDao(Configuration configuration) {
        super(StudentUploadedWritingTable.STUDENT_UPLOADED_WRITING, StudentUploadedWritingPojo.class, configuration);
    }

    @Override
    @Nonnull
    public UUID getId(StudentUploadedWritingPojo object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<StudentUploadedWritingPojo> fetchRangeOfId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(StudentUploadedWritingTable.STUDENT_UPLOADED_WRITING.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    @Nonnull
    public List<StudentUploadedWritingPojo> fetchById(UUID... values) {
        return fetch(StudentUploadedWritingTable.STUDENT_UPLOADED_WRITING.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    @Nullable
    public StudentUploadedWritingPojo fetchOneById(UUID value) {
        return fetchOne(StudentUploadedWritingTable.STUDENT_UPLOADED_WRITING.ID, value);
    }

    /**
     * Fetch records that have <code>student_profile_id BETWEEN lowerInclusive
     * AND upperInclusive</code>
     */
    @Nonnull
    public List<StudentUploadedWritingPojo> fetchRangeOfStudentProfileId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(StudentUploadedWritingTable.STUDENT_UPLOADED_WRITING.STUDENT_PROFILE_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>student_profile_id IN (values)</code>
     */
    @Nonnull
    public List<StudentUploadedWritingPojo> fetchByStudentProfileId(UUID... values) {
        return fetch(StudentUploadedWritingTable.STUDENT_UPLOADED_WRITING.STUDENT_PROFILE_ID, values);
    }

    /**
     * Fetch records that have <code>writing_topic_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<StudentUploadedWritingPojo> fetchRangeOfWritingTopicId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(StudentUploadedWritingTable.STUDENT_UPLOADED_WRITING.WRITING_TOPIC_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>writing_topic_id IN (values)</code>
     */
    @Nonnull
    public List<StudentUploadedWritingPojo> fetchByWritingTopicId(UUID... values) {
        return fetch(StudentUploadedWritingTable.STUDENT_UPLOADED_WRITING.WRITING_TOPIC_ID, values);
    }

    /**
     * Fetch records that have <code>payment_transaction_id BETWEEN
     * lowerInclusive AND upperInclusive</code>
     */
    @Nonnull
    public List<StudentUploadedWritingPojo> fetchRangeOfPaymentTransactionId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(StudentUploadedWritingTable.STUDENT_UPLOADED_WRITING.PAYMENT_TRANSACTION_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>payment_transaction_id IN (values)</code>
     */
    @Nonnull
    public List<StudentUploadedWritingPojo> fetchByPaymentTransactionId(UUID... values) {
        return fetch(StudentUploadedWritingTable.STUDENT_UPLOADED_WRITING.PAYMENT_TRANSACTION_ID, values);
    }

    /**
     * Fetch a unique record that has <code>payment_transaction_id =
     * value</code>
     */
    @Nullable
    public StudentUploadedWritingPojo fetchOneByPaymentTransactionId(UUID value) {
        return fetchOne(StudentUploadedWritingTable.STUDENT_UPLOADED_WRITING.PAYMENT_TRANSACTION_ID, value);
    }

    /**
     * Fetch records that have <code>uploaded_file BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<StudentUploadedWritingPojo> fetchRangeOfUploadedFile(String lowerInclusive, String upperInclusive) {
        return fetchRange(StudentUploadedWritingTable.STUDENT_UPLOADED_WRITING.UPLOADED_FILE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>uploaded_file IN (values)</code>
     */
    @Nonnull
    public List<StudentUploadedWritingPojo> fetchByUploadedFile(String... values) {
        return fetch(StudentUploadedWritingTable.STUDENT_UPLOADED_WRITING.UPLOADED_FILE, values);
    }

    /**
     * Fetch records that have <code>grammar_and_expression_review_id BETWEEN
     * lowerInclusive AND upperInclusive</code>
     */
    @Nonnull
    public List<StudentUploadedWritingPojo> fetchRangeOfGrammarAndExpressionReviewId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(StudentUploadedWritingTable.STUDENT_UPLOADED_WRITING.GRAMMAR_AND_EXPRESSION_REVIEW_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>grammar_and_expression_review_id IN
     * (values)</code>
     */
    @Nonnull
    public List<StudentUploadedWritingPojo> fetchByGrammarAndExpressionReviewId(UUID... values) {
        return fetch(StudentUploadedWritingTable.STUDENT_UPLOADED_WRITING.GRAMMAR_AND_EXPRESSION_REVIEW_ID, values);
    }

    /**
     * Fetch records that have <code>content_review_id BETWEEN lowerInclusive
     * AND upperInclusive</code>
     */
    @Nonnull
    public List<StudentUploadedWritingPojo> fetchRangeOfContentReviewId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(StudentUploadedWritingTable.STUDENT_UPLOADED_WRITING.CONTENT_REVIEW_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>content_review_id IN (values)</code>
     */
    @Nonnull
    public List<StudentUploadedWritingPojo> fetchByContentReviewId(UUID... values) {
        return fetch(StudentUploadedWritingTable.STUDENT_UPLOADED_WRITING.CONTENT_REVIEW_ID, values);
    }

    /**
     * Fetch records that have <code>composition_review_id BETWEEN
     * lowerInclusive AND upperInclusive</code>
     */
    @Nonnull
    public List<StudentUploadedWritingPojo> fetchRangeOfCompositionReviewId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(StudentUploadedWritingTable.STUDENT_UPLOADED_WRITING.COMPOSITION_REVIEW_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>composition_review_id IN (values)</code>
     */
    @Nonnull
    public List<StudentUploadedWritingPojo> fetchByCompositionReviewId(UUID... values) {
        return fetch(StudentUploadedWritingTable.STUDENT_UPLOADED_WRITING.COMPOSITION_REVIEW_ID, values);
    }

    /**
     * Fetch records that have <code>created_on BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<StudentUploadedWritingPojo> fetchRangeOfCreatedOn(OffsetDateTime lowerInclusive, OffsetDateTime upperInclusive) {
        return fetchRange(StudentUploadedWritingTable.STUDENT_UPLOADED_WRITING.CREATED_ON, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>created_on IN (values)</code>
     */
    @Nonnull
    public List<StudentUploadedWritingPojo> fetchByCreatedOn(OffsetDateTime... values) {
        return fetch(StudentUploadedWritingTable.STUDENT_UPLOADED_WRITING.CREATED_ON, values);
    }

    /**
     * Fetch records that have <code>created_by BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<StudentUploadedWritingPojo> fetchRangeOfCreatedBy(String lowerInclusive, String upperInclusive) {
        return fetchRange(StudentUploadedWritingTable.STUDENT_UPLOADED_WRITING.CREATED_BY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>created_by IN (values)</code>
     */
    @Nonnull
    public List<StudentUploadedWritingPojo> fetchByCreatedBy(String... values) {
        return fetch(StudentUploadedWritingTable.STUDENT_UPLOADED_WRITING.CREATED_BY, values);
    }

    /**
     * Fetch records that have <code>updated_on BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<StudentUploadedWritingPojo> fetchRangeOfUpdatedOn(OffsetDateTime lowerInclusive, OffsetDateTime upperInclusive) {
        return fetchRange(StudentUploadedWritingTable.STUDENT_UPLOADED_WRITING.UPDATED_ON, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>updated_on IN (values)</code>
     */
    @Nonnull
    public List<StudentUploadedWritingPojo> fetchByUpdatedOn(OffsetDateTime... values) {
        return fetch(StudentUploadedWritingTable.STUDENT_UPLOADED_WRITING.UPDATED_ON, values);
    }

    /**
     * Fetch records that have <code>updated_by BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<StudentUploadedWritingPojo> fetchRangeOfUpdatedBy(String lowerInclusive, String upperInclusive) {
        return fetchRange(StudentUploadedWritingTable.STUDENT_UPLOADED_WRITING.UPDATED_BY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>updated_by IN (values)</code>
     */
    @Nonnull
    public List<StudentUploadedWritingPojo> fetchByUpdatedBy(String... values) {
        return fetch(StudentUploadedWritingTable.STUDENT_UPLOADED_WRITING.UPDATED_BY, values);
    }

    /**
     * Fetch records that have <code>recommended_activity BETWEEN lowerInclusive
     * AND upperInclusive</code>
     */
    @Nonnull
    public List<StudentUploadedWritingPojo> fetchRangeOfRecommendedActivity(String[] lowerInclusive, String[] upperInclusive) {
        return fetchRange(StudentUploadedWritingTable.STUDENT_UPLOADED_WRITING.RECOMMENDED_ACTIVITY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>recommended_activity IN (values)</code>
     */
    @Nonnull
    public List<StudentUploadedWritingPojo> fetchByRecommendedActivity(String[]... values) {
        return fetch(StudentUploadedWritingTable.STUDENT_UPLOADED_WRITING.RECOMMENDED_ACTIVITY, values);
    }

    /**
     * Fetch records that have <code>recommendation BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<StudentUploadedWritingPojo> fetchRangeOfRecommendation(String lowerInclusive, String upperInclusive) {
        return fetchRange(StudentUploadedWritingTable.STUDENT_UPLOADED_WRITING.RECOMMENDATION, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>recommendation IN (values)</code>
     */
    @Nonnull
    public List<StudentUploadedWritingPojo> fetchByRecommendation(String... values) {
        return fetch(StudentUploadedWritingTable.STUDENT_UPLOADED_WRITING.RECOMMENDATION, values);
    }
}
