/*
 * This file is generated by jOOQ.
 */
package unid.jooqMono.model.tables.daos;


import java.time.OffsetDateTime;
import java.util.List;
import java.util.UUID;

import javax.annotation.Nonnull;
import javax.annotation.Nullable;
import javax.annotation.processing.Generated;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;

import unid.jooqMono.model.enums.QuestionnaireQuestionTypeEnum;
import unid.jooqMono.model.tables.StudentQuestionnaireQuestionTable;
import unid.jooqMono.model.tables.pojos.StudentQuestionnaireQuestionPojo;
import unid.jooqMono.model.tables.records.StudentQuestionnaireQuestionRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.15.12"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class StudentQuestionnaireQuestionDao extends DAOImpl<StudentQuestionnaireQuestionRecord, StudentQuestionnaireQuestionPojo, UUID> {

    /**
     * Create a new StudentQuestionnaireQuestionDao without any configuration
     */
    public StudentQuestionnaireQuestionDao() {
        super(StudentQuestionnaireQuestionTable.STUDENT_QUESTIONNAIRE_QUESTION, StudentQuestionnaireQuestionPojo.class);
    }

    /**
     * Create a new StudentQuestionnaireQuestionDao with an attached
     * configuration
     */
    public StudentQuestionnaireQuestionDao(Configuration configuration) {
        super(StudentQuestionnaireQuestionTable.STUDENT_QUESTIONNAIRE_QUESTION, StudentQuestionnaireQuestionPojo.class, configuration);
    }

    @Override
    @Nonnull
    public UUID getId(StudentQuestionnaireQuestionPojo object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<StudentQuestionnaireQuestionPojo> fetchRangeOfId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(StudentQuestionnaireQuestionTable.STUDENT_QUESTIONNAIRE_QUESTION.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    @Nonnull
    public List<StudentQuestionnaireQuestionPojo> fetchById(UUID... values) {
        return fetch(StudentQuestionnaireQuestionTable.STUDENT_QUESTIONNAIRE_QUESTION.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    @Nullable
    public StudentQuestionnaireQuestionPojo fetchOneById(UUID value) {
        return fetchOne(StudentQuestionnaireQuestionTable.STUDENT_QUESTIONNAIRE_QUESTION.ID, value);
    }

    /**
     * Fetch records that have <code>student_questionnaire_section_id BETWEEN
     * lowerInclusive AND upperInclusive</code>
     */
    @Nonnull
    public List<StudentQuestionnaireQuestionPojo> fetchRangeOfStudentQuestionnaireSectionId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(StudentQuestionnaireQuestionTable.STUDENT_QUESTIONNAIRE_QUESTION.STUDENT_QUESTIONNAIRE_SECTION_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>student_questionnaire_section_id IN
     * (values)</code>
     */
    @Nonnull
    public List<StudentQuestionnaireQuestionPojo> fetchByStudentQuestionnaireSectionId(UUID... values) {
        return fetch(StudentQuestionnaireQuestionTable.STUDENT_QUESTIONNAIRE_QUESTION.STUDENT_QUESTIONNAIRE_SECTION_ID, values);
    }

    /**
     * Fetch records that have <code>order BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<StudentQuestionnaireQuestionPojo> fetchRangeOfOrder(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(StudentQuestionnaireQuestionTable.STUDENT_QUESTIONNAIRE_QUESTION.ORDER, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>order IN (values)</code>
     */
    @Nonnull
    public List<StudentQuestionnaireQuestionPojo> fetchByOrder(Integer... values) {
        return fetch(StudentQuestionnaireQuestionTable.STUDENT_QUESTIONNAIRE_QUESTION.ORDER, values);
    }

    /**
     * Fetch records that have <code>description_i18n_id BETWEEN lowerInclusive
     * AND upperInclusive</code>
     */
    @Nonnull
    public List<StudentQuestionnaireQuestionPojo> fetchRangeOfDescriptionI18nId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(StudentQuestionnaireQuestionTable.STUDENT_QUESTIONNAIRE_QUESTION.DESCRIPTION_I18N_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>description_i18n_id IN (values)</code>
     */
    @Nonnull
    public List<StudentQuestionnaireQuestionPojo> fetchByDescriptionI18nId(UUID... values) {
        return fetch(StudentQuestionnaireQuestionTable.STUDENT_QUESTIONNAIRE_QUESTION.DESCRIPTION_I18N_ID, values);
    }

    /**
     * Fetch a unique record that has <code>description_i18n_id = value</code>
     */
    @Nullable
    public StudentQuestionnaireQuestionPojo fetchOneByDescriptionI18nId(UUID value) {
        return fetchOne(StudentQuestionnaireQuestionTable.STUDENT_QUESTIONNAIRE_QUESTION.DESCRIPTION_I18N_ID, value);
    }

    /**
     * Fetch records that have <code>mandatory BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<StudentQuestionnaireQuestionPojo> fetchRangeOfMandatory(Boolean lowerInclusive, Boolean upperInclusive) {
        return fetchRange(StudentQuestionnaireQuestionTable.STUDENT_QUESTIONNAIRE_QUESTION.MANDATORY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>mandatory IN (values)</code>
     */
    @Nonnull
    public List<StudentQuestionnaireQuestionPojo> fetchByMandatory(Boolean... values) {
        return fetch(StudentQuestionnaireQuestionTable.STUDENT_QUESTIONNAIRE_QUESTION.MANDATORY, values);
    }

    /**
     * Fetch records that have <code>type BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<StudentQuestionnaireQuestionPojo> fetchRangeOfType(QuestionnaireQuestionTypeEnum lowerInclusive, QuestionnaireQuestionTypeEnum upperInclusive) {
        return fetchRange(StudentQuestionnaireQuestionTable.STUDENT_QUESTIONNAIRE_QUESTION.TYPE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>type IN (values)</code>
     */
    @Nonnull
    public List<StudentQuestionnaireQuestionPojo> fetchByType(QuestionnaireQuestionTypeEnum... values) {
        return fetch(StudentQuestionnaireQuestionTable.STUDENT_QUESTIONNAIRE_QUESTION.TYPE, values);
    }

    /**
     * Fetch records that have <code>created_on BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<StudentQuestionnaireQuestionPojo> fetchRangeOfCreatedOn(OffsetDateTime lowerInclusive, OffsetDateTime upperInclusive) {
        return fetchRange(StudentQuestionnaireQuestionTable.STUDENT_QUESTIONNAIRE_QUESTION.CREATED_ON, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>created_on IN (values)</code>
     */
    @Nonnull
    public List<StudentQuestionnaireQuestionPojo> fetchByCreatedOn(OffsetDateTime... values) {
        return fetch(StudentQuestionnaireQuestionTable.STUDENT_QUESTIONNAIRE_QUESTION.CREATED_ON, values);
    }

    /**
     * Fetch records that have <code>created_by BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<StudentQuestionnaireQuestionPojo> fetchRangeOfCreatedBy(String lowerInclusive, String upperInclusive) {
        return fetchRange(StudentQuestionnaireQuestionTable.STUDENT_QUESTIONNAIRE_QUESTION.CREATED_BY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>created_by IN (values)</code>
     */
    @Nonnull
    public List<StudentQuestionnaireQuestionPojo> fetchByCreatedBy(String... values) {
        return fetch(StudentQuestionnaireQuestionTable.STUDENT_QUESTIONNAIRE_QUESTION.CREATED_BY, values);
    }

    /**
     * Fetch records that have <code>updated_on BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<StudentQuestionnaireQuestionPojo> fetchRangeOfUpdatedOn(OffsetDateTime lowerInclusive, OffsetDateTime upperInclusive) {
        return fetchRange(StudentQuestionnaireQuestionTable.STUDENT_QUESTIONNAIRE_QUESTION.UPDATED_ON, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>updated_on IN (values)</code>
     */
    @Nonnull
    public List<StudentQuestionnaireQuestionPojo> fetchByUpdatedOn(OffsetDateTime... values) {
        return fetch(StudentQuestionnaireQuestionTable.STUDENT_QUESTIONNAIRE_QUESTION.UPDATED_ON, values);
    }

    /**
     * Fetch records that have <code>updated_by BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<StudentQuestionnaireQuestionPojo> fetchRangeOfUpdatedBy(String lowerInclusive, String upperInclusive) {
        return fetchRange(StudentQuestionnaireQuestionTable.STUDENT_QUESTIONNAIRE_QUESTION.UPDATED_BY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>updated_by IN (values)</code>
     */
    @Nonnull
    public List<StudentQuestionnaireQuestionPojo> fetchByUpdatedBy(String... values) {
        return fetch(StudentQuestionnaireQuestionTable.STUDENT_QUESTIONNAIRE_QUESTION.UPDATED_BY, values);
    }
}
