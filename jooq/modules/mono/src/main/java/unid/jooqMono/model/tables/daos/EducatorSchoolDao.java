/*
 * This file is generated by jOOQ.
 */
package unid.jooqMono.model.tables.daos;


import java.util.List;
import java.util.UUID;

import javax.annotation.Nonnull;
import javax.annotation.Nullable;
import javax.annotation.processing.Generated;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;

import unid.jooqMono.model.tables.EducatorSchoolTable;
import unid.jooqMono.model.tables.pojos.EducatorSchoolPojo;
import unid.jooqMono.model.tables.records.EducatorSchoolRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.15.12"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class EducatorSchoolDao extends DAOImpl<EducatorSchoolRecord, EducatorSchoolPojo, UUID> {

    /**
     * Create a new EducatorSchoolDao without any configuration
     */
    public EducatorSchoolDao() {
        super(EducatorSchoolTable.EDUCATOR_SCHOOL, EducatorSchoolPojo.class);
    }

    /**
     * Create a new EducatorSchoolDao with an attached configuration
     */
    public EducatorSchoolDao(Configuration configuration) {
        super(EducatorSchoolTable.EDUCATOR_SCHOOL, EducatorSchoolPojo.class, configuration);
    }

    @Override
    @Nonnull
    public UUID getId(EducatorSchoolPojo object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<EducatorSchoolPojo> fetchRangeOfId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(EducatorSchoolTable.EDUCATOR_SCHOOL.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    @Nonnull
    public List<EducatorSchoolPojo> fetchById(UUID... values) {
        return fetch(EducatorSchoolTable.EDUCATOR_SCHOOL.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    @Nullable
    public EducatorSchoolPojo fetchOneById(UUID value) {
        return fetchOne(EducatorSchoolTable.EDUCATOR_SCHOOL.ID, value);
    }

    /**
     * Fetch records that have <code>university_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<EducatorSchoolPojo> fetchRangeOfUniversityId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(EducatorSchoolTable.EDUCATOR_SCHOOL.UNIVERSITY_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>university_id IN (values)</code>
     */
    @Nonnull
    public List<EducatorSchoolPojo> fetchByUniversityId(UUID... values) {
        return fetch(EducatorSchoolTable.EDUCATOR_SCHOOL.UNIVERSITY_ID, values);
    }

    /**
     * Fetch records that have <code>degree_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<EducatorSchoolPojo> fetchRangeOfDegreeId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(EducatorSchoolTable.EDUCATOR_SCHOOL.DEGREE_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>degree_id IN (values)</code>
     */
    @Nonnull
    public List<EducatorSchoolPojo> fetchByDegreeId(UUID... values) {
        return fetch(EducatorSchoolTable.EDUCATOR_SCHOOL.DEGREE_ID, values);
    }

    /**
     * Fetch records that have <code>educator_profile_id BETWEEN lowerInclusive
     * AND upperInclusive</code>
     */
    @Nonnull
    public List<EducatorSchoolPojo> fetchRangeOfEducatorProfileId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(EducatorSchoolTable.EDUCATOR_SCHOOL.EDUCATOR_PROFILE_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>educator_profile_id IN (values)</code>
     */
    @Nonnull
    public List<EducatorSchoolPojo> fetchByEducatorProfileId(UUID... values) {
        return fetch(EducatorSchoolTable.EDUCATOR_SCHOOL.EDUCATOR_PROFILE_ID, values);
    }
}
