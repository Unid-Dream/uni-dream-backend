/*
 * This file is generated by jOOQ.
 */
package unid.jooqMono.model.tables;


import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import javax.annotation.Nonnull;
import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import unid.jooqMono.model.Keys;
import unid.jooqMono.model.Public;
import unid.jooqMono.model.tables.records.EcaCourseAcademicMajorEducationLevelMapRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.15.12"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class EcaCourseAcademicMajorEducationLevelMapTable extends TableImpl<EcaCourseAcademicMajorEducationLevelMapRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>public.eca_course_academic_major_education_level_map</code>
     */
    public static final EcaCourseAcademicMajorEducationLevelMapTable ECA_COURSE_ACADEMIC_MAJOR_EDUCATION_LEVEL_MAP = new EcaCourseAcademicMajorEducationLevelMapTable();

    /**
     * The class holding records for this type
     */
    @Override
    @Nonnull
    public Class<EcaCourseAcademicMajorEducationLevelMapRecord> getRecordType() {
        return EcaCourseAcademicMajorEducationLevelMapRecord.class;
    }

    /**
     * The column
     * <code>public.eca_course_academic_major_education_level_map.id</code>.
     */
    public final TableField<EcaCourseAcademicMajorEducationLevelMapRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field("gen_random_uuid()", SQLDataType.UUID)), this, "");

    /**
     * The column
     * <code>public.eca_course_academic_major_education_level_map.eca_course_id</code>.
     */
    public final TableField<EcaCourseAcademicMajorEducationLevelMapRecord, UUID> ECA_COURSE_ID = createField(DSL.name("eca_course_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column
     * <code>public.eca_course_academic_major_education_level_map.education_level_id</code>.
     */
    public final TableField<EcaCourseAcademicMajorEducationLevelMapRecord, UUID> EDUCATION_LEVEL_ID = createField(DSL.name("education_level_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column
     * <code>public.eca_course_academic_major_education_level_map.created_on</code>.
     */
    public final TableField<EcaCourseAcademicMajorEducationLevelMapRecord, OffsetDateTime> CREATED_ON = createField(DSL.name("created_on"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    /**
     * The column
     * <code>public.eca_course_academic_major_education_level_map.created_by</code>.
     */
    public final TableField<EcaCourseAcademicMajorEducationLevelMapRecord, String> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.CLOB, this, "");

    /**
     * The column
     * <code>public.eca_course_academic_major_education_level_map.updated_on</code>.
     */
    public final TableField<EcaCourseAcademicMajorEducationLevelMapRecord, OffsetDateTime> UPDATED_ON = createField(DSL.name("updated_on"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    /**
     * The column
     * <code>public.eca_course_academic_major_education_level_map.updated_by</code>.
     */
    public final TableField<EcaCourseAcademicMajorEducationLevelMapRecord, String> UPDATED_BY = createField(DSL.name("updated_by"), SQLDataType.CLOB, this, "");

    private EcaCourseAcademicMajorEducationLevelMapTable(Name alias, Table<EcaCourseAcademicMajorEducationLevelMapRecord> aliased) {
        this(alias, aliased, null);
    }

    private EcaCourseAcademicMajorEducationLevelMapTable(Name alias, Table<EcaCourseAcademicMajorEducationLevelMapRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased
     * <code>public.eca_course_academic_major_education_level_map</code> table
     * reference
     */
    public EcaCourseAcademicMajorEducationLevelMapTable(String alias) {
        this(DSL.name(alias), ECA_COURSE_ACADEMIC_MAJOR_EDUCATION_LEVEL_MAP);
    }

    /**
     * Create an aliased
     * <code>public.eca_course_academic_major_education_level_map</code> table
     * reference
     */
    public EcaCourseAcademicMajorEducationLevelMapTable(Name alias) {
        this(alias, ECA_COURSE_ACADEMIC_MAJOR_EDUCATION_LEVEL_MAP);
    }

    /**
     * Create a
     * <code>public.eca_course_academic_major_education_level_map</code> table
     * reference
     */
    public EcaCourseAcademicMajorEducationLevelMapTable() {
        this(DSL.name("eca_course_academic_major_education_level_map"), null);
    }

    public <O extends Record> EcaCourseAcademicMajorEducationLevelMapTable(Table<O> child, ForeignKey<O, EcaCourseAcademicMajorEducationLevelMapRecord> key) {
        super(child, key, ECA_COURSE_ACADEMIC_MAJOR_EDUCATION_LEVEL_MAP);
    }

    @Override
    @Nonnull
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    @Nonnull
    public UniqueKey<EcaCourseAcademicMajorEducationLevelMapRecord> getPrimaryKey() {
        return Keys.ECA_COURSE_ACADEMIC_MAJOR_EDUCATION_LEVEL_MAP_PKEY;
    }

    @Override
    @Nonnull
    public List<UniqueKey<EcaCourseAcademicMajorEducationLevelMapRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.UQ_ECA_COUR_EDU_LEVL_MAP);
    }

    @Override
    @Nonnull
    public List<ForeignKey<EcaCourseAcademicMajorEducationLevelMapRecord, ?>> getReferences() {
        return Arrays.asList(Keys.ECA_COURSE_ACADEMIC_MAJOR_EDUCATION_LEVEL_MAP__FK_ECA_COUR_EDU_LEVL_MAP_ECA_COUR, Keys.ECA_COURSE_ACADEMIC_MAJOR_EDUCATION_LEVEL_MAP__FK_ECA_COUR_EDU_LEVL_MAP_EDU_LEVL);
    }

    private transient EcaCourseTable _ecaCourse;
    private transient EducationLevelTable _educationLevel;

    public EcaCourseTable ecaCourse() {
        if (_ecaCourse == null)
            _ecaCourse = new EcaCourseTable(this, Keys.ECA_COURSE_ACADEMIC_MAJOR_EDUCATION_LEVEL_MAP__FK_ECA_COUR_EDU_LEVL_MAP_ECA_COUR);

        return _ecaCourse;
    }

    public EducationLevelTable educationLevel() {
        if (_educationLevel == null)
            _educationLevel = new EducationLevelTable(this, Keys.ECA_COURSE_ACADEMIC_MAJOR_EDUCATION_LEVEL_MAP__FK_ECA_COUR_EDU_LEVL_MAP_EDU_LEVL);

        return _educationLevel;
    }

    @Override
    @Nonnull
    public EcaCourseAcademicMajorEducationLevelMapTable as(String alias) {
        return new EcaCourseAcademicMajorEducationLevelMapTable(DSL.name(alias), this);
    }

    @Override
    @Nonnull
    public EcaCourseAcademicMajorEducationLevelMapTable as(Name alias) {
        return new EcaCourseAcademicMajorEducationLevelMapTable(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public EcaCourseAcademicMajorEducationLevelMapTable rename(String name) {
        return new EcaCourseAcademicMajorEducationLevelMapTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public EcaCourseAcademicMajorEducationLevelMapTable rename(Name name) {
        return new EcaCourseAcademicMajorEducationLevelMapTable(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    @Nonnull
    public Row7<UUID, UUID, UUID, OffsetDateTime, String, OffsetDateTime, String> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
