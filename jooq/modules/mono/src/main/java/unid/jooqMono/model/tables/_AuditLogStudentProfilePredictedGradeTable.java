/*
 * This file is generated by jOOQ.
 */
package unid.jooqMono.model.tables;


import java.time.OffsetDateTime;
import java.util.UUID;

import javax.annotation.Nonnull;
import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row13;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import unid.jooqMono.model.Public;
import unid.jooqMono.model.tables.records._AuditLogStudentProfilePredictedGradeRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.15.12"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class _AuditLogStudentProfilePredictedGradeTable extends TableImpl<_AuditLogStudentProfilePredictedGradeRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>public._audit_log_student_profile_predicted_grade</code>
     */
    public static final _AuditLogStudentProfilePredictedGradeTable _AUDIT_LOG_STUDENT_PROFILE_PREDICTED_GRADE = new _AuditLogStudentProfilePredictedGradeTable();

    /**
     * The class holding records for this type
     */
    @Override
    @Nonnull
    public Class<_AuditLogStudentProfilePredictedGradeRecord> getRecordType() {
        return _AuditLogStudentProfilePredictedGradeRecord.class;
    }

    /**
     * The column
     * <code>public._audit_log_student_profile_predicted_grade.audit_seq</code>.
     */
    public final TableField<_AuditLogStudentProfilePredictedGradeRecord, Long> AUDIT_SEQ = createField(DSL.name("audit_seq"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column
     * <code>public._audit_log_student_profile_predicted_grade.audit_createdon</code>.
     */
    public final TableField<_AuditLogStudentProfilePredictedGradeRecord, OffsetDateTime> AUDIT_CREATEDON = createField(DSL.name("audit_createdon"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    /**
     * The column
     * <code>public._audit_log_student_profile_predicted_grade.audit_createdby</code>.
     */
    public final TableField<_AuditLogStudentProfilePredictedGradeRecord, String> AUDIT_CREATEDBY = createField(DSL.name("audit_createdby"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column
     * <code>public._audit_log_student_profile_predicted_grade.audit_operation</code>.
     */
    public final TableField<_AuditLogStudentProfilePredictedGradeRecord, String> AUDIT_OPERATION = createField(DSL.name("audit_operation"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column
     * <code>public._audit_log_student_profile_predicted_grade.audit_type</code>.
     */
    public final TableField<_AuditLogStudentProfilePredictedGradeRecord, String> AUDIT_TYPE = createField(DSL.name("audit_type"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column
     * <code>public._audit_log_student_profile_predicted_grade.id</code>.
     */
    public final TableField<_AuditLogStudentProfilePredictedGradeRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column
     * <code>public._audit_log_student_profile_predicted_grade.student_profile_id</code>.
     */
    public final TableField<_AuditLogStudentProfilePredictedGradeRecord, UUID> STUDENT_PROFILE_ID = createField(DSL.name("student_profile_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column
     * <code>public._audit_log_student_profile_predicted_grade.academic_subject_id</code>.
     */
    public final TableField<_AuditLogStudentProfilePredictedGradeRecord, UUID> ACADEMIC_SUBJECT_ID = createField(DSL.name("academic_subject_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column
     * <code>public._audit_log_student_profile_predicted_grade.grade</code>.
     */
    public final TableField<_AuditLogStudentProfilePredictedGradeRecord, String> GRADE = createField(DSL.name("grade"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column
     * <code>public._audit_log_student_profile_predicted_grade.created_on</code>.
     */
    public final TableField<_AuditLogStudentProfilePredictedGradeRecord, OffsetDateTime> CREATED_ON = createField(DSL.name("created_on"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    /**
     * The column
     * <code>public._audit_log_student_profile_predicted_grade.created_by</code>.
     */
    public final TableField<_AuditLogStudentProfilePredictedGradeRecord, String> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.CLOB, this, "");

    /**
     * The column
     * <code>public._audit_log_student_profile_predicted_grade.updated_on</code>.
     */
    public final TableField<_AuditLogStudentProfilePredictedGradeRecord, OffsetDateTime> UPDATED_ON = createField(DSL.name("updated_on"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    /**
     * The column
     * <code>public._audit_log_student_profile_predicted_grade.updated_by</code>.
     */
    public final TableField<_AuditLogStudentProfilePredictedGradeRecord, String> UPDATED_BY = createField(DSL.name("updated_by"), SQLDataType.CLOB, this, "");

    private _AuditLogStudentProfilePredictedGradeTable(Name alias, Table<_AuditLogStudentProfilePredictedGradeRecord> aliased) {
        this(alias, aliased, null);
    }

    private _AuditLogStudentProfilePredictedGradeTable(Name alias, Table<_AuditLogStudentProfilePredictedGradeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased
     * <code>public._audit_log_student_profile_predicted_grade</code> table
     * reference
     */
    public _AuditLogStudentProfilePredictedGradeTable(String alias) {
        this(DSL.name(alias), _AUDIT_LOG_STUDENT_PROFILE_PREDICTED_GRADE);
    }

    /**
     * Create an aliased
     * <code>public._audit_log_student_profile_predicted_grade</code> table
     * reference
     */
    public _AuditLogStudentProfilePredictedGradeTable(Name alias) {
        this(alias, _AUDIT_LOG_STUDENT_PROFILE_PREDICTED_GRADE);
    }

    /**
     * Create a <code>public._audit_log_student_profile_predicted_grade</code>
     * table reference
     */
    public _AuditLogStudentProfilePredictedGradeTable() {
        this(DSL.name("_audit_log_student_profile_predicted_grade"), null);
    }

    public <O extends Record> _AuditLogStudentProfilePredictedGradeTable(Table<O> child, ForeignKey<O, _AuditLogStudentProfilePredictedGradeRecord> key) {
        super(child, key, _AUDIT_LOG_STUDENT_PROFILE_PREDICTED_GRADE);
    }

    @Override
    @Nonnull
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    @Nonnull
    public Identity<_AuditLogStudentProfilePredictedGradeRecord, Long> getIdentity() {
        return (Identity<_AuditLogStudentProfilePredictedGradeRecord, Long>) super.getIdentity();
    }

    @Override
    @Nonnull
    public _AuditLogStudentProfilePredictedGradeTable as(String alias) {
        return new _AuditLogStudentProfilePredictedGradeTable(DSL.name(alias), this);
    }

    @Override
    @Nonnull
    public _AuditLogStudentProfilePredictedGradeTable as(Name alias) {
        return new _AuditLogStudentProfilePredictedGradeTable(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public _AuditLogStudentProfilePredictedGradeTable rename(String name) {
        return new _AuditLogStudentProfilePredictedGradeTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public _AuditLogStudentProfilePredictedGradeTable rename(Name name) {
        return new _AuditLogStudentProfilePredictedGradeTable(name, null);
    }

    // -------------------------------------------------------------------------
    // Row13 type methods
    // -------------------------------------------------------------------------

    @Override
    @Nonnull
    public Row13<Long, OffsetDateTime, String, String, String, UUID, UUID, UUID, String, OffsetDateTime, String, OffsetDateTime, String> fieldsRow() {
        return (Row13) super.fieldsRow();
    }
}
