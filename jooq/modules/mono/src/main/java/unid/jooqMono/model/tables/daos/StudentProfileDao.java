/*
 * This file is generated by jOOQ.
 */
package unid.jooqMono.model.tables.daos;


import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.UUID;

import javax.annotation.Nonnull;
import javax.annotation.Nullable;
import javax.annotation.processing.Generated;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;

import unid.jooqMono.model.enums.GenderEnum;
import unid.jooqMono.model.tables.StudentProfileTable;
import unid.jooqMono.model.tables.pojos.StudentProfilePojo;
import unid.jooqMono.model.tables.records.StudentProfileRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.15.12"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class StudentProfileDao extends DAOImpl<StudentProfileRecord, StudentProfilePojo, UUID> {

    /**
     * Create a new StudentProfileDao without any configuration
     */
    public StudentProfileDao() {
        super(StudentProfileTable.STUDENT_PROFILE, StudentProfilePojo.class);
    }

    /**
     * Create a new StudentProfileDao with an attached configuration
     */
    public StudentProfileDao(Configuration configuration) {
        super(StudentProfileTable.STUDENT_PROFILE, StudentProfilePojo.class, configuration);
    }

    @Override
    @Nonnull
    public UUID getId(StudentProfilePojo object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<StudentProfilePojo> fetchRangeOfId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(StudentProfileTable.STUDENT_PROFILE.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    @Nonnull
    public List<StudentProfilePojo> fetchById(UUID... values) {
        return fetch(StudentProfileTable.STUDENT_PROFILE.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    @Nullable
    public StudentProfilePojo fetchOneById(UUID value) {
        return fetchOne(StudentProfileTable.STUDENT_PROFILE.ID, value);
    }

    /**
     * Fetch records that have <code>user_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<StudentProfilePojo> fetchRangeOfUserId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(StudentProfileTable.STUDENT_PROFILE.USER_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>user_id IN (values)</code>
     */
    @Nonnull
    public List<StudentProfilePojo> fetchByUserId(UUID... values) {
        return fetch(StudentProfileTable.STUDENT_PROFILE.USER_ID, values);
    }

    /**
     * Fetch a unique record that has <code>user_id = value</code>
     */
    @Nullable
    public StudentProfilePojo fetchOneByUserId(UUID value) {
        return fetchOne(StudentProfileTable.STUDENT_PROFILE.USER_ID, value);
    }

    /**
     * Fetch records that have <code>date_of_birth BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<StudentProfilePojo> fetchRangeOfDateOfBirth(LocalDate lowerInclusive, LocalDate upperInclusive) {
        return fetchRange(StudentProfileTable.STUDENT_PROFILE.DATE_OF_BIRTH, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>date_of_birth IN (values)</code>
     */
    @Nonnull
    public List<StudentProfilePojo> fetchByDateOfBirth(LocalDate... values) {
        return fetch(StudentProfileTable.STUDENT_PROFILE.DATE_OF_BIRTH, values);
    }

    /**
     * Fetch records that have <code>gender BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<StudentProfilePojo> fetchRangeOfGender(GenderEnum lowerInclusive, GenderEnum upperInclusive) {
        return fetchRange(StudentProfileTable.STUDENT_PROFILE.GENDER, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>gender IN (values)</code>
     */
    @Nonnull
    public List<StudentProfilePojo> fetchByGender(GenderEnum... values) {
        return fetch(StudentProfileTable.STUDENT_PROFILE.GENDER, values);
    }

    /**
     * Fetch records that have <code>country_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<StudentProfilePojo> fetchRangeOfCountryId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(StudentProfileTable.STUDENT_PROFILE.COUNTRY_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>country_id IN (values)</code>
     */
    @Nonnull
    public List<StudentProfilePojo> fetchByCountryId(UUID... values) {
        return fetch(StudentProfileTable.STUDENT_PROFILE.COUNTRY_ID, values);
    }

    /**
     * Fetch records that have <code>profile_picture BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<StudentProfilePojo> fetchRangeOfProfilePicture(String lowerInclusive, String upperInclusive) {
        return fetchRange(StudentProfileTable.STUDENT_PROFILE.PROFILE_PICTURE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>profile_picture IN (values)</code>
     */
    @Nonnull
    public List<StudentProfilePojo> fetchByProfilePicture(String... values) {
        return fetch(StudentProfileTable.STUDENT_PROFILE.PROFILE_PICTURE, values);
    }

    /**
     * Fetch records that have <code>phone_country_code BETWEEN lowerInclusive
     * AND upperInclusive</code>
     */
    @Nonnull
    public List<StudentProfilePojo> fetchRangeOfPhoneCountryCode(String lowerInclusive, String upperInclusive) {
        return fetchRange(StudentProfileTable.STUDENT_PROFILE.PHONE_COUNTRY_CODE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>phone_country_code IN (values)</code>
     */
    @Nonnull
    public List<StudentProfilePojo> fetchByPhoneCountryCode(String... values) {
        return fetch(StudentProfileTable.STUDENT_PROFILE.PHONE_COUNTRY_CODE, values);
    }

    /**
     * Fetch records that have <code>phone BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<StudentProfilePojo> fetchRangeOfPhone(String lowerInclusive, String upperInclusive) {
        return fetchRange(StudentProfileTable.STUDENT_PROFILE.PHONE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>phone IN (values)</code>
     */
    @Nonnull
    public List<StudentProfilePojo> fetchByPhone(String... values) {
        return fetch(StudentProfileTable.STUDENT_PROFILE.PHONE, values);
    }

    /**
     * Fetch records that have <code>secondary_school_id BETWEEN lowerInclusive
     * AND upperInclusive</code>
     */
    @Nonnull
    public List<StudentProfilePojo> fetchRangeOfSecondarySchoolId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(StudentProfileTable.STUDENT_PROFILE.SECONDARY_SCHOOL_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>secondary_school_id IN (values)</code>
     */
    @Nonnull
    public List<StudentProfilePojo> fetchBySecondarySchoolId(UUID... values) {
        return fetch(StudentProfileTable.STUDENT_PROFILE.SECONDARY_SCHOOL_ID, values);
    }

    /**
     * Fetch records that have <code>secondary_school_education_level_id BETWEEN
     * lowerInclusive AND upperInclusive</code>
     */
    @Nonnull
    public List<StudentProfilePojo> fetchRangeOfSecondarySchoolEducationLevelId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(StudentProfileTable.STUDENT_PROFILE.SECONDARY_SCHOOL_EDUCATION_LEVEL_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>secondary_school_education_level_id IN
     * (values)</code>
     */
    @Nonnull
    public List<StudentProfilePojo> fetchBySecondarySchoolEducationLevelId(UUID... values) {
        return fetch(StudentProfileTable.STUDENT_PROFILE.SECONDARY_SCHOOL_EDUCATION_LEVEL_ID, values);
    }

    /**
     * Fetch records that have <code>secondary_school_curriculum_id BETWEEN
     * lowerInclusive AND upperInclusive</code>
     */
    @Nonnull
    public List<StudentProfilePojo> fetchRangeOfSecondarySchoolCurriculumId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(StudentProfileTable.STUDENT_PROFILE.SECONDARY_SCHOOL_CURRICULUM_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>secondary_school_curriculum_id IN
     * (values)</code>
     */
    @Nonnull
    public List<StudentProfilePojo> fetchBySecondarySchoolCurriculumId(UUID... values) {
        return fetch(StudentProfileTable.STUDENT_PROFILE.SECONDARY_SCHOOL_CURRICULUM_ID, values);
    }

    /**
     * Fetch records that have <code>preferred_university_1_id BETWEEN
     * lowerInclusive AND upperInclusive</code>
     */
    @Nonnull
    public List<StudentProfilePojo> fetchRangeOfPreferredUniversity_1Id(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(StudentProfileTable.STUDENT_PROFILE.PREFERRED_UNIVERSITY_1_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>preferred_university_1_id IN
     * (values)</code>
     */
    @Nonnull
    public List<StudentProfilePojo> fetchByPreferredUniversity_1Id(UUID... values) {
        return fetch(StudentProfileTable.STUDENT_PROFILE.PREFERRED_UNIVERSITY_1_ID, values);
    }

    /**
     * Fetch records that have <code>preferred_university_2_id BETWEEN
     * lowerInclusive AND upperInclusive</code>
     */
    @Nonnull
    public List<StudentProfilePojo> fetchRangeOfPreferredUniversity_2Id(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(StudentProfileTable.STUDENT_PROFILE.PREFERRED_UNIVERSITY_2_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>preferred_university_2_id IN
     * (values)</code>
     */
    @Nonnull
    public List<StudentProfilePojo> fetchByPreferredUniversity_2Id(UUID... values) {
        return fetch(StudentProfileTable.STUDENT_PROFILE.PREFERRED_UNIVERSITY_2_ID, values);
    }

    /**
     * Fetch records that have <code>preferred_university_3_id BETWEEN
     * lowerInclusive AND upperInclusive</code>
     */
    @Nonnull
    public List<StudentProfilePojo> fetchRangeOfPreferredUniversity_3Id(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(StudentProfileTable.STUDENT_PROFILE.PREFERRED_UNIVERSITY_3_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>preferred_university_3_id IN
     * (values)</code>
     */
    @Nonnull
    public List<StudentProfilePojo> fetchByPreferredUniversity_3Id(UUID... values) {
        return fetch(StudentProfileTable.STUDENT_PROFILE.PREFERRED_UNIVERSITY_3_ID, values);
    }

    /**
     * Fetch records that have <code>created_on BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<StudentProfilePojo> fetchRangeOfCreatedOn(OffsetDateTime lowerInclusive, OffsetDateTime upperInclusive) {
        return fetchRange(StudentProfileTable.STUDENT_PROFILE.CREATED_ON, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>created_on IN (values)</code>
     */
    @Nonnull
    public List<StudentProfilePojo> fetchByCreatedOn(OffsetDateTime... values) {
        return fetch(StudentProfileTable.STUDENT_PROFILE.CREATED_ON, values);
    }

    /**
     * Fetch records that have <code>created_by BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<StudentProfilePojo> fetchRangeOfCreatedBy(String lowerInclusive, String upperInclusive) {
        return fetchRange(StudentProfileTable.STUDENT_PROFILE.CREATED_BY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>created_by IN (values)</code>
     */
    @Nonnull
    public List<StudentProfilePojo> fetchByCreatedBy(String... values) {
        return fetch(StudentProfileTable.STUDENT_PROFILE.CREATED_BY, values);
    }

    /**
     * Fetch records that have <code>updated_on BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<StudentProfilePojo> fetchRangeOfUpdatedOn(OffsetDateTime lowerInclusive, OffsetDateTime upperInclusive) {
        return fetchRange(StudentProfileTable.STUDENT_PROFILE.UPDATED_ON, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>updated_on IN (values)</code>
     */
    @Nonnull
    public List<StudentProfilePojo> fetchByUpdatedOn(OffsetDateTime... values) {
        return fetch(StudentProfileTable.STUDENT_PROFILE.UPDATED_ON, values);
    }

    /**
     * Fetch records that have <code>updated_by BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<StudentProfilePojo> fetchRangeOfUpdatedBy(String lowerInclusive, String upperInclusive) {
        return fetchRange(StudentProfileTable.STUDENT_PROFILE.UPDATED_BY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>updated_by IN (values)</code>
     */
    @Nonnull
    public List<StudentProfilePojo> fetchByUpdatedBy(String... values) {
        return fetch(StudentProfileTable.STUDENT_PROFILE.UPDATED_BY, values);
    }

    /**
     * Fetch records that have <code>preferred_other_university_id BETWEEN
     * lowerInclusive AND upperInclusive</code>
     */
    @Nonnull
    public List<StudentProfilePojo> fetchRangeOfPreferredOtherUniversityId(UUID[] lowerInclusive, UUID[] upperInclusive) {
        return fetchRange(StudentProfileTable.STUDENT_PROFILE.PREFERRED_OTHER_UNIVERSITY_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>preferred_other_university_id IN
     * (values)</code>
     */
    @Nonnull
    public List<StudentProfilePojo> fetchByPreferredOtherUniversityId(UUID[]... values) {
        return fetch(StudentProfileTable.STUDENT_PROFILE.PREFERRED_OTHER_UNIVERSITY_ID, values);
    }

    /**
     * Fetch records that have <code>secondary_school_graduation_year BETWEEN
     * lowerInclusive AND upperInclusive</code>
     */
    @Nonnull
    public List<StudentProfilePojo> fetchRangeOfSecondarySchoolGraduationYear(String lowerInclusive, String upperInclusive) {
        return fetchRange(StudentProfileTable.STUDENT_PROFILE.SECONDARY_SCHOOL_GRADUATION_YEAR, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>secondary_school_graduation_year IN
     * (values)</code>
     */
    @Nonnull
    public List<StudentProfilePojo> fetchBySecondarySchoolGraduationYear(String... values) {
        return fetch(StudentProfileTable.STUDENT_PROFILE.SECONDARY_SCHOOL_GRADUATION_YEAR, values);
    }

    /**
     * Fetch records that have <code>timezone BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<StudentProfilePojo> fetchRangeOfTimezone(String lowerInclusive, String upperInclusive) {
        return fetchRange(StudentProfileTable.STUDENT_PROFILE.TIMEZONE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>timezone IN (values)</code>
     */
    @Nonnull
    public List<StudentProfilePojo> fetchByTimezone(String... values) {
        return fetch(StudentProfileTable.STUDENT_PROFILE.TIMEZONE, values);
    }
}
