/*
 * This file is generated by jOOQ.
 */
package unid.jooqMono.model.tables;


import java.time.LocalDateTime;
import java.util.UUID;

import javax.annotation.Nonnull;
import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import unid.jooqMono.model.Keys;
import unid.jooqMono.model.Public;
import unid.jooqMono.model.tables.records.EventScheduleTimeRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.15.12"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class EventScheduleTimeTable extends TableImpl<EventScheduleTimeRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.event_schedule_time</code>
     */
    public static final EventScheduleTimeTable EVENT_SCHEDULE_TIME = new EventScheduleTimeTable();

    /**
     * The class holding records for this type
     */
    @Override
    @Nonnull
    public Class<EventScheduleTimeRecord> getRecordType() {
        return EventScheduleTimeRecord.class;
    }

    /**
     * The column <code>public.event_schedule_time.id</code>.
     */
    public final TableField<EventScheduleTimeRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field("gen_random_uuid()", SQLDataType.UUID)), this, "");

    /**
     * The column <code>public.event_schedule_time.start_time</code>.
     */
    public final TableField<EventScheduleTimeRecord, LocalDateTime> START_TIME = createField(DSL.name("start_time"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.event_schedule_time.end_time</code>.
     */
    public final TableField<EventScheduleTimeRecord, LocalDateTime> END_TIME = createField(DSL.name("end_time"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.event_schedule_time.event_id</code>.
     */
    public final TableField<EventScheduleTimeRecord, UUID> EVENT_ID = createField(DSL.name("event_id"), SQLDataType.UUID, this, "");

    private EventScheduleTimeTable(Name alias, Table<EventScheduleTimeRecord> aliased) {
        this(alias, aliased, null);
    }

    private EventScheduleTimeTable(Name alias, Table<EventScheduleTimeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.event_schedule_time</code> table reference
     */
    public EventScheduleTimeTable(String alias) {
        this(DSL.name(alias), EVENT_SCHEDULE_TIME);
    }

    /**
     * Create an aliased <code>public.event_schedule_time</code> table reference
     */
    public EventScheduleTimeTable(Name alias) {
        this(alias, EVENT_SCHEDULE_TIME);
    }

    /**
     * Create a <code>public.event_schedule_time</code> table reference
     */
    public EventScheduleTimeTable() {
        this(DSL.name("event_schedule_time"), null);
    }

    public <O extends Record> EventScheduleTimeTable(Table<O> child, ForeignKey<O, EventScheduleTimeRecord> key) {
        super(child, key, EVENT_SCHEDULE_TIME);
    }

    @Override
    @Nonnull
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    @Nonnull
    public UniqueKey<EventScheduleTimeRecord> getPrimaryKey() {
        return Keys.EVENT_SCHEDULE_TIME_PKEY;
    }

    @Override
    @Nonnull
    public EventScheduleTimeTable as(String alias) {
        return new EventScheduleTimeTable(DSL.name(alias), this);
    }

    @Override
    @Nonnull
    public EventScheduleTimeTable as(Name alias) {
        return new EventScheduleTimeTable(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public EventScheduleTimeTable rename(String name) {
        return new EventScheduleTimeTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public EventScheduleTimeTable rename(Name name) {
        return new EventScheduleTimeTable(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    @Nonnull
    public Row4<UUID, LocalDateTime, LocalDateTime, UUID> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
