/*
 * This file is generated by jOOQ.
 */
package unid.jooqMono.model.tables.daos;


import java.time.OffsetDateTime;
import java.util.List;
import java.util.UUID;

import javax.annotation.Nonnull;
import javax.annotation.Nullable;
import javax.annotation.processing.Generated;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;

import unid.jooqMono.model.tables.I18nTable;
import unid.jooqMono.model.tables.pojos.I18nPojo;
import unid.jooqMono.model.tables.records.I18nRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.15.12"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class I18nDao extends DAOImpl<I18nRecord, I18nPojo, UUID> {

    /**
     * Create a new I18nDao without any configuration
     */
    public I18nDao() {
        super(I18nTable.I18N, I18nPojo.class);
    }

    /**
     * Create a new I18nDao with an attached configuration
     */
    public I18nDao(Configuration configuration) {
        super(I18nTable.I18N, I18nPojo.class, configuration);
    }

    @Override
    @Nonnull
    public UUID getId(I18nPojo object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<I18nPojo> fetchRangeOfId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(I18nTable.I18N.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    @Nonnull
    public List<I18nPojo> fetchById(UUID... values) {
        return fetch(I18nTable.I18N.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    @Nullable
    public I18nPojo fetchOneById(UUID value) {
        return fetchOne(I18nTable.I18N.ID, value);
    }

    /**
     * Fetch records that have <code>english BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<I18nPojo> fetchRangeOfEnglish(String lowerInclusive, String upperInclusive) {
        return fetchRange(I18nTable.I18N.ENGLISH, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>english IN (values)</code>
     */
    @Nonnull
    public List<I18nPojo> fetchByEnglish(String... values) {
        return fetch(I18nTable.I18N.ENGLISH, values);
    }

    /**
     * Fetch records that have <code>chinese_traditional BETWEEN lowerInclusive
     * AND upperInclusive</code>
     */
    @Nonnull
    public List<I18nPojo> fetchRangeOfChineseTraditional(String lowerInclusive, String upperInclusive) {
        return fetchRange(I18nTable.I18N.CHINESE_TRADITIONAL, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>chinese_traditional IN (values)</code>
     */
    @Nonnull
    public List<I18nPojo> fetchByChineseTraditional(String... values) {
        return fetch(I18nTable.I18N.CHINESE_TRADITIONAL, values);
    }

    /**
     * Fetch records that have <code>chinese_simplified BETWEEN lowerInclusive
     * AND upperInclusive</code>
     */
    @Nonnull
    public List<I18nPojo> fetchRangeOfChineseSimplified(String lowerInclusive, String upperInclusive) {
        return fetchRange(I18nTable.I18N.CHINESE_SIMPLIFIED, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>chinese_simplified IN (values)</code>
     */
    @Nonnull
    public List<I18nPojo> fetchByChineseSimplified(String... values) {
        return fetch(I18nTable.I18N.CHINESE_SIMPLIFIED, values);
    }

    /**
     * Fetch records that have <code>created_on BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<I18nPojo> fetchRangeOfCreatedOn(OffsetDateTime lowerInclusive, OffsetDateTime upperInclusive) {
        return fetchRange(I18nTable.I18N.CREATED_ON, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>created_on IN (values)</code>
     */
    @Nonnull
    public List<I18nPojo> fetchByCreatedOn(OffsetDateTime... values) {
        return fetch(I18nTable.I18N.CREATED_ON, values);
    }

    /**
     * Fetch records that have <code>created_by BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<I18nPojo> fetchRangeOfCreatedBy(String lowerInclusive, String upperInclusive) {
        return fetchRange(I18nTable.I18N.CREATED_BY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>created_by IN (values)</code>
     */
    @Nonnull
    public List<I18nPojo> fetchByCreatedBy(String... values) {
        return fetch(I18nTable.I18N.CREATED_BY, values);
    }

    /**
     * Fetch records that have <code>updated_on BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<I18nPojo> fetchRangeOfUpdatedOn(OffsetDateTime lowerInclusive, OffsetDateTime upperInclusive) {
        return fetchRange(I18nTable.I18N.UPDATED_ON, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>updated_on IN (values)</code>
     */
    @Nonnull
    public List<I18nPojo> fetchByUpdatedOn(OffsetDateTime... values) {
        return fetch(I18nTable.I18N.UPDATED_ON, values);
    }

    /**
     * Fetch records that have <code>updated_by BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<I18nPojo> fetchRangeOfUpdatedBy(String lowerInclusive, String upperInclusive) {
        return fetchRange(I18nTable.I18N.UPDATED_BY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>updated_by IN (values)</code>
     */
    @Nonnull
    public List<I18nPojo> fetchByUpdatedBy(String... values) {
        return fetch(I18nTable.I18N.UPDATED_BY, values);
    }
}
