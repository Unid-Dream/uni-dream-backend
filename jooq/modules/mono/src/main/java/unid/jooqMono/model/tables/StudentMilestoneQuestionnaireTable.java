/*
 * This file is generated by jOOQ.
 */
package unid.jooqMono.model.tables;


import java.util.UUID;

import javax.annotation.Nonnull;
import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import unid.jooqMono.model.Keys;
import unid.jooqMono.model.Public;
import unid.jooqMono.model.tables.records.StudentMilestoneQuestionnaireRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.15.12"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class StudentMilestoneQuestionnaireTable extends TableImpl<StudentMilestoneQuestionnaireRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>public.student_milestone_questionnaire</code>
     */
    public static final StudentMilestoneQuestionnaireTable STUDENT_MILESTONE_QUESTIONNAIRE = new StudentMilestoneQuestionnaireTable();

    /**
     * The class holding records for this type
     */
    @Override
    @Nonnull
    public Class<StudentMilestoneQuestionnaireRecord> getRecordType() {
        return StudentMilestoneQuestionnaireRecord.class;
    }

    /**
     * The column <code>public.student_milestone_questionnaire.id</code>.
     */
    public final TableField<StudentMilestoneQuestionnaireRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field("gen_random_uuid()", SQLDataType.UUID)), this, "");

    /**
     * The column
     * <code>public.student_milestone_questionnaire.question_i18n_id</code>.
     */
    public final TableField<StudentMilestoneQuestionnaireRecord, UUID> QUESTION_I18N_ID = createField(DSL.name("question_i18n_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.student_milestone_questionnaire.sort_id</code>.
     */
    public final TableField<StudentMilestoneQuestionnaireRecord, Integer> SORT_ID = createField(DSL.name("sort_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column
     * <code>public.student_milestone_questionnaire.single_choice</code>.
     */
    public final TableField<StudentMilestoneQuestionnaireRecord, Boolean> SINGLE_CHOICE = createField(DSL.name("single_choice"), SQLDataType.BOOLEAN, this, "");

    private StudentMilestoneQuestionnaireTable(Name alias, Table<StudentMilestoneQuestionnaireRecord> aliased) {
        this(alias, aliased, null);
    }

    private StudentMilestoneQuestionnaireTable(Name alias, Table<StudentMilestoneQuestionnaireRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.student_milestone_questionnaire</code>
     * table reference
     */
    public StudentMilestoneQuestionnaireTable(String alias) {
        this(DSL.name(alias), STUDENT_MILESTONE_QUESTIONNAIRE);
    }

    /**
     * Create an aliased <code>public.student_milestone_questionnaire</code>
     * table reference
     */
    public StudentMilestoneQuestionnaireTable(Name alias) {
        this(alias, STUDENT_MILESTONE_QUESTIONNAIRE);
    }

    /**
     * Create a <code>public.student_milestone_questionnaire</code> table
     * reference
     */
    public StudentMilestoneQuestionnaireTable() {
        this(DSL.name("student_milestone_questionnaire"), null);
    }

    public <O extends Record> StudentMilestoneQuestionnaireTable(Table<O> child, ForeignKey<O, StudentMilestoneQuestionnaireRecord> key) {
        super(child, key, STUDENT_MILESTONE_QUESTIONNAIRE);
    }

    @Override
    @Nonnull
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    @Nonnull
    public UniqueKey<StudentMilestoneQuestionnaireRecord> getPrimaryKey() {
        return Keys.STUDENT_MILESTONE_COPY1_PKEY;
    }

    @Override
    @Nonnull
    public StudentMilestoneQuestionnaireTable as(String alias) {
        return new StudentMilestoneQuestionnaireTable(DSL.name(alias), this);
    }

    @Override
    @Nonnull
    public StudentMilestoneQuestionnaireTable as(Name alias) {
        return new StudentMilestoneQuestionnaireTable(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public StudentMilestoneQuestionnaireTable rename(String name) {
        return new StudentMilestoneQuestionnaireTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public StudentMilestoneQuestionnaireTable rename(Name name) {
        return new StudentMilestoneQuestionnaireTable(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    @Nonnull
    public Row4<UUID, UUID, Integer, Boolean> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
