/*
 * This file is generated by jOOQ.
 */
package unid.jooqMono.model.tables;


import java.math.BigDecimal;
import java.util.UUID;

import javax.annotation.Nonnull;
import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import unid.jooqMono.model.Keys;
import unid.jooqMono.model.Public;
import unid.jooqMono.model.enums.DeletedTypeEnum;
import unid.jooqMono.model.tables.records.SchoolExtensionRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.15.12"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SchoolExtensionTable extends TableImpl<SchoolExtensionRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.school_extension</code>
     */
    public static final SchoolExtensionTable SCHOOL_EXTENSION = new SchoolExtensionTable();

    /**
     * The class holding records for this type
     */
    @Override
    @Nonnull
    public Class<SchoolExtensionRecord> getRecordType() {
        return SchoolExtensionRecord.class;
    }

    /**
     * The column <code>public.school_extension.id</code>.
     */
    public final TableField<SchoolExtensionRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field("gen_random_uuid()", SQLDataType.UUID)), this, "");

    /**
     * The column <code>public.school_extension.rate</code>.
     */
    public final TableField<SchoolExtensionRecord, BigDecimal> RATE = createField(DSL.name("rate"), SQLDataType.NUMERIC, this, "");

    /**
     * The column <code>public.school_extension.population</code>.
     */
    public final TableField<SchoolExtensionRecord, BigDecimal> POPULATION = createField(DSL.name("population"), SQLDataType.NUMERIC, this, "");

    /**
     * The column <code>public.school_extension.tuition</code>.
     */
    public final TableField<SchoolExtensionRecord, BigDecimal> TUITION = createField(DSL.name("tuition"), SQLDataType.NUMERIC, this, "");

    /**
     * The column <code>public.school_extension.factor</code>.
     */
    public final TableField<SchoolExtensionRecord, String> FACTOR = createField(DSL.name("factor"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.school_extension.deleted</code>.
     */
    public final TableField<SchoolExtensionRecord, DeletedTypeEnum> DELETED = createField(DSL.name("deleted"), SQLDataType.VARCHAR.defaultValue(DSL.field("'N'::deleted_type", SQLDataType.VARCHAR)).asEnumDataType(unid.jooqMono.model.enums.DeletedTypeEnum.class), this, "");

    /**
     * The column <code>public.school_extension.school_id</code>.
     */
    public final TableField<SchoolExtensionRecord, UUID> SCHOOL_ID = createField(DSL.name("school_id"), SQLDataType.UUID, this, "");

    private SchoolExtensionTable(Name alias, Table<SchoolExtensionRecord> aliased) {
        this(alias, aliased, null);
    }

    private SchoolExtensionTable(Name alias, Table<SchoolExtensionRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.school_extension</code> table reference
     */
    public SchoolExtensionTable(String alias) {
        this(DSL.name(alias), SCHOOL_EXTENSION);
    }

    /**
     * Create an aliased <code>public.school_extension</code> table reference
     */
    public SchoolExtensionTable(Name alias) {
        this(alias, SCHOOL_EXTENSION);
    }

    /**
     * Create a <code>public.school_extension</code> table reference
     */
    public SchoolExtensionTable() {
        this(DSL.name("school_extension"), null);
    }

    public <O extends Record> SchoolExtensionTable(Table<O> child, ForeignKey<O, SchoolExtensionRecord> key) {
        super(child, key, SCHOOL_EXTENSION);
    }

    @Override
    @Nonnull
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    @Nonnull
    public UniqueKey<SchoolExtensionRecord> getPrimaryKey() {
        return Keys.SCHOOL_EXTENSION_PKEY;
    }

    @Override
    @Nonnull
    public SchoolExtensionTable as(String alias) {
        return new SchoolExtensionTable(DSL.name(alias), this);
    }

    @Override
    @Nonnull
    public SchoolExtensionTable as(Name alias) {
        return new SchoolExtensionTable(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public SchoolExtensionTable rename(String name) {
        return new SchoolExtensionTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public SchoolExtensionTable rename(Name name) {
        return new SchoolExtensionTable(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    @Nonnull
    public Row7<UUID, BigDecimal, BigDecimal, BigDecimal, String, DeletedTypeEnum, UUID> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
