/*
 * This file is generated by jOOQ.
 */
package unid.jooqMono.model.tables.daos;


import java.util.List;
import java.util.UUID;

import javax.annotation.Nonnull;
import javax.annotation.Nullable;
import javax.annotation.processing.Generated;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;

import unid.jooqMono.model.tables.StudentMilestoneQuestionnaireTable;
import unid.jooqMono.model.tables.pojos.StudentMilestoneQuestionnairePojo;
import unid.jooqMono.model.tables.records.StudentMilestoneQuestionnaireRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.15.12"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class StudentMilestoneQuestionnaireDao extends DAOImpl<StudentMilestoneQuestionnaireRecord, StudentMilestoneQuestionnairePojo, UUID> {

    /**
     * Create a new StudentMilestoneQuestionnaireDao without any configuration
     */
    public StudentMilestoneQuestionnaireDao() {
        super(StudentMilestoneQuestionnaireTable.STUDENT_MILESTONE_QUESTIONNAIRE, StudentMilestoneQuestionnairePojo.class);
    }

    /**
     * Create a new StudentMilestoneQuestionnaireDao with an attached
     * configuration
     */
    public StudentMilestoneQuestionnaireDao(Configuration configuration) {
        super(StudentMilestoneQuestionnaireTable.STUDENT_MILESTONE_QUESTIONNAIRE, StudentMilestoneQuestionnairePojo.class, configuration);
    }

    @Override
    @Nonnull
    public UUID getId(StudentMilestoneQuestionnairePojo object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<StudentMilestoneQuestionnairePojo> fetchRangeOfId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(StudentMilestoneQuestionnaireTable.STUDENT_MILESTONE_QUESTIONNAIRE.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    @Nonnull
    public List<StudentMilestoneQuestionnairePojo> fetchById(UUID... values) {
        return fetch(StudentMilestoneQuestionnaireTable.STUDENT_MILESTONE_QUESTIONNAIRE.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    @Nullable
    public StudentMilestoneQuestionnairePojo fetchOneById(UUID value) {
        return fetchOne(StudentMilestoneQuestionnaireTable.STUDENT_MILESTONE_QUESTIONNAIRE.ID, value);
    }

    /**
     * Fetch records that have <code>question_i18n_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<StudentMilestoneQuestionnairePojo> fetchRangeOfQuestionI18nId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(StudentMilestoneQuestionnaireTable.STUDENT_MILESTONE_QUESTIONNAIRE.QUESTION_I18N_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>question_i18n_id IN (values)</code>
     */
    @Nonnull
    public List<StudentMilestoneQuestionnairePojo> fetchByQuestionI18nId(UUID... values) {
        return fetch(StudentMilestoneQuestionnaireTable.STUDENT_MILESTONE_QUESTIONNAIRE.QUESTION_I18N_ID, values);
    }

    /**
     * Fetch records that have <code>sort_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<StudentMilestoneQuestionnairePojo> fetchRangeOfSortId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(StudentMilestoneQuestionnaireTable.STUDENT_MILESTONE_QUESTIONNAIRE.SORT_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>sort_id IN (values)</code>
     */
    @Nonnull
    public List<StudentMilestoneQuestionnairePojo> fetchBySortId(Integer... values) {
        return fetch(StudentMilestoneQuestionnaireTable.STUDENT_MILESTONE_QUESTIONNAIRE.SORT_ID, values);
    }

    /**
     * Fetch records that have <code>single_choice BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<StudentMilestoneQuestionnairePojo> fetchRangeOfSingleChoice(Boolean lowerInclusive, Boolean upperInclusive) {
        return fetchRange(StudentMilestoneQuestionnaireTable.STUDENT_MILESTONE_QUESTIONNAIRE.SINGLE_CHOICE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>single_choice IN (values)</code>
     */
    @Nonnull
    public List<StudentMilestoneQuestionnairePojo> fetchBySingleChoice(Boolean... values) {
        return fetch(StudentMilestoneQuestionnaireTable.STUDENT_MILESTONE_QUESTIONNAIRE.SINGLE_CHOICE, values);
    }
}
