/*
 * This file is generated by jOOQ.
 */
package unid.jooqMono.model.tables;


import java.math.BigDecimal;
import java.time.LocalDate;
import java.time.LocalTime;
import java.time.OffsetDateTime;
import java.util.UUID;

import javax.annotation.Nonnull;
import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import unid.jooqMono.model.Public;
import unid.jooqMono.model.enums.EventStatusEnum;
import unid.jooqMono.model.enums.EventTypeEnum;
import unid.jooqMono.model.tables.records._AuditLogEventRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.15.12"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class _AuditLogEventTable extends TableImpl<_AuditLogEventRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public._audit_log_event</code>
     */
    public static final _AuditLogEventTable _AUDIT_LOG_EVENT = new _AuditLogEventTable();

    /**
     * The class holding records for this type
     */
    @Override
    @Nonnull
    public Class<_AuditLogEventRecord> getRecordType() {
        return _AuditLogEventRecord.class;
    }

    /**
     * The column <code>public._audit_log_event.audit_seq</code>.
     */
    public final TableField<_AuditLogEventRecord, Long> AUDIT_SEQ = createField(DSL.name("audit_seq"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public._audit_log_event.audit_createdon</code>.
     */
    public final TableField<_AuditLogEventRecord, OffsetDateTime> AUDIT_CREATEDON = createField(DSL.name("audit_createdon"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    /**
     * The column <code>public._audit_log_event.audit_createdby</code>.
     */
    public final TableField<_AuditLogEventRecord, String> AUDIT_CREATEDBY = createField(DSL.name("audit_createdby"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public._audit_log_event.audit_operation</code>.
     */
    public final TableField<_AuditLogEventRecord, String> AUDIT_OPERATION = createField(DSL.name("audit_operation"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public._audit_log_event.audit_type</code>.
     */
    public final TableField<_AuditLogEventRecord, String> AUDIT_TYPE = createField(DSL.name("audit_type"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public._audit_log_event.id</code>.
     */
    public final TableField<_AuditLogEventRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public._audit_log_event.title_i18n_id</code>.
     */
    public final TableField<_AuditLogEventRecord, UUID> TITLE_I18N_ID = createField(DSL.name("title_i18n_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public._audit_log_event.description_i18n_id</code>.
     */
    public final TableField<_AuditLogEventRecord, UUID> DESCRIPTION_I18N_ID = createField(DSL.name("description_i18n_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public._audit_log_event.event_type</code>.
     */
    public final TableField<_AuditLogEventRecord, EventTypeEnum> EVENT_TYPE = createField(DSL.name("event_type"), SQLDataType.VARCHAR.nullable(false).asEnumDataType(unid.jooqMono.model.enums.EventTypeEnum.class), this, "");

    /**
     * The column <code>public._audit_log_event.start_date</code>.
     */
    public final TableField<_AuditLogEventRecord, LocalDate> START_DATE = createField(DSL.name("start_date"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>public._audit_log_event.end_date</code>.
     */
    public final TableField<_AuditLogEventRecord, LocalDate> END_DATE = createField(DSL.name("end_date"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>public._audit_log_event.start_time</code>.
     */
    public final TableField<_AuditLogEventRecord, LocalTime> START_TIME = createField(DSL.name("start_time"), SQLDataType.LOCALTIME(6), this, "");

    /**
     * The column <code>public._audit_log_event.end_time</code>.
     */
    public final TableField<_AuditLogEventRecord, LocalTime> END_TIME = createField(DSL.name("end_time"), SQLDataType.LOCALTIME(6), this, "");

    /**
     * The column <code>public._audit_log_event.max_number_of_student</code>.
     */
    public final TableField<_AuditLogEventRecord, BigDecimal> MAX_NUMBER_OF_STUDENT = createField(DSL.name("max_number_of_student"), SQLDataType.NUMERIC, this, "");

    /**
     * The column <code>public._audit_log_event.fee</code>.
     */
    public final TableField<_AuditLogEventRecord, BigDecimal> FEE = createField(DSL.name("fee"), SQLDataType.NUMERIC, this, "");

    /**
     * The column <code>public._audit_log_event.poster_image</code>.
     */
    public final TableField<_AuditLogEventRecord, String> POSTER_IMAGE = createField(DSL.name("poster_image"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public._audit_log_event.price</code>.
     */
    public final TableField<_AuditLogEventRecord, BigDecimal> PRICE = createField(DSL.name("price"), SQLDataType.NUMERIC, this, "");

    /**
     * The column <code>public._audit_log_event.created_on</code>.
     */
    public final TableField<_AuditLogEventRecord, OffsetDateTime> CREATED_ON = createField(DSL.name("created_on"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    /**
     * The column <code>public._audit_log_event.created_by</code>.
     */
    public final TableField<_AuditLogEventRecord, String> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public._audit_log_event.updated_on</code>.
     */
    public final TableField<_AuditLogEventRecord, OffsetDateTime> UPDATED_ON = createField(DSL.name("updated_on"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    /**
     * The column <code>public._audit_log_event.updated_by</code>.
     */
    public final TableField<_AuditLogEventRecord, String> UPDATED_BY = createField(DSL.name("updated_by"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public._audit_log_event.educator_profile_id</code>.
     */
    public final TableField<_AuditLogEventRecord, UUID> EDUCATOR_PROFILE_ID = createField(DSL.name("educator_profile_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public._audit_log_event.agenda_i18n_id</code>.
     */
    public final TableField<_AuditLogEventRecord, UUID> AGENDA_I18N_ID = createField(DSL.name("agenda_i18n_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public._audit_log_event.event_status</code>.
     */
    public final TableField<_AuditLogEventRecord, EventStatusEnum> EVENT_STATUS = createField(DSL.name("event_status"), SQLDataType.VARCHAR.asEnumDataType(unid.jooqMono.model.enums.EventStatusEnum.class), this, "");

    /**
     * The column <code>public._audit_log_event.academic_major_id</code>.
     */
    public final TableField<_AuditLogEventRecord, UUID> ACADEMIC_MAJOR_ID = createField(DSL.name("academic_major_id"), SQLDataType.UUID, this, "");

    private _AuditLogEventTable(Name alias, Table<_AuditLogEventRecord> aliased) {
        this(alias, aliased, null);
    }

    private _AuditLogEventTable(Name alias, Table<_AuditLogEventRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public._audit_log_event</code> table reference
     */
    public _AuditLogEventTable(String alias) {
        this(DSL.name(alias), _AUDIT_LOG_EVENT);
    }

    /**
     * Create an aliased <code>public._audit_log_event</code> table reference
     */
    public _AuditLogEventTable(Name alias) {
        this(alias, _AUDIT_LOG_EVENT);
    }

    /**
     * Create a <code>public._audit_log_event</code> table reference
     */
    public _AuditLogEventTable() {
        this(DSL.name("_audit_log_event"), null);
    }

    public <O extends Record> _AuditLogEventTable(Table<O> child, ForeignKey<O, _AuditLogEventRecord> key) {
        super(child, key, _AUDIT_LOG_EVENT);
    }

    @Override
    @Nonnull
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    @Nonnull
    public Identity<_AuditLogEventRecord, Long> getIdentity() {
        return (Identity<_AuditLogEventRecord, Long>) super.getIdentity();
    }

    @Override
    @Nonnull
    public _AuditLogEventTable as(String alias) {
        return new _AuditLogEventTable(DSL.name(alias), this);
    }

    @Override
    @Nonnull
    public _AuditLogEventTable as(Name alias) {
        return new _AuditLogEventTable(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public _AuditLogEventTable rename(String name) {
        return new _AuditLogEventTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public _AuditLogEventTable rename(Name name) {
        return new _AuditLogEventTable(name, null);
    }
}
