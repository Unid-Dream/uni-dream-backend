/*
 * This file is generated by jOOQ.
 */
package unid.jooqMono.model.tables.daos;


import java.util.List;
import java.util.UUID;

import javax.annotation.Nonnull;
import javax.annotation.Nullable;
import javax.annotation.processing.Generated;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;

import unid.jooqMono.model.tables.PassionMajorTable;
import unid.jooqMono.model.tables.pojos.PassionMajorPojo;
import unid.jooqMono.model.tables.records.PassionMajorRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.15.12"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PassionMajorDao extends DAOImpl<PassionMajorRecord, PassionMajorPojo, UUID> {

    /**
     * Create a new PassionMajorDao without any configuration
     */
    public PassionMajorDao() {
        super(PassionMajorTable.PASSION_MAJOR, PassionMajorPojo.class);
    }

    /**
     * Create a new PassionMajorDao with an attached configuration
     */
    public PassionMajorDao(Configuration configuration) {
        super(PassionMajorTable.PASSION_MAJOR, PassionMajorPojo.class, configuration);
    }

    @Override
    @Nonnull
    public UUID getId(PassionMajorPojo object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<PassionMajorPojo> fetchRangeOfId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(PassionMajorTable.PASSION_MAJOR.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    @Nonnull
    public List<PassionMajorPojo> fetchById(UUID... values) {
        return fetch(PassionMajorTable.PASSION_MAJOR.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    @Nullable
    public PassionMajorPojo fetchOneById(UUID value) {
        return fetchOne(PassionMajorTable.PASSION_MAJOR.ID, value);
    }

    /**
     * Fetch records that have <code>name_i18n_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<PassionMajorPojo> fetchRangeOfNameI18nId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(PassionMajorTable.PASSION_MAJOR.NAME_I18N_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>name_i18n_id IN (values)</code>
     */
    @Nonnull
    public List<PassionMajorPojo> fetchByNameI18nId(UUID... values) {
        return fetch(PassionMajorTable.PASSION_MAJOR.NAME_I18N_ID, values);
    }

    /**
     * Fetch records that have <code>desc_i18n_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<PassionMajorPojo> fetchRangeOfDescI18nId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(PassionMajorTable.PASSION_MAJOR.DESC_I18N_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>desc_i18n_id IN (values)</code>
     */
    @Nonnull
    public List<PassionMajorPojo> fetchByDescI18nId(UUID... values) {
        return fetch(PassionMajorTable.PASSION_MAJOR.DESC_I18N_ID, values);
    }

    /**
     * Fetch records that have <code>icon_path BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<PassionMajorPojo> fetchRangeOfIconPath(String lowerInclusive, String upperInclusive) {
        return fetchRange(PassionMajorTable.PASSION_MAJOR.ICON_PATH, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>icon_path IN (values)</code>
     */
    @Nonnull
    public List<PassionMajorPojo> fetchByIconPath(String... values) {
        return fetch(PassionMajorTable.PASSION_MAJOR.ICON_PATH, values);
    }
}
