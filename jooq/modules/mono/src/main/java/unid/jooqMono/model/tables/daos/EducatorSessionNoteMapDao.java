/*
 * This file is generated by jOOQ.
 */
package unid.jooqMono.model.tables.daos;


import java.time.OffsetDateTime;
import java.util.List;
import java.util.UUID;

import javax.annotation.Nonnull;
import javax.annotation.Nullable;
import javax.annotation.processing.Generated;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;

import unid.jooqMono.model.tables.EducatorSessionNoteMapTable;
import unid.jooqMono.model.tables.pojos.EducatorSessionNoteMapPojo;
import unid.jooqMono.model.tables.records.EducatorSessionNoteMapRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.15.12"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class EducatorSessionNoteMapDao extends DAOImpl<EducatorSessionNoteMapRecord, EducatorSessionNoteMapPojo, UUID> {

    /**
     * Create a new EducatorSessionNoteMapDao without any configuration
     */
    public EducatorSessionNoteMapDao() {
        super(EducatorSessionNoteMapTable.EDUCATOR_SESSION_NOTE_MAP, EducatorSessionNoteMapPojo.class);
    }

    /**
     * Create a new EducatorSessionNoteMapDao with an attached configuration
     */
    public EducatorSessionNoteMapDao(Configuration configuration) {
        super(EducatorSessionNoteMapTable.EDUCATOR_SESSION_NOTE_MAP, EducatorSessionNoteMapPojo.class, configuration);
    }

    @Override
    @Nonnull
    public UUID getId(EducatorSessionNoteMapPojo object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<EducatorSessionNoteMapPojo> fetchRangeOfId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(EducatorSessionNoteMapTable.EDUCATOR_SESSION_NOTE_MAP.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    @Nonnull
    public List<EducatorSessionNoteMapPojo> fetchById(UUID... values) {
        return fetch(EducatorSessionNoteMapTable.EDUCATOR_SESSION_NOTE_MAP.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    @Nullable
    public EducatorSessionNoteMapPojo fetchOneById(UUID value) {
        return fetchOne(EducatorSessionNoteMapTable.EDUCATOR_SESSION_NOTE_MAP.ID, value);
    }

    /**
     * Fetch records that have <code>educator_calendar_id BETWEEN lowerInclusive
     * AND upperInclusive</code>
     */
    @Nonnull
    public List<EducatorSessionNoteMapPojo> fetchRangeOfEducatorCalendarId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(EducatorSessionNoteMapTable.EDUCATOR_SESSION_NOTE_MAP.EDUCATOR_CALENDAR_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>educator_calendar_id IN (values)</code>
     */
    @Nonnull
    public List<EducatorSessionNoteMapPojo> fetchByEducatorCalendarId(UUID... values) {
        return fetch(EducatorSessionNoteMapTable.EDUCATOR_SESSION_NOTE_MAP.EDUCATOR_CALENDAR_ID, values);
    }

    /**
     * Fetch records that have <code>educator_session_note_item_id BETWEEN
     * lowerInclusive AND upperInclusive</code>
     */
    @Nonnull
    public List<EducatorSessionNoteMapPojo> fetchRangeOfEducatorSessionNoteItemId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(EducatorSessionNoteMapTable.EDUCATOR_SESSION_NOTE_MAP.EDUCATOR_SESSION_NOTE_ITEM_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>educator_session_note_item_id IN
     * (values)</code>
     */
    @Nonnull
    public List<EducatorSessionNoteMapPojo> fetchByEducatorSessionNoteItemId(UUID... values) {
        return fetch(EducatorSessionNoteMapTable.EDUCATOR_SESSION_NOTE_MAP.EDUCATOR_SESSION_NOTE_ITEM_ID, values);
    }

    /**
     * Fetch records that have <code>note_item_input BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<EducatorSessionNoteMapPojo> fetchRangeOfNoteItemInput(String lowerInclusive, String upperInclusive) {
        return fetchRange(EducatorSessionNoteMapTable.EDUCATOR_SESSION_NOTE_MAP.NOTE_ITEM_INPUT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>note_item_input IN (values)</code>
     */
    @Nonnull
    public List<EducatorSessionNoteMapPojo> fetchByNoteItemInput(String... values) {
        return fetch(EducatorSessionNoteMapTable.EDUCATOR_SESSION_NOTE_MAP.NOTE_ITEM_INPUT, values);
    }

    /**
     * Fetch records that have <code>created_on BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<EducatorSessionNoteMapPojo> fetchRangeOfCreatedOn(OffsetDateTime lowerInclusive, OffsetDateTime upperInclusive) {
        return fetchRange(EducatorSessionNoteMapTable.EDUCATOR_SESSION_NOTE_MAP.CREATED_ON, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>created_on IN (values)</code>
     */
    @Nonnull
    public List<EducatorSessionNoteMapPojo> fetchByCreatedOn(OffsetDateTime... values) {
        return fetch(EducatorSessionNoteMapTable.EDUCATOR_SESSION_NOTE_MAP.CREATED_ON, values);
    }

    /**
     * Fetch records that have <code>created_by BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<EducatorSessionNoteMapPojo> fetchRangeOfCreatedBy(String lowerInclusive, String upperInclusive) {
        return fetchRange(EducatorSessionNoteMapTable.EDUCATOR_SESSION_NOTE_MAP.CREATED_BY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>created_by IN (values)</code>
     */
    @Nonnull
    public List<EducatorSessionNoteMapPojo> fetchByCreatedBy(String... values) {
        return fetch(EducatorSessionNoteMapTable.EDUCATOR_SESSION_NOTE_MAP.CREATED_BY, values);
    }

    /**
     * Fetch records that have <code>updated_on BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<EducatorSessionNoteMapPojo> fetchRangeOfUpdatedOn(OffsetDateTime lowerInclusive, OffsetDateTime upperInclusive) {
        return fetchRange(EducatorSessionNoteMapTable.EDUCATOR_SESSION_NOTE_MAP.UPDATED_ON, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>updated_on IN (values)</code>
     */
    @Nonnull
    public List<EducatorSessionNoteMapPojo> fetchByUpdatedOn(OffsetDateTime... values) {
        return fetch(EducatorSessionNoteMapTable.EDUCATOR_SESSION_NOTE_MAP.UPDATED_ON, values);
    }

    /**
     * Fetch records that have <code>updated_by BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<EducatorSessionNoteMapPojo> fetchRangeOfUpdatedBy(String lowerInclusive, String upperInclusive) {
        return fetchRange(EducatorSessionNoteMapTable.EDUCATOR_SESSION_NOTE_MAP.UPDATED_BY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>updated_by IN (values)</code>
     */
    @Nonnull
    public List<EducatorSessionNoteMapPojo> fetchByUpdatedBy(String... values) {
        return fetch(EducatorSessionNoteMapTable.EDUCATOR_SESSION_NOTE_MAP.UPDATED_BY, values);
    }
}
