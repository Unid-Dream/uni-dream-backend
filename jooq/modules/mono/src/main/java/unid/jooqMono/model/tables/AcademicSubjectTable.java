/*
 * This file is generated by jOOQ.
 */
package unid.jooqMono.model.tables;


import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import javax.annotation.Nonnull;
import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row10;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import unid.jooqMono.model.Keys;
import unid.jooqMono.model.Public;
import unid.jooqMono.model.tables.records.AcademicSubjectRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.15.12"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AcademicSubjectTable extends TableImpl<AcademicSubjectRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.academic_subject</code>
     */
    public static final AcademicSubjectTable ACADEMIC_SUBJECT = new AcademicSubjectTable();

    /**
     * The class holding records for this type
     */
    @Override
    @Nonnull
    public Class<AcademicSubjectRecord> getRecordType() {
        return AcademicSubjectRecord.class;
    }

    /**
     * The column <code>public.academic_subject.id</code>.
     */
    public final TableField<AcademicSubjectRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field("gen_random_uuid()", SQLDataType.UUID)), this, "");

    /**
     * The column <code>public.academic_subject.title_i18n_id</code>.
     */
    public final TableField<AcademicSubjectRecord, UUID> TITLE_I18N_ID = createField(DSL.name("title_i18n_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.academic_subject.description_i18n_id</code>.
     */
    public final TableField<AcademicSubjectRecord, UUID> DESCRIPTION_I18N_ID = createField(DSL.name("description_i18n_id"), SQLDataType.UUID, this, "");

    /**
     * The column
     * <code>public.academic_subject.description_master_degree_i18n_id</code>.
     */
    public final TableField<AcademicSubjectRecord, UUID> DESCRIPTION_MASTER_DEGREE_I18N_ID = createField(DSL.name("description_master_degree_i18n_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.academic_subject.description_phd_i18n_id</code>.
     */
    public final TableField<AcademicSubjectRecord, UUID> DESCRIPTION_PHD_I18N_ID = createField(DSL.name("description_phd_i18n_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.academic_subject.tag_id</code>.
     */
    public final TableField<AcademicSubjectRecord, UUID> TAG_ID = createField(DSL.name("tag_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.academic_subject.created_on</code>.
     */
    public final TableField<AcademicSubjectRecord, OffsetDateTime> CREATED_ON = createField(DSL.name("created_on"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    /**
     * The column <code>public.academic_subject.created_by</code>.
     */
    public final TableField<AcademicSubjectRecord, String> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.academic_subject.updated_on</code>.
     */
    public final TableField<AcademicSubjectRecord, OffsetDateTime> UPDATED_ON = createField(DSL.name("updated_on"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    /**
     * The column <code>public.academic_subject.updated_by</code>.
     */
    public final TableField<AcademicSubjectRecord, String> UPDATED_BY = createField(DSL.name("updated_by"), SQLDataType.CLOB, this, "");

    private AcademicSubjectTable(Name alias, Table<AcademicSubjectRecord> aliased) {
        this(alias, aliased, null);
    }

    private AcademicSubjectTable(Name alias, Table<AcademicSubjectRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.academic_subject</code> table reference
     */
    public AcademicSubjectTable(String alias) {
        this(DSL.name(alias), ACADEMIC_SUBJECT);
    }

    /**
     * Create an aliased <code>public.academic_subject</code> table reference
     */
    public AcademicSubjectTable(Name alias) {
        this(alias, ACADEMIC_SUBJECT);
    }

    /**
     * Create a <code>public.academic_subject</code> table reference
     */
    public AcademicSubjectTable() {
        this(DSL.name("academic_subject"), null);
    }

    public <O extends Record> AcademicSubjectTable(Table<O> child, ForeignKey<O, AcademicSubjectRecord> key) {
        super(child, key, ACADEMIC_SUBJECT);
    }

    @Override
    @Nonnull
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    @Nonnull
    public UniqueKey<AcademicSubjectRecord> getPrimaryKey() {
        return Keys.ACADEMIC_SUBJECT_PKEY;
    }

    @Override
    @Nonnull
    public List<UniqueKey<AcademicSubjectRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.ACADEMIC_SUBJECT_TITLE_I18N_ID_KEY, Keys.ACADEMIC_SUBJECT_DESCRIPTION_I18N_ID_KEY, Keys.ACADEMIC_SUBJECT_DESCRIPTION_MASTER_DEGREE_I18N_ID_KEY, Keys.ACADEMIC_SUBJECT_DESCRIPTION_PHD_I18N_ID_KEY);
    }

    @Override
    @Nonnull
    public List<ForeignKey<AcademicSubjectRecord, ?>> getReferences() {
        return Arrays.asList(Keys.ACADEMIC_SUBJECT__FK_ACAD_SUB_TITL, Keys.ACADEMIC_SUBJECT__FK_ACAD_SUB_DESC, Keys.ACADEMIC_SUBJECT__FK_ACAD_SUB_DESC_MAST, Keys.ACADEMIC_SUBJECT__FK_ACAD_SUB_DESC_PHD, Keys.ACADEMIC_SUBJECT__FK_ACAD_SUB_TAG);
    }

    private transient I18nTable _fkAcadSubTitl;
    private transient I18nTable _fkAcadSubDesc;
    private transient I18nTable _fkAcadSubDescMast;
    private transient I18nTable _fkAcadSubDescPhd;
    private transient TagTable _tag;

    public I18nTable fkAcadSubTitl() {
        if (_fkAcadSubTitl == null)
            _fkAcadSubTitl = new I18nTable(this, Keys.ACADEMIC_SUBJECT__FK_ACAD_SUB_TITL);

        return _fkAcadSubTitl;
    }

    public I18nTable fkAcadSubDesc() {
        if (_fkAcadSubDesc == null)
            _fkAcadSubDesc = new I18nTable(this, Keys.ACADEMIC_SUBJECT__FK_ACAD_SUB_DESC);

        return _fkAcadSubDesc;
    }

    public I18nTable fkAcadSubDescMast() {
        if (_fkAcadSubDescMast == null)
            _fkAcadSubDescMast = new I18nTable(this, Keys.ACADEMIC_SUBJECT__FK_ACAD_SUB_DESC_MAST);

        return _fkAcadSubDescMast;
    }

    public I18nTable fkAcadSubDescPhd() {
        if (_fkAcadSubDescPhd == null)
            _fkAcadSubDescPhd = new I18nTable(this, Keys.ACADEMIC_SUBJECT__FK_ACAD_SUB_DESC_PHD);

        return _fkAcadSubDescPhd;
    }

    public TagTable tag() {
        if (_tag == null)
            _tag = new TagTable(this, Keys.ACADEMIC_SUBJECT__FK_ACAD_SUB_TAG);

        return _tag;
    }

    @Override
    @Nonnull
    public AcademicSubjectTable as(String alias) {
        return new AcademicSubjectTable(DSL.name(alias), this);
    }

    @Override
    @Nonnull
    public AcademicSubjectTable as(Name alias) {
        return new AcademicSubjectTable(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public AcademicSubjectTable rename(String name) {
        return new AcademicSubjectTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public AcademicSubjectTable rename(Name name) {
        return new AcademicSubjectTable(name, null);
    }

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------

    @Override
    @Nonnull
    public Row10<UUID, UUID, UUID, UUID, UUID, UUID, OffsetDateTime, String, OffsetDateTime, String> fieldsRow() {
        return (Row10) super.fieldsRow();
    }
}
