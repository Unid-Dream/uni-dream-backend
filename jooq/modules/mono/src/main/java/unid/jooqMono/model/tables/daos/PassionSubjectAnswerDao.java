/*
 * This file is generated by jOOQ.
 */
package unid.jooqMono.model.tables.daos;


import java.util.List;
import java.util.UUID;

import javax.annotation.Nonnull;
import javax.annotation.Nullable;
import javax.annotation.processing.Generated;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;

import unid.jooqMono.model.tables.PassionSubjectAnswerTable;
import unid.jooqMono.model.tables.pojos.PassionSubjectAnswerPojo;
import unid.jooqMono.model.tables.records.PassionSubjectAnswerRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.15.12"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PassionSubjectAnswerDao extends DAOImpl<PassionSubjectAnswerRecord, PassionSubjectAnswerPojo, UUID> {

    /**
     * Create a new PassionSubjectAnswerDao without any configuration
     */
    public PassionSubjectAnswerDao() {
        super(PassionSubjectAnswerTable.PASSION_SUBJECT_ANSWER, PassionSubjectAnswerPojo.class);
    }

    /**
     * Create a new PassionSubjectAnswerDao with an attached configuration
     */
    public PassionSubjectAnswerDao(Configuration configuration) {
        super(PassionSubjectAnswerTable.PASSION_SUBJECT_ANSWER, PassionSubjectAnswerPojo.class, configuration);
    }

    @Override
    @Nonnull
    public UUID getId(PassionSubjectAnswerPojo object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<PassionSubjectAnswerPojo> fetchRangeOfId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(PassionSubjectAnswerTable.PASSION_SUBJECT_ANSWER.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    @Nonnull
    public List<PassionSubjectAnswerPojo> fetchById(UUID... values) {
        return fetch(PassionSubjectAnswerTable.PASSION_SUBJECT_ANSWER.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    @Nullable
    public PassionSubjectAnswerPojo fetchOneById(UUID value) {
        return fetchOne(PassionSubjectAnswerTable.PASSION_SUBJECT_ANSWER.ID, value);
    }

    /**
     * Fetch records that have <code>answer_i18n_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<PassionSubjectAnswerPojo> fetchRangeOfAnswerI18nId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(PassionSubjectAnswerTable.PASSION_SUBJECT_ANSWER.ANSWER_I18N_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>answer_i18n_id IN (values)</code>
     */
    @Nonnull
    public List<PassionSubjectAnswerPojo> fetchByAnswerI18nId(UUID... values) {
        return fetch(PassionSubjectAnswerTable.PASSION_SUBJECT_ANSWER.ANSWER_I18N_ID, values);
    }

    /**
     * Fetch records that have <code>subject_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<PassionSubjectAnswerPojo> fetchRangeOfSubjectId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(PassionSubjectAnswerTable.PASSION_SUBJECT_ANSWER.SUBJECT_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>subject_id IN (values)</code>
     */
    @Nonnull
    public List<PassionSubjectAnswerPojo> fetchBySubjectId(UUID... values) {
        return fetch(PassionSubjectAnswerTable.PASSION_SUBJECT_ANSWER.SUBJECT_ID, values);
    }
}
