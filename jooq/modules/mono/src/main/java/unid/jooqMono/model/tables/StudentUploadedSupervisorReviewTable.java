/*
 * This file is generated by jOOQ.
 */
package unid.jooqMono.model.tables;


import java.time.OffsetDateTime;
import java.util.UUID;

import javax.annotation.Nonnull;
import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row10;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import unid.jooqMono.model.Keys;
import unid.jooqMono.model.Public;
import unid.jooqMono.model.tables.records.StudentUploadedSupervisorReviewRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.15.12"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class StudentUploadedSupervisorReviewTable extends TableImpl<StudentUploadedSupervisorReviewRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>public.student_uploaded_supervisor_review</code>
     */
    public static final StudentUploadedSupervisorReviewTable STUDENT_UPLOADED_SUPERVISOR_REVIEW = new StudentUploadedSupervisorReviewTable();

    /**
     * The class holding records for this type
     */
    @Override
    @Nonnull
    public Class<StudentUploadedSupervisorReviewRecord> getRecordType() {
        return StudentUploadedSupervisorReviewRecord.class;
    }

    /**
     * The column <code>public.student_uploaded_supervisor_review.id</code>.
     */
    public final TableField<StudentUploadedSupervisorReviewRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field("gen_random_uuid()", SQLDataType.UUID)), this, "");

    /**
     * The column
     * <code>public.student_uploaded_supervisor_review.supervisor_score</code>.
     */
    public final TableField<StudentUploadedSupervisorReviewRecord, Integer> SUPERVISOR_SCORE = createField(DSL.name("supervisor_score"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column
     * <code>public.student_uploaded_supervisor_review.supervisor_commented_strength</code>.
     */
    public final TableField<StudentUploadedSupervisorReviewRecord, String> SUPERVISOR_COMMENTED_STRENGTH = createField(DSL.name("supervisor_commented_strength"), SQLDataType.CLOB, this, "");

    /**
     * The column
     * <code>public.student_uploaded_supervisor_review.supervisor_commented_weakness</code>.
     */
    public final TableField<StudentUploadedSupervisorReviewRecord, String> SUPERVISOR_COMMENTED_WEAKNESS = createField(DSL.name("supervisor_commented_weakness"), SQLDataType.CLOB, this, "");

    /**
     * The column
     * <code>public.student_uploaded_supervisor_review.supervisor_commented_improvement</code>.
     */
    public final TableField<StudentUploadedSupervisorReviewRecord, String> SUPERVISOR_COMMENTED_IMPROVEMENT = createField(DSL.name("supervisor_commented_improvement"), SQLDataType.CLOB, this, "");

    /**
     * The column
     * <code>public.student_uploaded_supervisor_review.created_on</code>.
     */
    public final TableField<StudentUploadedSupervisorReviewRecord, OffsetDateTime> CREATED_ON = createField(DSL.name("created_on"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    /**
     * The column
     * <code>public.student_uploaded_supervisor_review.created_by</code>.
     */
    public final TableField<StudentUploadedSupervisorReviewRecord, String> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.CLOB, this, "");

    /**
     * The column
     * <code>public.student_uploaded_supervisor_review.updated_on</code>.
     */
    public final TableField<StudentUploadedSupervisorReviewRecord, OffsetDateTime> UPDATED_ON = createField(DSL.name("updated_on"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    /**
     * The column
     * <code>public.student_uploaded_supervisor_review.updated_by</code>.
     */
    public final TableField<StudentUploadedSupervisorReviewRecord, String> UPDATED_BY = createField(DSL.name("updated_by"), SQLDataType.CLOB, this, "");

    /**
     * The column
     * <code>public.student_uploaded_supervisor_review.supervisor_commented_wrap_up</code>.
     */
    public final TableField<StudentUploadedSupervisorReviewRecord, String> SUPERVISOR_COMMENTED_WRAP_UP = createField(DSL.name("supervisor_commented_wrap_up"), SQLDataType.CLOB, this, "");

    private StudentUploadedSupervisorReviewTable(Name alias, Table<StudentUploadedSupervisorReviewRecord> aliased) {
        this(alias, aliased, null);
    }

    private StudentUploadedSupervisorReviewTable(Name alias, Table<StudentUploadedSupervisorReviewRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.student_uploaded_supervisor_review</code>
     * table reference
     */
    public StudentUploadedSupervisorReviewTable(String alias) {
        this(DSL.name(alias), STUDENT_UPLOADED_SUPERVISOR_REVIEW);
    }

    /**
     * Create an aliased <code>public.student_uploaded_supervisor_review</code>
     * table reference
     */
    public StudentUploadedSupervisorReviewTable(Name alias) {
        this(alias, STUDENT_UPLOADED_SUPERVISOR_REVIEW);
    }

    /**
     * Create a <code>public.student_uploaded_supervisor_review</code> table
     * reference
     */
    public StudentUploadedSupervisorReviewTable() {
        this(DSL.name("student_uploaded_supervisor_review"), null);
    }

    public <O extends Record> StudentUploadedSupervisorReviewTable(Table<O> child, ForeignKey<O, StudentUploadedSupervisorReviewRecord> key) {
        super(child, key, STUDENT_UPLOADED_SUPERVISOR_REVIEW);
    }

    @Override
    @Nonnull
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    @Nonnull
    public UniqueKey<StudentUploadedSupervisorReviewRecord> getPrimaryKey() {
        return Keys.STUDENT_UPLOADED_SUPERVISOR_REVIEW_PKEY;
    }

    @Override
    @Nonnull
    public StudentUploadedSupervisorReviewTable as(String alias) {
        return new StudentUploadedSupervisorReviewTable(DSL.name(alias), this);
    }

    @Override
    @Nonnull
    public StudentUploadedSupervisorReviewTable as(Name alias) {
        return new StudentUploadedSupervisorReviewTable(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public StudentUploadedSupervisorReviewTable rename(String name) {
        return new StudentUploadedSupervisorReviewTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public StudentUploadedSupervisorReviewTable rename(Name name) {
        return new StudentUploadedSupervisorReviewTable(name, null);
    }

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------

    @Override
    @Nonnull
    public Row10<UUID, Integer, String, String, String, OffsetDateTime, String, OffsetDateTime, String, String> fieldsRow() {
        return (Row10) super.fieldsRow();
    }
}
