/*
 * This file is generated by jOOQ.
 */
package unid.jooqMono.model.tables.daos;


import java.time.OffsetDateTime;
import java.util.List;
import java.util.UUID;

import javax.annotation.Nonnull;
import javax.annotation.Nullable;
import javax.annotation.processing.Generated;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;

import unid.jooqMono.model.tables.StudentQuestionnaireSectionTable;
import unid.jooqMono.model.tables.pojos.StudentQuestionnaireSectionPojo;
import unid.jooqMono.model.tables.records.StudentQuestionnaireSectionRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.15.12"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class StudentQuestionnaireSectionDao extends DAOImpl<StudentQuestionnaireSectionRecord, StudentQuestionnaireSectionPojo, UUID> {

    /**
     * Create a new StudentQuestionnaireSectionDao without any configuration
     */
    public StudentQuestionnaireSectionDao() {
        super(StudentQuestionnaireSectionTable.STUDENT_QUESTIONNAIRE_SECTION, StudentQuestionnaireSectionPojo.class);
    }

    /**
     * Create a new StudentQuestionnaireSectionDao with an attached
     * configuration
     */
    public StudentQuestionnaireSectionDao(Configuration configuration) {
        super(StudentQuestionnaireSectionTable.STUDENT_QUESTIONNAIRE_SECTION, StudentQuestionnaireSectionPojo.class, configuration);
    }

    @Override
    @Nonnull
    public UUID getId(StudentQuestionnaireSectionPojo object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<StudentQuestionnaireSectionPojo> fetchRangeOfId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(StudentQuestionnaireSectionTable.STUDENT_QUESTIONNAIRE_SECTION.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    @Nonnull
    public List<StudentQuestionnaireSectionPojo> fetchById(UUID... values) {
        return fetch(StudentQuestionnaireSectionTable.STUDENT_QUESTIONNAIRE_SECTION.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    @Nullable
    public StudentQuestionnaireSectionPojo fetchOneById(UUID value) {
        return fetchOne(StudentQuestionnaireSectionTable.STUDENT_QUESTIONNAIRE_SECTION.ID, value);
    }

    /**
     * Fetch records that have <code>student_questionnaire_id BETWEEN
     * lowerInclusive AND upperInclusive</code>
     */
    @Nonnull
    public List<StudentQuestionnaireSectionPojo> fetchRangeOfStudentQuestionnaireId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(StudentQuestionnaireSectionTable.STUDENT_QUESTIONNAIRE_SECTION.STUDENT_QUESTIONNAIRE_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>student_questionnaire_id IN (values)</code>
     */
    @Nonnull
    public List<StudentQuestionnaireSectionPojo> fetchByStudentQuestionnaireId(UUID... values) {
        return fetch(StudentQuestionnaireSectionTable.STUDENT_QUESTIONNAIRE_SECTION.STUDENT_QUESTIONNAIRE_ID, values);
    }

    /**
     * Fetch records that have <code>student_questionnaire_version BETWEEN
     * lowerInclusive AND upperInclusive</code>
     */
    @Nonnull
    public List<StudentQuestionnaireSectionPojo> fetchRangeOfStudentQuestionnaireVersion(OffsetDateTime lowerInclusive, OffsetDateTime upperInclusive) {
        return fetchRange(StudentQuestionnaireSectionTable.STUDENT_QUESTIONNAIRE_SECTION.STUDENT_QUESTIONNAIRE_VERSION, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>student_questionnaire_version IN
     * (values)</code>
     */
    @Nonnull
    public List<StudentQuestionnaireSectionPojo> fetchByStudentQuestionnaireVersion(OffsetDateTime... values) {
        return fetch(StudentQuestionnaireSectionTable.STUDENT_QUESTIONNAIRE_SECTION.STUDENT_QUESTIONNAIRE_VERSION, values);
    }

    /**
     * Fetch records that have <code>order BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<StudentQuestionnaireSectionPojo> fetchRangeOfOrder(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(StudentQuestionnaireSectionTable.STUDENT_QUESTIONNAIRE_SECTION.ORDER, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>order IN (values)</code>
     */
    @Nonnull
    public List<StudentQuestionnaireSectionPojo> fetchByOrder(Integer... values) {
        return fetch(StudentQuestionnaireSectionTable.STUDENT_QUESTIONNAIRE_SECTION.ORDER, values);
    }

    /**
     * Fetch records that have <code>title_i18n_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<StudentQuestionnaireSectionPojo> fetchRangeOfTitleI18nId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(StudentQuestionnaireSectionTable.STUDENT_QUESTIONNAIRE_SECTION.TITLE_I18N_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>title_i18n_id IN (values)</code>
     */
    @Nonnull
    public List<StudentQuestionnaireSectionPojo> fetchByTitleI18nId(UUID... values) {
        return fetch(StudentQuestionnaireSectionTable.STUDENT_QUESTIONNAIRE_SECTION.TITLE_I18N_ID, values);
    }

    /**
     * Fetch a unique record that has <code>title_i18n_id = value</code>
     */
    @Nullable
    public StudentQuestionnaireSectionPojo fetchOneByTitleI18nId(UUID value) {
        return fetchOne(StudentQuestionnaireSectionTable.STUDENT_QUESTIONNAIRE_SECTION.TITLE_I18N_ID, value);
    }

    /**
     * Fetch records that have <code>created_on BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<StudentQuestionnaireSectionPojo> fetchRangeOfCreatedOn(OffsetDateTime lowerInclusive, OffsetDateTime upperInclusive) {
        return fetchRange(StudentQuestionnaireSectionTable.STUDENT_QUESTIONNAIRE_SECTION.CREATED_ON, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>created_on IN (values)</code>
     */
    @Nonnull
    public List<StudentQuestionnaireSectionPojo> fetchByCreatedOn(OffsetDateTime... values) {
        return fetch(StudentQuestionnaireSectionTable.STUDENT_QUESTIONNAIRE_SECTION.CREATED_ON, values);
    }

    /**
     * Fetch records that have <code>created_by BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<StudentQuestionnaireSectionPojo> fetchRangeOfCreatedBy(String lowerInclusive, String upperInclusive) {
        return fetchRange(StudentQuestionnaireSectionTable.STUDENT_QUESTIONNAIRE_SECTION.CREATED_BY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>created_by IN (values)</code>
     */
    @Nonnull
    public List<StudentQuestionnaireSectionPojo> fetchByCreatedBy(String... values) {
        return fetch(StudentQuestionnaireSectionTable.STUDENT_QUESTIONNAIRE_SECTION.CREATED_BY, values);
    }

    /**
     * Fetch records that have <code>updated_on BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<StudentQuestionnaireSectionPojo> fetchRangeOfUpdatedOn(OffsetDateTime lowerInclusive, OffsetDateTime upperInclusive) {
        return fetchRange(StudentQuestionnaireSectionTable.STUDENT_QUESTIONNAIRE_SECTION.UPDATED_ON, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>updated_on IN (values)</code>
     */
    @Nonnull
    public List<StudentQuestionnaireSectionPojo> fetchByUpdatedOn(OffsetDateTime... values) {
        return fetch(StudentQuestionnaireSectionTable.STUDENT_QUESTIONNAIRE_SECTION.UPDATED_ON, values);
    }

    /**
     * Fetch records that have <code>updated_by BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<StudentQuestionnaireSectionPojo> fetchRangeOfUpdatedBy(String lowerInclusive, String upperInclusive) {
        return fetchRange(StudentQuestionnaireSectionTable.STUDENT_QUESTIONNAIRE_SECTION.UPDATED_BY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>updated_by IN (values)</code>
     */
    @Nonnull
    public List<StudentQuestionnaireSectionPojo> fetchByUpdatedBy(String... values) {
        return fetch(StudentQuestionnaireSectionTable.STUDENT_QUESTIONNAIRE_SECTION.UPDATED_BY, values);
    }
}
