/*
 * This file is generated by jOOQ.
 */
package unid.jooqMono.model.tables.daos;


import java.time.OffsetDateTime;
import java.util.List;
import java.util.UUID;

import javax.annotation.Nonnull;
import javax.annotation.Nullable;
import javax.annotation.processing.Generated;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;

import unid.jooqMono.model.enums.UserRoleEnum;
import unid.jooqMono.model.tables.SessionRescheduleTable;
import unid.jooqMono.model.tables.pojos.SessionReschedulePojo;
import unid.jooqMono.model.tables.records.SessionRescheduleRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.15.12"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SessionRescheduleDao extends DAOImpl<SessionRescheduleRecord, SessionReschedulePojo, UUID> {

    /**
     * Create a new SessionRescheduleDao without any configuration
     */
    public SessionRescheduleDao() {
        super(SessionRescheduleTable.SESSION_RESCHEDULE, SessionReschedulePojo.class);
    }

    /**
     * Create a new SessionRescheduleDao with an attached configuration
     */
    public SessionRescheduleDao(Configuration configuration) {
        super(SessionRescheduleTable.SESSION_RESCHEDULE, SessionReschedulePojo.class, configuration);
    }

    @Override
    @Nonnull
    public UUID getId(SessionReschedulePojo object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<SessionReschedulePojo> fetchRangeOfId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(SessionRescheduleTable.SESSION_RESCHEDULE.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    @Nonnull
    public List<SessionReschedulePojo> fetchById(UUID... values) {
        return fetch(SessionRescheduleTable.SESSION_RESCHEDULE.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    @Nullable
    public SessionReschedulePojo fetchOneById(UUID value) {
        return fetchOne(SessionRescheduleTable.SESSION_RESCHEDULE.ID, value);
    }

    /**
     * Fetch records that have <code>educator_calendar_id BETWEEN lowerInclusive
     * AND upperInclusive</code>
     */
    @Nonnull
    public List<SessionReschedulePojo> fetchRangeOfEducatorCalendarId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(SessionRescheduleTable.SESSION_RESCHEDULE.EDUCATOR_CALENDAR_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>educator_calendar_id IN (values)</code>
     */
    @Nonnull
    public List<SessionReschedulePojo> fetchByEducatorCalendarId(UUID... values) {
        return fetch(SessionRescheduleTable.SESSION_RESCHEDULE.EDUCATOR_CALENDAR_ID, values);
    }

    /**
     * Fetch records that have <code>start_time_utc BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<SessionReschedulePojo> fetchRangeOfStartTimeUtc(OffsetDateTime lowerInclusive, OffsetDateTime upperInclusive) {
        return fetchRange(SessionRescheduleTable.SESSION_RESCHEDULE.START_TIME_UTC, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>start_time_utc IN (values)</code>
     */
    @Nonnull
    public List<SessionReschedulePojo> fetchByStartTimeUtc(OffsetDateTime... values) {
        return fetch(SessionRescheduleTable.SESSION_RESCHEDULE.START_TIME_UTC, values);
    }

    /**
     * Fetch records that have <code>end_time_utc BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<SessionReschedulePojo> fetchRangeOfEndTimeUtc(OffsetDateTime lowerInclusive, OffsetDateTime upperInclusive) {
        return fetchRange(SessionRescheduleTable.SESSION_RESCHEDULE.END_TIME_UTC, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>end_time_utc IN (values)</code>
     */
    @Nonnull
    public List<SessionReschedulePojo> fetchByEndTimeUtc(OffsetDateTime... values) {
        return fetch(SessionRescheduleTable.SESSION_RESCHEDULE.END_TIME_UTC, values);
    }

    /**
     * Fetch records that have <code>user_role BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<SessionReschedulePojo> fetchRangeOfUserRole(UserRoleEnum lowerInclusive, UserRoleEnum upperInclusive) {
        return fetchRange(SessionRescheduleTable.SESSION_RESCHEDULE.USER_ROLE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>user_role IN (values)</code>
     */
    @Nonnull
    public List<SessionReschedulePojo> fetchByUserRole(UserRoleEnum... values) {
        return fetch(SessionRescheduleTable.SESSION_RESCHEDULE.USER_ROLE, values);
    }

    /**
     * Fetch records that have <code>reason BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<SessionReschedulePojo> fetchRangeOfReason(String lowerInclusive, String upperInclusive) {
        return fetchRange(SessionRescheduleTable.SESSION_RESCHEDULE.REASON, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>reason IN (values)</code>
     */
    @Nonnull
    public List<SessionReschedulePojo> fetchByReason(String... values) {
        return fetch(SessionRescheduleTable.SESSION_RESCHEDULE.REASON, values);
    }

    /**
     * Fetch records that have <code>accpet BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<SessionReschedulePojo> fetchRangeOfAccpet(Boolean lowerInclusive, Boolean upperInclusive) {
        return fetchRange(SessionRescheduleTable.SESSION_RESCHEDULE.ACCPET, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>accpet IN (values)</code>
     */
    @Nonnull
    public List<SessionReschedulePojo> fetchByAccpet(Boolean... values) {
        return fetch(SessionRescheduleTable.SESSION_RESCHEDULE.ACCPET, values);
    }

    /**
     * Fetch records that have <code>admin_user_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<SessionReschedulePojo> fetchRangeOfAdminUserId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(SessionRescheduleTable.SESSION_RESCHEDULE.ADMIN_USER_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>admin_user_id IN (values)</code>
     */
    @Nonnull
    public List<SessionReschedulePojo> fetchByAdminUserId(UUID... values) {
        return fetch(SessionRescheduleTable.SESSION_RESCHEDULE.ADMIN_USER_ID, values);
    }

    /**
     * Fetch records that have <code>created_on BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<SessionReschedulePojo> fetchRangeOfCreatedOn(OffsetDateTime lowerInclusive, OffsetDateTime upperInclusive) {
        return fetchRange(SessionRescheduleTable.SESSION_RESCHEDULE.CREATED_ON, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>created_on IN (values)</code>
     */
    @Nonnull
    public List<SessionReschedulePojo> fetchByCreatedOn(OffsetDateTime... values) {
        return fetch(SessionRescheduleTable.SESSION_RESCHEDULE.CREATED_ON, values);
    }

    /**
     * Fetch records that have <code>created_by BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<SessionReschedulePojo> fetchRangeOfCreatedBy(String lowerInclusive, String upperInclusive) {
        return fetchRange(SessionRescheduleTable.SESSION_RESCHEDULE.CREATED_BY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>created_by IN (values)</code>
     */
    @Nonnull
    public List<SessionReschedulePojo> fetchByCreatedBy(String... values) {
        return fetch(SessionRescheduleTable.SESSION_RESCHEDULE.CREATED_BY, values);
    }

    /**
     * Fetch records that have <code>updated_on BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<SessionReschedulePojo> fetchRangeOfUpdatedOn(OffsetDateTime lowerInclusive, OffsetDateTime upperInclusive) {
        return fetchRange(SessionRescheduleTable.SESSION_RESCHEDULE.UPDATED_ON, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>updated_on IN (values)</code>
     */
    @Nonnull
    public List<SessionReschedulePojo> fetchByUpdatedOn(OffsetDateTime... values) {
        return fetch(SessionRescheduleTable.SESSION_RESCHEDULE.UPDATED_ON, values);
    }

    /**
     * Fetch records that have <code>updated_by BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<SessionReschedulePojo> fetchRangeOfUpdatedBy(String lowerInclusive, String upperInclusive) {
        return fetchRange(SessionRescheduleTable.SESSION_RESCHEDULE.UPDATED_BY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>updated_by IN (values)</code>
     */
    @Nonnull
    public List<SessionReschedulePojo> fetchByUpdatedBy(String... values) {
        return fetch(SessionRescheduleTable.SESSION_RESCHEDULE.UPDATED_BY, values);
    }

    /**
     * Fetch records that have <code>user_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<SessionReschedulePojo> fetchRangeOfUserId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(SessionRescheduleTable.SESSION_RESCHEDULE.USER_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>user_id IN (values)</code>
     */
    @Nonnull
    public List<SessionReschedulePojo> fetchByUserId(UUID... values) {
        return fetch(SessionRescheduleTable.SESSION_RESCHEDULE.USER_ID, values);
    }
}
