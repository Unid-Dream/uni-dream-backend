/*
 * This file is generated by jOOQ.
 */
package unid.jooqMono.model.tables.daos;


import java.time.OffsetDateTime;
import java.util.List;
import java.util.UUID;

import javax.annotation.Nonnull;
import javax.annotation.Nullable;
import javax.annotation.processing.Generated;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;

import unid.jooqMono.model.tables.StudentBookingSurveyMapTable;
import unid.jooqMono.model.tables.pojos.StudentBookingSurveyMapPojo;
import unid.jooqMono.model.tables.records.StudentBookingSurveyMapRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.15.12"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class StudentBookingSurveyMapDao extends DAOImpl<StudentBookingSurveyMapRecord, StudentBookingSurveyMapPojo, UUID> {

    /**
     * Create a new StudentBookingSurveyMapDao without any configuration
     */
    public StudentBookingSurveyMapDao() {
        super(StudentBookingSurveyMapTable.STUDENT_BOOKING_SURVEY_MAP, StudentBookingSurveyMapPojo.class);
    }

    /**
     * Create a new StudentBookingSurveyMapDao with an attached configuration
     */
    public StudentBookingSurveyMapDao(Configuration configuration) {
        super(StudentBookingSurveyMapTable.STUDENT_BOOKING_SURVEY_MAP, StudentBookingSurveyMapPojo.class, configuration);
    }

    @Override
    @Nonnull
    public UUID getId(StudentBookingSurveyMapPojo object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<StudentBookingSurveyMapPojo> fetchRangeOfId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(StudentBookingSurveyMapTable.STUDENT_BOOKING_SURVEY_MAP.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    @Nonnull
    public List<StudentBookingSurveyMapPojo> fetchById(UUID... values) {
        return fetch(StudentBookingSurveyMapTable.STUDENT_BOOKING_SURVEY_MAP.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    @Nullable
    public StudentBookingSurveyMapPojo fetchOneById(UUID value) {
        return fetchOne(StudentBookingSurveyMapTable.STUDENT_BOOKING_SURVEY_MAP.ID, value);
    }

    /**
     * Fetch records that have <code>educator_calendar_id BETWEEN lowerInclusive
     * AND upperInclusive</code>
     */
    @Nonnull
    public List<StudentBookingSurveyMapPojo> fetchRangeOfEducatorCalendarId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(StudentBookingSurveyMapTable.STUDENT_BOOKING_SURVEY_MAP.EDUCATOR_CALENDAR_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>educator_calendar_id IN (values)</code>
     */
    @Nonnull
    public List<StudentBookingSurveyMapPojo> fetchByEducatorCalendarId(UUID... values) {
        return fetch(StudentBookingSurveyMapTable.STUDENT_BOOKING_SURVEY_MAP.EDUCATOR_CALENDAR_ID, values);
    }

    /**
     * Fetch records that have <code>student_session_survey_id BETWEEN
     * lowerInclusive AND upperInclusive</code>
     */
    @Nonnull
    public List<StudentBookingSurveyMapPojo> fetchRangeOfStudentSessionSurveyId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(StudentBookingSurveyMapTable.STUDENT_BOOKING_SURVEY_MAP.STUDENT_SESSION_SURVEY_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>student_session_survey_id IN
     * (values)</code>
     */
    @Nonnull
    public List<StudentBookingSurveyMapPojo> fetchByStudentSessionSurveyId(UUID... values) {
        return fetch(StudentBookingSurveyMapTable.STUDENT_BOOKING_SURVEY_MAP.STUDENT_SESSION_SURVEY_ID, values);
    }

    /**
     * Fetch records that have <code>student_session_survey_version_asked
     * BETWEEN lowerInclusive AND upperInclusive</code>
     */
    @Nonnull
    public List<StudentBookingSurveyMapPojo> fetchRangeOfStudentSessionSurveyVersionAsked(OffsetDateTime lowerInclusive, OffsetDateTime upperInclusive) {
        return fetchRange(StudentBookingSurveyMapTable.STUDENT_BOOKING_SURVEY_MAP.STUDENT_SESSION_SURVEY_VERSION_ASKED, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>student_session_survey_version_asked IN
     * (values)</code>
     */
    @Nonnull
    public List<StudentBookingSurveyMapPojo> fetchByStudentSessionSurveyVersionAsked(OffsetDateTime... values) {
        return fetch(StudentBookingSurveyMapTable.STUDENT_BOOKING_SURVEY_MAP.STUDENT_SESSION_SURVEY_VERSION_ASKED, values);
    }

    /**
     * Fetch records that have <code>student_session_survey_version_completed
     * BETWEEN lowerInclusive AND upperInclusive</code>
     */
    @Nonnull
    public List<StudentBookingSurveyMapPojo> fetchRangeOfStudentSessionSurveyVersionCompleted(OffsetDateTime lowerInclusive, OffsetDateTime upperInclusive) {
        return fetchRange(StudentBookingSurveyMapTable.STUDENT_BOOKING_SURVEY_MAP.STUDENT_SESSION_SURVEY_VERSION_COMPLETED, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>student_session_survey_version_completed IN
     * (values)</code>
     */
    @Nonnull
    public List<StudentBookingSurveyMapPojo> fetchByStudentSessionSurveyVersionCompleted(OffsetDateTime... values) {
        return fetch(StudentBookingSurveyMapTable.STUDENT_BOOKING_SURVEY_MAP.STUDENT_SESSION_SURVEY_VERSION_COMPLETED, values);
    }

    /**
     * Fetch records that have <code>completed BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<StudentBookingSurveyMapPojo> fetchRangeOfCompleted(Boolean lowerInclusive, Boolean upperInclusive) {
        return fetchRange(StudentBookingSurveyMapTable.STUDENT_BOOKING_SURVEY_MAP.COMPLETED, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>completed IN (values)</code>
     */
    @Nonnull
    public List<StudentBookingSurveyMapPojo> fetchByCompleted(Boolean... values) {
        return fetch(StudentBookingSurveyMapTable.STUDENT_BOOKING_SURVEY_MAP.COMPLETED, values);
    }

    /**
     * Fetch records that have <code>created_on BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<StudentBookingSurveyMapPojo> fetchRangeOfCreatedOn(OffsetDateTime lowerInclusive, OffsetDateTime upperInclusive) {
        return fetchRange(StudentBookingSurveyMapTable.STUDENT_BOOKING_SURVEY_MAP.CREATED_ON, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>created_on IN (values)</code>
     */
    @Nonnull
    public List<StudentBookingSurveyMapPojo> fetchByCreatedOn(OffsetDateTime... values) {
        return fetch(StudentBookingSurveyMapTable.STUDENT_BOOKING_SURVEY_MAP.CREATED_ON, values);
    }

    /**
     * Fetch records that have <code>created_by BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<StudentBookingSurveyMapPojo> fetchRangeOfCreatedBy(String lowerInclusive, String upperInclusive) {
        return fetchRange(StudentBookingSurveyMapTable.STUDENT_BOOKING_SURVEY_MAP.CREATED_BY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>created_by IN (values)</code>
     */
    @Nonnull
    public List<StudentBookingSurveyMapPojo> fetchByCreatedBy(String... values) {
        return fetch(StudentBookingSurveyMapTable.STUDENT_BOOKING_SURVEY_MAP.CREATED_BY, values);
    }

    /**
     * Fetch records that have <code>updated_on BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<StudentBookingSurveyMapPojo> fetchRangeOfUpdatedOn(OffsetDateTime lowerInclusive, OffsetDateTime upperInclusive) {
        return fetchRange(StudentBookingSurveyMapTable.STUDENT_BOOKING_SURVEY_MAP.UPDATED_ON, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>updated_on IN (values)</code>
     */
    @Nonnull
    public List<StudentBookingSurveyMapPojo> fetchByUpdatedOn(OffsetDateTime... values) {
        return fetch(StudentBookingSurveyMapTable.STUDENT_BOOKING_SURVEY_MAP.UPDATED_ON, values);
    }

    /**
     * Fetch records that have <code>updated_by BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<StudentBookingSurveyMapPojo> fetchRangeOfUpdatedBy(String lowerInclusive, String upperInclusive) {
        return fetchRange(StudentBookingSurveyMapTable.STUDENT_BOOKING_SURVEY_MAP.UPDATED_BY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>updated_by IN (values)</code>
     */
    @Nonnull
    public List<StudentBookingSurveyMapPojo> fetchByUpdatedBy(String... values) {
        return fetch(StudentBookingSurveyMapTable.STUDENT_BOOKING_SURVEY_MAP.UPDATED_BY, values);
    }
}
