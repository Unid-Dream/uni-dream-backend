/*
 * This file is generated by jOOQ.
 */
package unid.jooqMono.model.tables;


import java.util.UUID;

import javax.annotation.Nonnull;
import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import unid.jooqMono.model.Keys;
import unid.jooqMono.model.Public;
import unid.jooqMono.model.tables.records.PassionMajorRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.15.12"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PassionMajorTable extends TableImpl<PassionMajorRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.passion_major</code>
     */
    public static final PassionMajorTable PASSION_MAJOR = new PassionMajorTable();

    /**
     * The class holding records for this type
     */
    @Override
    @Nonnull
    public Class<PassionMajorRecord> getRecordType() {
        return PassionMajorRecord.class;
    }

    /**
     * The column <code>public.passion_major.id</code>.
     */
    public final TableField<PassionMajorRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field("gen_random_uuid()", SQLDataType.UUID)), this, "");

    /**
     * The column <code>public.passion_major.name_i18n_id</code>.
     */
    public final TableField<PassionMajorRecord, UUID> NAME_I18N_ID = createField(DSL.name("name_i18n_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.passion_major.desc_i18n_id</code>.
     */
    public final TableField<PassionMajorRecord, UUID> DESC_I18N_ID = createField(DSL.name("desc_i18n_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.passion_major.icon_path</code>.
     */
    public final TableField<PassionMajorRecord, String> ICON_PATH = createField(DSL.name("icon_path"), SQLDataType.CLOB, this, "");

    private PassionMajorTable(Name alias, Table<PassionMajorRecord> aliased) {
        this(alias, aliased, null);
    }

    private PassionMajorTable(Name alias, Table<PassionMajorRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.passion_major</code> table reference
     */
    public PassionMajorTable(String alias) {
        this(DSL.name(alias), PASSION_MAJOR);
    }

    /**
     * Create an aliased <code>public.passion_major</code> table reference
     */
    public PassionMajorTable(Name alias) {
        this(alias, PASSION_MAJOR);
    }

    /**
     * Create a <code>public.passion_major</code> table reference
     */
    public PassionMajorTable() {
        this(DSL.name("passion_major"), null);
    }

    public <O extends Record> PassionMajorTable(Table<O> child, ForeignKey<O, PassionMajorRecord> key) {
        super(child, key, PASSION_MAJOR);
    }

    @Override
    @Nonnull
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    @Nonnull
    public UniqueKey<PassionMajorRecord> getPrimaryKey() {
        return Keys.PASSION_MAJOR_PKEY;
    }

    @Override
    @Nonnull
    public PassionMajorTable as(String alias) {
        return new PassionMajorTable(DSL.name(alias), this);
    }

    @Override
    @Nonnull
    public PassionMajorTable as(Name alias) {
        return new PassionMajorTable(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public PassionMajorTable rename(String name) {
        return new PassionMajorTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public PassionMajorTable rename(Name name) {
        return new PassionMajorTable(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    @Nonnull
    public Row4<UUID, UUID, UUID, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
