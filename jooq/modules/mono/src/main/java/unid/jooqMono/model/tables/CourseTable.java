/*
 * This file is generated by jOOQ.
 */
package unid.jooqMono.model.tables;


import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import javax.annotation.Nonnull;
import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import unid.jooqMono.model.Keys;
import unid.jooqMono.model.Public;
import unid.jooqMono.model.tables.records.CourseRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.15.12"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CourseTable extends TableImpl<CourseRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.course</code>
     */
    public static final CourseTable COURSE = new CourseTable();

    /**
     * The class holding records for this type
     */
    @Override
    @Nonnull
    public Class<CourseRecord> getRecordType() {
        return CourseRecord.class;
    }

    /**
     * The column <code>public.course.id</code>.
     */
    public final TableField<CourseRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field("gen_random_uuid()", SQLDataType.UUID)), this, "");

    /**
     * The column <code>public.course.title_i18n_id</code>.
     */
    public final TableField<CourseRecord, UUID> TITLE_I18N_ID = createField(DSL.name("title_i18n_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.course.description_i18n_id</code>.
     */
    public final TableField<CourseRecord, UUID> DESCRIPTION_I18N_ID = createField(DSL.name("description_i18n_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.course.academic_major_id</code>.
     */
    public final TableField<CourseRecord, UUID> ACADEMIC_MAJOR_ID = createField(DSL.name("academic_major_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.course.created_on</code>.
     */
    public final TableField<CourseRecord, OffsetDateTime> CREATED_ON = createField(DSL.name("created_on"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    /**
     * The column <code>public.course.created_by</code>.
     */
    public final TableField<CourseRecord, String> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.course.updated_on</code>.
     */
    public final TableField<CourseRecord, OffsetDateTime> UPDATED_ON = createField(DSL.name("updated_on"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    /**
     * The column <code>public.course.updated_by</code>.
     */
    public final TableField<CourseRecord, String> UPDATED_BY = createField(DSL.name("updated_by"), SQLDataType.CLOB, this, "");

    private CourseTable(Name alias, Table<CourseRecord> aliased) {
        this(alias, aliased, null);
    }

    private CourseTable(Name alias, Table<CourseRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.course</code> table reference
     */
    public CourseTable(String alias) {
        this(DSL.name(alias), COURSE);
    }

    /**
     * Create an aliased <code>public.course</code> table reference
     */
    public CourseTable(Name alias) {
        this(alias, COURSE);
    }

    /**
     * Create a <code>public.course</code> table reference
     */
    public CourseTable() {
        this(DSL.name("course"), null);
    }

    public <O extends Record> CourseTable(Table<O> child, ForeignKey<O, CourseRecord> key) {
        super(child, key, COURSE);
    }

    @Override
    @Nonnull
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    @Nonnull
    public UniqueKey<CourseRecord> getPrimaryKey() {
        return Keys.COURSE_PKEY;
    }

    @Override
    @Nonnull
    public List<UniqueKey<CourseRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.COURSE_TITLE_I18N_ID_KEY, Keys.COURSE_DESCRIPTION_I18N_ID_KEY);
    }

    @Override
    @Nonnull
    public List<ForeignKey<CourseRecord, ?>> getReferences() {
        return Arrays.asList(Keys.COURSE__FK_EVET_TITL, Keys.COURSE__FK_EVET_DESC, Keys.COURSE__FK_EVET_ACAD_MAJ);
    }

    private transient I18nTable _fkEvetTitl;
    private transient I18nTable _fkEvetDesc;
    private transient AcademicMajorTable _academicMajor;

    public I18nTable fkEvetTitl() {
        if (_fkEvetTitl == null)
            _fkEvetTitl = new I18nTable(this, Keys.COURSE__FK_EVET_TITL);

        return _fkEvetTitl;
    }

    public I18nTable fkEvetDesc() {
        if (_fkEvetDesc == null)
            _fkEvetDesc = new I18nTable(this, Keys.COURSE__FK_EVET_DESC);

        return _fkEvetDesc;
    }

    public AcademicMajorTable academicMajor() {
        if (_academicMajor == null)
            _academicMajor = new AcademicMajorTable(this, Keys.COURSE__FK_EVET_ACAD_MAJ);

        return _academicMajor;
    }

    @Override
    @Nonnull
    public CourseTable as(String alias) {
        return new CourseTable(DSL.name(alias), this);
    }

    @Override
    @Nonnull
    public CourseTable as(Name alias) {
        return new CourseTable(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public CourseTable rename(String name) {
        return new CourseTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public CourseTable rename(Name name) {
        return new CourseTable(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    @Nonnull
    public Row8<UUID, UUID, UUID, UUID, OffsetDateTime, String, OffsetDateTime, String> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
}
