/*
 * This file is generated by jOOQ.
 */
package unid.jooqMono.model.tables;


import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import javax.annotation.Nonnull;
import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import unid.jooqMono.model.Keys;
import unid.jooqMono.model.Public;
import unid.jooqMono.model.enums.TagCategoryEnum;
import unid.jooqMono.model.tables.records.TagRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.15.12"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TagTable extends TableImpl<TagRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.tag</code>
     */
    public static final TagTable TAG = new TagTable();

    /**
     * The class holding records for this type
     */
    @Override
    @Nonnull
    public Class<TagRecord> getRecordType() {
        return TagRecord.class;
    }

    /**
     * The column <code>public.tag.id</code>.
     */
    public final TableField<TagRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field("gen_random_uuid()", SQLDataType.UUID)), this, "");

    /**
     * The column <code>public.tag.description_i18n_id</code>.
     */
    public final TableField<TagRecord, UUID> DESCRIPTION_I18N_ID = createField(DSL.name("description_i18n_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.tag.tag_category</code>.
     */
    public final TableField<TagRecord, TagCategoryEnum> TAG_CATEGORY = createField(DSL.name("tag_category"), SQLDataType.VARCHAR.asEnumDataType(unid.jooqMono.model.enums.TagCategoryEnum.class), this, "");

    /**
     * The column <code>public.tag.created_on</code>.
     */
    public final TableField<TagRecord, OffsetDateTime> CREATED_ON = createField(DSL.name("created_on"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    /**
     * The column <code>public.tag.created_by</code>.
     */
    public final TableField<TagRecord, String> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.tag.updated_on</code>.
     */
    public final TableField<TagRecord, OffsetDateTime> UPDATED_ON = createField(DSL.name("updated_on"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    /**
     * The column <code>public.tag.updated_by</code>.
     */
    public final TableField<TagRecord, String> UPDATED_BY = createField(DSL.name("updated_by"), SQLDataType.CLOB, this, "");

    private TagTable(Name alias, Table<TagRecord> aliased) {
        this(alias, aliased, null);
    }

    private TagTable(Name alias, Table<TagRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.tag</code> table reference
     */
    public TagTable(String alias) {
        this(DSL.name(alias), TAG);
    }

    /**
     * Create an aliased <code>public.tag</code> table reference
     */
    public TagTable(Name alias) {
        this(alias, TAG);
    }

    /**
     * Create a <code>public.tag</code> table reference
     */
    public TagTable() {
        this(DSL.name("tag"), null);
    }

    public <O extends Record> TagTable(Table<O> child, ForeignKey<O, TagRecord> key) {
        super(child, key, TAG);
    }

    @Override
    @Nonnull
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    @Nonnull
    public UniqueKey<TagRecord> getPrimaryKey() {
        return Keys.TAG_PKEY;
    }

    @Override
    @Nonnull
    public List<UniqueKey<TagRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.TAG_DESCRIPTION_I18N_ID_KEY);
    }

    @Override
    @Nonnull
    public List<ForeignKey<TagRecord, ?>> getReferences() {
        return Arrays.asList(Keys.TAG__FK_TAG_DESC);
    }

    private transient I18nTable _i18n;

    public I18nTable i18n() {
        if (_i18n == null)
            _i18n = new I18nTable(this, Keys.TAG__FK_TAG_DESC);

        return _i18n;
    }

    @Override
    @Nonnull
    public TagTable as(String alias) {
        return new TagTable(DSL.name(alias), this);
    }

    @Override
    @Nonnull
    public TagTable as(Name alias) {
        return new TagTable(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public TagTable rename(String name) {
        return new TagTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public TagTable rename(Name name) {
        return new TagTable(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    @Nonnull
    public Row7<UUID, UUID, TagCategoryEnum, OffsetDateTime, String, OffsetDateTime, String> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
