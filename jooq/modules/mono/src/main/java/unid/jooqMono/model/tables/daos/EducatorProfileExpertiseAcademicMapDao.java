/*
 * This file is generated by jOOQ.
 */
package unid.jooqMono.model.tables.daos;


import java.time.OffsetDateTime;
import java.util.List;
import java.util.UUID;

import javax.annotation.Nonnull;
import javax.annotation.Nullable;
import javax.annotation.processing.Generated;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;

import unid.jooqMono.model.tables.EducatorProfileExpertiseAcademicMapTable;
import unid.jooqMono.model.tables.pojos.EducatorProfileExpertiseAcademicMapPojo;
import unid.jooqMono.model.tables.records.EducatorProfileExpertiseAcademicMapRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.15.12"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class EducatorProfileExpertiseAcademicMapDao extends DAOImpl<EducatorProfileExpertiseAcademicMapRecord, EducatorProfileExpertiseAcademicMapPojo, UUID> {

    /**
     * Create a new EducatorProfileExpertiseAcademicMapDao without any
     * configuration
     */
    public EducatorProfileExpertiseAcademicMapDao() {
        super(EducatorProfileExpertiseAcademicMapTable.EDUCATOR_PROFILE_EXPERTISE_ACADEMIC_MAP, EducatorProfileExpertiseAcademicMapPojo.class);
    }

    /**
     * Create a new EducatorProfileExpertiseAcademicMapDao with an attached
     * configuration
     */
    public EducatorProfileExpertiseAcademicMapDao(Configuration configuration) {
        super(EducatorProfileExpertiseAcademicMapTable.EDUCATOR_PROFILE_EXPERTISE_ACADEMIC_MAP, EducatorProfileExpertiseAcademicMapPojo.class, configuration);
    }

    @Override
    @Nonnull
    public UUID getId(EducatorProfileExpertiseAcademicMapPojo object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<EducatorProfileExpertiseAcademicMapPojo> fetchRangeOfId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(EducatorProfileExpertiseAcademicMapTable.EDUCATOR_PROFILE_EXPERTISE_ACADEMIC_MAP.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    @Nonnull
    public List<EducatorProfileExpertiseAcademicMapPojo> fetchById(UUID... values) {
        return fetch(EducatorProfileExpertiseAcademicMapTable.EDUCATOR_PROFILE_EXPERTISE_ACADEMIC_MAP.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    @Nullable
    public EducatorProfileExpertiseAcademicMapPojo fetchOneById(UUID value) {
        return fetchOne(EducatorProfileExpertiseAcademicMapTable.EDUCATOR_PROFILE_EXPERTISE_ACADEMIC_MAP.ID, value);
    }

    /**
     * Fetch records that have <code>educator_profile_id BETWEEN lowerInclusive
     * AND upperInclusive</code>
     */
    @Nonnull
    public List<EducatorProfileExpertiseAcademicMapPojo> fetchRangeOfEducatorProfileId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(EducatorProfileExpertiseAcademicMapTable.EDUCATOR_PROFILE_EXPERTISE_ACADEMIC_MAP.EDUCATOR_PROFILE_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>educator_profile_id IN (values)</code>
     */
    @Nonnull
    public List<EducatorProfileExpertiseAcademicMapPojo> fetchByEducatorProfileId(UUID... values) {
        return fetch(EducatorProfileExpertiseAcademicMapTable.EDUCATOR_PROFILE_EXPERTISE_ACADEMIC_MAP.EDUCATOR_PROFILE_ID, values);
    }

    /**
     * Fetch records that have <code>expertise_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<EducatorProfileExpertiseAcademicMapPojo> fetchRangeOfExpertiseId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(EducatorProfileExpertiseAcademicMapTable.EDUCATOR_PROFILE_EXPERTISE_ACADEMIC_MAP.EXPERTISE_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>expertise_id IN (values)</code>
     */
    @Nonnull
    public List<EducatorProfileExpertiseAcademicMapPojo> fetchByExpertiseId(UUID... values) {
        return fetch(EducatorProfileExpertiseAcademicMapTable.EDUCATOR_PROFILE_EXPERTISE_ACADEMIC_MAP.EXPERTISE_ID, values);
    }

    /**
     * Fetch records that have <code>academic_major_id BETWEEN lowerInclusive
     * AND upperInclusive</code>
     */
    @Nonnull
    public List<EducatorProfileExpertiseAcademicMapPojo> fetchRangeOfAcademicMajorId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(EducatorProfileExpertiseAcademicMapTable.EDUCATOR_PROFILE_EXPERTISE_ACADEMIC_MAP.ACADEMIC_MAJOR_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>academic_major_id IN (values)</code>
     */
    @Nonnull
    public List<EducatorProfileExpertiseAcademicMapPojo> fetchByAcademicMajorId(UUID... values) {
        return fetch(EducatorProfileExpertiseAcademicMapTable.EDUCATOR_PROFILE_EXPERTISE_ACADEMIC_MAP.ACADEMIC_MAJOR_ID, values);
    }

    /**
     * Fetch records that have <code>academic_subject_id BETWEEN lowerInclusive
     * AND upperInclusive</code>
     */
    @Nonnull
    public List<EducatorProfileExpertiseAcademicMapPojo> fetchRangeOfAcademicSubjectId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(EducatorProfileExpertiseAcademicMapTable.EDUCATOR_PROFILE_EXPERTISE_ACADEMIC_MAP.ACADEMIC_SUBJECT_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>academic_subject_id IN (values)</code>
     */
    @Nonnull
    public List<EducatorProfileExpertiseAcademicMapPojo> fetchByAcademicSubjectId(UUID... values) {
        return fetch(EducatorProfileExpertiseAcademicMapTable.EDUCATOR_PROFILE_EXPERTISE_ACADEMIC_MAP.ACADEMIC_SUBJECT_ID, values);
    }

    /**
     * Fetch records that have <code>created_on BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<EducatorProfileExpertiseAcademicMapPojo> fetchRangeOfCreatedOn(OffsetDateTime lowerInclusive, OffsetDateTime upperInclusive) {
        return fetchRange(EducatorProfileExpertiseAcademicMapTable.EDUCATOR_PROFILE_EXPERTISE_ACADEMIC_MAP.CREATED_ON, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>created_on IN (values)</code>
     */
    @Nonnull
    public List<EducatorProfileExpertiseAcademicMapPojo> fetchByCreatedOn(OffsetDateTime... values) {
        return fetch(EducatorProfileExpertiseAcademicMapTable.EDUCATOR_PROFILE_EXPERTISE_ACADEMIC_MAP.CREATED_ON, values);
    }

    /**
     * Fetch records that have <code>created_by BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<EducatorProfileExpertiseAcademicMapPojo> fetchRangeOfCreatedBy(String lowerInclusive, String upperInclusive) {
        return fetchRange(EducatorProfileExpertiseAcademicMapTable.EDUCATOR_PROFILE_EXPERTISE_ACADEMIC_MAP.CREATED_BY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>created_by IN (values)</code>
     */
    @Nonnull
    public List<EducatorProfileExpertiseAcademicMapPojo> fetchByCreatedBy(String... values) {
        return fetch(EducatorProfileExpertiseAcademicMapTable.EDUCATOR_PROFILE_EXPERTISE_ACADEMIC_MAP.CREATED_BY, values);
    }

    /**
     * Fetch records that have <code>updated_on BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<EducatorProfileExpertiseAcademicMapPojo> fetchRangeOfUpdatedOn(OffsetDateTime lowerInclusive, OffsetDateTime upperInclusive) {
        return fetchRange(EducatorProfileExpertiseAcademicMapTable.EDUCATOR_PROFILE_EXPERTISE_ACADEMIC_MAP.UPDATED_ON, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>updated_on IN (values)</code>
     */
    @Nonnull
    public List<EducatorProfileExpertiseAcademicMapPojo> fetchByUpdatedOn(OffsetDateTime... values) {
        return fetch(EducatorProfileExpertiseAcademicMapTable.EDUCATOR_PROFILE_EXPERTISE_ACADEMIC_MAP.UPDATED_ON, values);
    }

    /**
     * Fetch records that have <code>updated_by BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<EducatorProfileExpertiseAcademicMapPojo> fetchRangeOfUpdatedBy(String lowerInclusive, String upperInclusive) {
        return fetchRange(EducatorProfileExpertiseAcademicMapTable.EDUCATOR_PROFILE_EXPERTISE_ACADEMIC_MAP.UPDATED_BY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>updated_by IN (values)</code>
     */
    @Nonnull
    public List<EducatorProfileExpertiseAcademicMapPojo> fetchByUpdatedBy(String... values) {
        return fetch(EducatorProfileExpertiseAcademicMapTable.EDUCATOR_PROFILE_EXPERTISE_ACADEMIC_MAP.UPDATED_BY, values);
    }
}
