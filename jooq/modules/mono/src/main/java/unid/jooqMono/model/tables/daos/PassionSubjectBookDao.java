/*
 * This file is generated by jOOQ.
 */
package unid.jooqMono.model.tables.daos;


import java.util.List;
import java.util.UUID;

import javax.annotation.Nonnull;
import javax.annotation.Nullable;
import javax.annotation.processing.Generated;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;

import unid.jooqMono.model.tables.PassionSubjectBookTable;
import unid.jooqMono.model.tables.pojos.PassionSubjectBookPojo;
import unid.jooqMono.model.tables.records.PassionSubjectBookRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.15.12"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PassionSubjectBookDao extends DAOImpl<PassionSubjectBookRecord, PassionSubjectBookPojo, UUID> {

    /**
     * Create a new PassionSubjectBookDao without any configuration
     */
    public PassionSubjectBookDao() {
        super(PassionSubjectBookTable.PASSION_SUBJECT_BOOK, PassionSubjectBookPojo.class);
    }

    /**
     * Create a new PassionSubjectBookDao with an attached configuration
     */
    public PassionSubjectBookDao(Configuration configuration) {
        super(PassionSubjectBookTable.PASSION_SUBJECT_BOOK, PassionSubjectBookPojo.class, configuration);
    }

    @Override
    @Nonnull
    public UUID getId(PassionSubjectBookPojo object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<PassionSubjectBookPojo> fetchRangeOfId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(PassionSubjectBookTable.PASSION_SUBJECT_BOOK.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    @Nonnull
    public List<PassionSubjectBookPojo> fetchById(UUID... values) {
        return fetch(PassionSubjectBookTable.PASSION_SUBJECT_BOOK.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    @Nullable
    public PassionSubjectBookPojo fetchOneById(UUID value) {
        return fetchOne(PassionSubjectBookTable.PASSION_SUBJECT_BOOK.ID, value);
    }

    /**
     * Fetch records that have <code>subject_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<PassionSubjectBookPojo> fetchRangeOfSubjectId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(PassionSubjectBookTable.PASSION_SUBJECT_BOOK.SUBJECT_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>subject_id IN (values)</code>
     */
    @Nonnull
    public List<PassionSubjectBookPojo> fetchBySubjectId(UUID... values) {
        return fetch(PassionSubjectBookTable.PASSION_SUBJECT_BOOK.SUBJECT_ID, values);
    }

    /**
     * Fetch records that have <code>name_i18n_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<PassionSubjectBookPojo> fetchRangeOfNameI18nId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(PassionSubjectBookTable.PASSION_SUBJECT_BOOK.NAME_I18N_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>name_i18n_id IN (values)</code>
     */
    @Nonnull
    public List<PassionSubjectBookPojo> fetchByNameI18nId(UUID... values) {
        return fetch(PassionSubjectBookTable.PASSION_SUBJECT_BOOK.NAME_I18N_ID, values);
    }

    /**
     * Fetch records that have <code>author_i18n_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<PassionSubjectBookPojo> fetchRangeOfAuthorI18nId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(PassionSubjectBookTable.PASSION_SUBJECT_BOOK.AUTHOR_I18N_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>author_i18n_id IN (values)</code>
     */
    @Nonnull
    public List<PassionSubjectBookPojo> fetchByAuthorI18nId(UUID... values) {
        return fetch(PassionSubjectBookTable.PASSION_SUBJECT_BOOK.AUTHOR_I18N_ID, values);
    }

    /**
     * Fetch records that have <code>image BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<PassionSubjectBookPojo> fetchRangeOfImage(String lowerInclusive, String upperInclusive) {
        return fetchRange(PassionSubjectBookTable.PASSION_SUBJECT_BOOK.IMAGE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>image IN (values)</code>
     */
    @Nonnull
    public List<PassionSubjectBookPojo> fetchByImage(String... values) {
        return fetch(PassionSubjectBookTable.PASSION_SUBJECT_BOOK.IMAGE, values);
    }
}
