/*
 * This file is generated by jOOQ.
 */
package unid.jooqMono.model.tables;


import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.time.OffsetDateTime;
import java.util.UUID;

import javax.annotation.Nonnull;
import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import unid.jooqMono.model.Public;
import unid.jooqMono.model.enums.BookingStatusEnum;
import unid.jooqMono.model.enums.CurrencyEnum;
import unid.jooqMono.model.enums.PaymentMethodEnum;
import unid.jooqMono.model.enums.PaymentStatusEnum;
import unid.jooqMono.model.enums.StudentTransactionItemEnum;
import unid.jooqMono.model.tables.records._AuditLogStudentPaymentTransactionRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.15.12"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class _AuditLogStudentPaymentTransactionTable extends TableImpl<_AuditLogStudentPaymentTransactionRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>public._audit_log_student_payment_transaction</code>
     */
    public static final _AuditLogStudentPaymentTransactionTable _AUDIT_LOG_STUDENT_PAYMENT_TRANSACTION = new _AuditLogStudentPaymentTransactionTable();

    /**
     * The class holding records for this type
     */
    @Override
    @Nonnull
    public Class<_AuditLogStudentPaymentTransactionRecord> getRecordType() {
        return _AuditLogStudentPaymentTransactionRecord.class;
    }

    /**
     * The column
     * <code>public._audit_log_student_payment_transaction.audit_seq</code>.
     */
    public final TableField<_AuditLogStudentPaymentTransactionRecord, Long> AUDIT_SEQ = createField(DSL.name("audit_seq"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column
     * <code>public._audit_log_student_payment_transaction.audit_createdon</code>.
     */
    public final TableField<_AuditLogStudentPaymentTransactionRecord, OffsetDateTime> AUDIT_CREATEDON = createField(DSL.name("audit_createdon"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    /**
     * The column
     * <code>public._audit_log_student_payment_transaction.audit_createdby</code>.
     */
    public final TableField<_AuditLogStudentPaymentTransactionRecord, String> AUDIT_CREATEDBY = createField(DSL.name("audit_createdby"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column
     * <code>public._audit_log_student_payment_transaction.audit_operation</code>.
     */
    public final TableField<_AuditLogStudentPaymentTransactionRecord, String> AUDIT_OPERATION = createField(DSL.name("audit_operation"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column
     * <code>public._audit_log_student_payment_transaction.audit_type</code>.
     */
    public final TableField<_AuditLogStudentPaymentTransactionRecord, String> AUDIT_TYPE = createField(DSL.name("audit_type"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public._audit_log_student_payment_transaction.id</code>.
     */
    public final TableField<_AuditLogStudentPaymentTransactionRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column
     * <code>public._audit_log_student_payment_transaction.student_profile_id</code>.
     */
    public final TableField<_AuditLogStudentPaymentTransactionRecord, UUID> STUDENT_PROFILE_ID = createField(DSL.name("student_profile_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column
     * <code>public._audit_log_student_payment_transaction.transaction_amount</code>.
     */
    public final TableField<_AuditLogStudentPaymentTransactionRecord, BigDecimal> TRANSACTION_AMOUNT = createField(DSL.name("transaction_amount"), SQLDataType.NUMERIC.nullable(false), this, "");

    /**
     * The column
     * <code>public._audit_log_student_payment_transaction.transaction_currency</code>.
     */
    public final TableField<_AuditLogStudentPaymentTransactionRecord, CurrencyEnum> TRANSACTION_CURRENCY = createField(DSL.name("transaction_currency"), SQLDataType.VARCHAR.nullable(false).asEnumDataType(unid.jooqMono.model.enums.CurrencyEnum.class), this, "");

    /**
     * The column
     * <code>public._audit_log_student_payment_transaction.transaction_item</code>.
     */
    public final TableField<_AuditLogStudentPaymentTransactionRecord, StudentTransactionItemEnum> TRANSACTION_ITEM = createField(DSL.name("transaction_item"), SQLDataType.VARCHAR.nullable(false).asEnumDataType(unid.jooqMono.model.enums.StudentTransactionItemEnum.class), this, "");

    /**
     * The column
     * <code>public._audit_log_student_payment_transaction.transaction_item_ref_id</code>.
     */
    public final TableField<_AuditLogStudentPaymentTransactionRecord, UUID> TRANSACTION_ITEM_REF_ID = createField(DSL.name("transaction_item_ref_id"), SQLDataType.UUID, this, "");

    /**
     * The column
     * <code>public._audit_log_student_payment_transaction.transaction_personnel_ref_id</code>.
     */
    public final TableField<_AuditLogStudentPaymentTransactionRecord, UUID> TRANSACTION_PERSONNEL_REF_ID = createField(DSL.name("transaction_personnel_ref_id"), SQLDataType.UUID, this, "");

    /**
     * The column
     * <code>public._audit_log_student_payment_transaction.payment_method</code>.
     */
    public final TableField<_AuditLogStudentPaymentTransactionRecord, PaymentMethodEnum> PAYMENT_METHOD = createField(DSL.name("payment_method"), SQLDataType.VARCHAR.asEnumDataType(unid.jooqMono.model.enums.PaymentMethodEnum.class), this, "");

    /**
     * The column
     * <code>public._audit_log_student_payment_transaction.payment_status</code>.
     */
    public final TableField<_AuditLogStudentPaymentTransactionRecord, PaymentStatusEnum> PAYMENT_STATUS = createField(DSL.name("payment_status"), SQLDataType.VARCHAR.nullable(false).asEnumDataType(unid.jooqMono.model.enums.PaymentStatusEnum.class), this, "");

    /**
     * The column
     * <code>public._audit_log_student_payment_transaction.cod_order_ref</code>.
     */
    public final TableField<_AuditLogStudentPaymentTransactionRecord, String> COD_ORDER_REF = createField(DSL.name("cod_order_ref"), SQLDataType.CLOB, this, "");

    /**
     * The column
     * <code>public._audit_log_student_payment_transaction.cod_out_trade_no</code>.
     */
    public final TableField<_AuditLogStudentPaymentTransactionRecord, String> COD_OUT_TRADE_NO = createField(DSL.name("cod_out_trade_no"), SQLDataType.CLOB, this, "");

    /**
     * The column
     * <code>public._audit_log_student_payment_transaction.cod_ref_id</code>.
     */
    public final TableField<_AuditLogStudentPaymentTransactionRecord, String> COD_REF_ID = createField(DSL.name("cod_ref_id"), SQLDataType.CLOB, this, "");

    /**
     * The column
     * <code>public._audit_log_student_payment_transaction.cod_transaction_id</code>.
     */
    public final TableField<_AuditLogStudentPaymentTransactionRecord, String> COD_TRANSACTION_ID = createField(DSL.name("cod_transaction_id"), SQLDataType.CLOB, this, "");

    /**
     * The column
     * <code>public._audit_log_student_payment_transaction.cod_wallet</code>.
     */
    public final TableField<_AuditLogStudentPaymentTransactionRecord, String> COD_WALLET = createField(DSL.name("cod_wallet"), SQLDataType.CLOB, this, "");

    /**
     * The column
     * <code>public._audit_log_student_payment_transaction.cod_expiry</code>.
     */
    public final TableField<_AuditLogStudentPaymentTransactionRecord, OffsetDateTime> COD_EXPIRY = createField(DSL.name("cod_expiry"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    /**
     * The column
     * <code>public._audit_log_student_payment_transaction.cod_payment_url</code>.
     */
    public final TableField<_AuditLogStudentPaymentTransactionRecord, String> COD_PAYMENT_URL = createField(DSL.name("cod_payment_url"), SQLDataType.CLOB, this, "");

    /**
     * The column
     * <code>public._audit_log_student_payment_transaction.created_on</code>.
     */
    public final TableField<_AuditLogStudentPaymentTransactionRecord, OffsetDateTime> CREATED_ON = createField(DSL.name("created_on"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    /**
     * The column
     * <code>public._audit_log_student_payment_transaction.created_by</code>.
     */
    public final TableField<_AuditLogStudentPaymentTransactionRecord, String> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.CLOB, this, "");

    /**
     * The column
     * <code>public._audit_log_student_payment_transaction.updated_on</code>.
     */
    public final TableField<_AuditLogStudentPaymentTransactionRecord, OffsetDateTime> UPDATED_ON = createField(DSL.name("updated_on"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    /**
     * The column
     * <code>public._audit_log_student_payment_transaction.updated_by</code>.
     */
    public final TableField<_AuditLogStudentPaymentTransactionRecord, String> UPDATED_BY = createField(DSL.name("updated_by"), SQLDataType.CLOB, this, "");

    /**
     * The column
     * <code>public._audit_log_student_payment_transaction.transaction_submit_time</code>.
     */
    public final TableField<_AuditLogStudentPaymentTransactionRecord, LocalDateTime> TRANSACTION_SUBMIT_TIME = createField(DSL.name("transaction_submit_time"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column
     * <code>public._audit_log_student_payment_transaction.process_status</code>.
     */
    public final TableField<_AuditLogStudentPaymentTransactionRecord, BookingStatusEnum> PROCESS_STATUS = createField(DSL.name("process_status"), SQLDataType.VARCHAR.asEnumDataType(unid.jooqMono.model.enums.BookingStatusEnum.class), this, "");

    /**
     * The column
     * <code>public._audit_log_student_payment_transaction.reject_reason</code>.
     */
    public final TableField<_AuditLogStudentPaymentTransactionRecord, String> REJECT_REASON = createField(DSL.name("reject_reason"), SQLDataType.CLOB, this, "");

    /**
     * The column
     * <code>public._audit_log_student_payment_transaction.transaction_serial_number</code>.
     */
    public final TableField<_AuditLogStudentPaymentTransactionRecord, String> TRANSACTION_SERIAL_NUMBER = createField(DSL.name("transaction_serial_number"), SQLDataType.VARCHAR(255), this, "");

    private _AuditLogStudentPaymentTransactionTable(Name alias, Table<_AuditLogStudentPaymentTransactionRecord> aliased) {
        this(alias, aliased, null);
    }

    private _AuditLogStudentPaymentTransactionTable(Name alias, Table<_AuditLogStudentPaymentTransactionRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased
     * <code>public._audit_log_student_payment_transaction</code> table
     * reference
     */
    public _AuditLogStudentPaymentTransactionTable(String alias) {
        this(DSL.name(alias), _AUDIT_LOG_STUDENT_PAYMENT_TRANSACTION);
    }

    /**
     * Create an aliased
     * <code>public._audit_log_student_payment_transaction</code> table
     * reference
     */
    public _AuditLogStudentPaymentTransactionTable(Name alias) {
        this(alias, _AUDIT_LOG_STUDENT_PAYMENT_TRANSACTION);
    }

    /**
     * Create a <code>public._audit_log_student_payment_transaction</code> table
     * reference
     */
    public _AuditLogStudentPaymentTransactionTable() {
        this(DSL.name("_audit_log_student_payment_transaction"), null);
    }

    public <O extends Record> _AuditLogStudentPaymentTransactionTable(Table<O> child, ForeignKey<O, _AuditLogStudentPaymentTransactionRecord> key) {
        super(child, key, _AUDIT_LOG_STUDENT_PAYMENT_TRANSACTION);
    }

    @Override
    @Nonnull
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    @Nonnull
    public Identity<_AuditLogStudentPaymentTransactionRecord, Long> getIdentity() {
        return (Identity<_AuditLogStudentPaymentTransactionRecord, Long>) super.getIdentity();
    }

    @Override
    @Nonnull
    public _AuditLogStudentPaymentTransactionTable as(String alias) {
        return new _AuditLogStudentPaymentTransactionTable(DSL.name(alias), this);
    }

    @Override
    @Nonnull
    public _AuditLogStudentPaymentTransactionTable as(Name alias) {
        return new _AuditLogStudentPaymentTransactionTable(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public _AuditLogStudentPaymentTransactionTable rename(String name) {
        return new _AuditLogStudentPaymentTransactionTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public _AuditLogStudentPaymentTransactionTable rename(Name name) {
        return new _AuditLogStudentPaymentTransactionTable(name, null);
    }
}
