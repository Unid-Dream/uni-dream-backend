/*
 * This file is generated by jOOQ.
 */
package unid.jooqMono.model.tables;


import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import javax.annotation.Nonnull;
import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row21;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import unid.jooqMono.model.Keys;
import unid.jooqMono.model.Public;
import unid.jooqMono.model.enums.CurrencyEnum;
import unid.jooqMono.model.enums.PaymentMethodEnum;
import unid.jooqMono.model.enums.PaymentStatusEnum;
import unid.jooqMono.model.enums.StudentTransactionItemEnum;
import unid.jooqMono.model.tables.records.StudentPaymentTransactionRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.15.12"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class StudentPaymentTransactionTable extends TableImpl<StudentPaymentTransactionRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.student_payment_transaction</code>
     */
    public static final StudentPaymentTransactionTable STUDENT_PAYMENT_TRANSACTION = new StudentPaymentTransactionTable();

    /**
     * The class holding records for this type
     */
    @Override
    @Nonnull
    public Class<StudentPaymentTransactionRecord> getRecordType() {
        return StudentPaymentTransactionRecord.class;
    }

    /**
     * The column <code>public.student_payment_transaction.id</code>.
     */
    public final TableField<StudentPaymentTransactionRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field("gen_random_uuid()", SQLDataType.UUID)), this, "");

    /**
     * The column
     * <code>public.student_payment_transaction.student_profile_id</code>.
     */
    public final TableField<StudentPaymentTransactionRecord, UUID> STUDENT_PROFILE_ID = createField(DSL.name("student_profile_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column
     * <code>public.student_payment_transaction.transaction_amount</code>.
     */
    public final TableField<StudentPaymentTransactionRecord, BigDecimal> TRANSACTION_AMOUNT = createField(DSL.name("transaction_amount"), SQLDataType.NUMERIC.nullable(false), this, "");

    /**
     * The column
     * <code>public.student_payment_transaction.transaction_currency</code>.
     */
    public final TableField<StudentPaymentTransactionRecord, CurrencyEnum> TRANSACTION_CURRENCY = createField(DSL.name("transaction_currency"), SQLDataType.VARCHAR.nullable(false).asEnumDataType(unid.jooqMono.model.enums.CurrencyEnum.class), this, "");

    /**
     * The column
     * <code>public.student_payment_transaction.transaction_item</code>.
     */
    public final TableField<StudentPaymentTransactionRecord, StudentTransactionItemEnum> TRANSACTION_ITEM = createField(DSL.name("transaction_item"), SQLDataType.VARCHAR.nullable(false).asEnumDataType(unid.jooqMono.model.enums.StudentTransactionItemEnum.class), this, "");

    /**
     * The column
     * <code>public.student_payment_transaction.transaction_item_ref_id</code>.
     */
    public final TableField<StudentPaymentTransactionRecord, UUID> TRANSACTION_ITEM_REF_ID = createField(DSL.name("transaction_item_ref_id"), SQLDataType.UUID, this, "");

    /**
     * The column
     * <code>public.student_payment_transaction.transaction_personnel_ref_id</code>.
     */
    public final TableField<StudentPaymentTransactionRecord, UUID> TRANSACTION_PERSONNEL_REF_ID = createField(DSL.name("transaction_personnel_ref_id"), SQLDataType.UUID, this, "");

    /**
     * The column
     * <code>public.student_payment_transaction.payment_method</code>.
     */
    public final TableField<StudentPaymentTransactionRecord, PaymentMethodEnum> PAYMENT_METHOD = createField(DSL.name("payment_method"), SQLDataType.VARCHAR.asEnumDataType(unid.jooqMono.model.enums.PaymentMethodEnum.class), this, "");

    /**
     * The column
     * <code>public.student_payment_transaction.payment_status</code>.
     */
    public final TableField<StudentPaymentTransactionRecord, PaymentStatusEnum> PAYMENT_STATUS = createField(DSL.name("payment_status"), SQLDataType.VARCHAR.nullable(false).asEnumDataType(unid.jooqMono.model.enums.PaymentStatusEnum.class), this, "");

    /**
     * The column <code>public.student_payment_transaction.cod_order_ref</code>.
     */
    public final TableField<StudentPaymentTransactionRecord, String> COD_ORDER_REF = createField(DSL.name("cod_order_ref"), SQLDataType.CLOB, this, "");

    /**
     * The column
     * <code>public.student_payment_transaction.cod_out_trade_no</code>.
     */
    public final TableField<StudentPaymentTransactionRecord, String> COD_OUT_TRADE_NO = createField(DSL.name("cod_out_trade_no"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.student_payment_transaction.cod_ref_id</code>.
     */
    public final TableField<StudentPaymentTransactionRecord, String> COD_REF_ID = createField(DSL.name("cod_ref_id"), SQLDataType.CLOB, this, "");

    /**
     * The column
     * <code>public.student_payment_transaction.cod_transaction_id</code>.
     */
    public final TableField<StudentPaymentTransactionRecord, String> COD_TRANSACTION_ID = createField(DSL.name("cod_transaction_id"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.student_payment_transaction.cod_wallet</code>.
     */
    public final TableField<StudentPaymentTransactionRecord, String> COD_WALLET = createField(DSL.name("cod_wallet"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.student_payment_transaction.cod_expiry</code>.
     */
    public final TableField<StudentPaymentTransactionRecord, OffsetDateTime> COD_EXPIRY = createField(DSL.name("cod_expiry"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    /**
     * The column
     * <code>public.student_payment_transaction.cod_payment_url</code>.
     */
    public final TableField<StudentPaymentTransactionRecord, String> COD_PAYMENT_URL = createField(DSL.name("cod_payment_url"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.student_payment_transaction.created_on</code>.
     */
    public final TableField<StudentPaymentTransactionRecord, OffsetDateTime> CREATED_ON = createField(DSL.name("created_on"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    /**
     * The column <code>public.student_payment_transaction.created_by</code>.
     */
    public final TableField<StudentPaymentTransactionRecord, String> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.student_payment_transaction.updated_on</code>.
     */
    public final TableField<StudentPaymentTransactionRecord, OffsetDateTime> UPDATED_ON = createField(DSL.name("updated_on"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    /**
     * The column <code>public.student_payment_transaction.updated_by</code>.
     */
    public final TableField<StudentPaymentTransactionRecord, String> UPDATED_BY = createField(DSL.name("updated_by"), SQLDataType.CLOB, this, "");

    /**
     * The column
     * <code>public.student_payment_transaction.transaction_time_at</code>.
     */
    public final TableField<StudentPaymentTransactionRecord, LocalDateTime> TRANSACTION_TIME_AT = createField(DSL.name("transaction_time_at"), SQLDataType.LOCALDATETIME(6), this, "");

    private StudentPaymentTransactionTable(Name alias, Table<StudentPaymentTransactionRecord> aliased) {
        this(alias, aliased, null);
    }

    private StudentPaymentTransactionTable(Name alias, Table<StudentPaymentTransactionRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.student_payment_transaction</code> table
     * reference
     */
    public StudentPaymentTransactionTable(String alias) {
        this(DSL.name(alias), STUDENT_PAYMENT_TRANSACTION);
    }

    /**
     * Create an aliased <code>public.student_payment_transaction</code> table
     * reference
     */
    public StudentPaymentTransactionTable(Name alias) {
        this(alias, STUDENT_PAYMENT_TRANSACTION);
    }

    /**
     * Create a <code>public.student_payment_transaction</code> table reference
     */
    public StudentPaymentTransactionTable() {
        this(DSL.name("student_payment_transaction"), null);
    }

    public <O extends Record> StudentPaymentTransactionTable(Table<O> child, ForeignKey<O, StudentPaymentTransactionRecord> key) {
        super(child, key, STUDENT_PAYMENT_TRANSACTION);
    }

    @Override
    @Nonnull
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    @Nonnull
    public UniqueKey<StudentPaymentTransactionRecord> getPrimaryKey() {
        return Keys.STUDENT_PAYMENT_TRANSACTION_PKEY;
    }

    @Override
    @Nonnull
    public List<ForeignKey<StudentPaymentTransactionRecord, ?>> getReferences() {
        return Arrays.asList(Keys.STUDENT_PAYMENT_TRANSACTION__FK_STUD_PAYM_TRAN_STUD_PROF);
    }

    private transient StudentProfileTable _studentProfile;

    public StudentProfileTable studentProfile() {
        if (_studentProfile == null)
            _studentProfile = new StudentProfileTable(this, Keys.STUDENT_PAYMENT_TRANSACTION__FK_STUD_PAYM_TRAN_STUD_PROF);

        return _studentProfile;
    }

    @Override
    @Nonnull
    public StudentPaymentTransactionTable as(String alias) {
        return new StudentPaymentTransactionTable(DSL.name(alias), this);
    }

    @Override
    @Nonnull
    public StudentPaymentTransactionTable as(Name alias) {
        return new StudentPaymentTransactionTable(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public StudentPaymentTransactionTable rename(String name) {
        return new StudentPaymentTransactionTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public StudentPaymentTransactionTable rename(Name name) {
        return new StudentPaymentTransactionTable(name, null);
    }

    // -------------------------------------------------------------------------
    // Row21 type methods
    // -------------------------------------------------------------------------

    @Override
    @Nonnull
    public Row21<UUID, UUID, BigDecimal, CurrencyEnum, StudentTransactionItemEnum, UUID, UUID, PaymentMethodEnum, PaymentStatusEnum, String, String, String, String, String, OffsetDateTime, String, OffsetDateTime, String, OffsetDateTime, String, LocalDateTime> fieldsRow() {
        return (Row21) super.fieldsRow();
    }
}
