/*
 * This file is generated by jOOQ.
 */
package unid.jooqMono.model.tables;


import java.util.UUID;

import javax.annotation.Nonnull;
import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import unid.jooqMono.model.Keys;
import unid.jooqMono.model.Public;
import unid.jooqMono.model.enums.MilestoneOptionTypeEnum;
import unid.jooqMono.model.tables.records.StudentMilestoneOptionsRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.15.12"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class StudentMilestoneOptionsTable extends TableImpl<StudentMilestoneOptionsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.student_milestone_options</code>
     */
    public static final StudentMilestoneOptionsTable STUDENT_MILESTONE_OPTIONS = new StudentMilestoneOptionsTable();

    /**
     * The class holding records for this type
     */
    @Override
    @Nonnull
    public Class<StudentMilestoneOptionsRecord> getRecordType() {
        return StudentMilestoneOptionsRecord.class;
    }

    /**
     * The column <code>public.student_milestone_options.id</code>.
     */
    public final TableField<StudentMilestoneOptionsRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field("gen_random_uuid()", SQLDataType.UUID)), this, "");

    /**
     * The column <code>public.student_milestone_options.answer_i18n_id</code>.
     */
    public final TableField<StudentMilestoneOptionsRecord, UUID> ANSWER_I18N_ID = createField(DSL.name("answer_i18n_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.student_milestone_options.sort_id</code>.
     */
    public final TableField<StudentMilestoneOptionsRecord, Integer> SORT_ID = createField(DSL.name("sort_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column
     * <code>public.student_milestone_options.questionnaire_id</code>.
     */
    public final TableField<StudentMilestoneOptionsRecord, UUID> QUESTIONNAIRE_ID = createField(DSL.name("questionnaire_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.student_milestone_options.option_type</code>.
     */
    public final TableField<StudentMilestoneOptionsRecord, MilestoneOptionTypeEnum> OPTION_TYPE = createField(DSL.name("option_type"), SQLDataType.VARCHAR.nullable(false).asEnumDataType(unid.jooqMono.model.enums.MilestoneOptionTypeEnum.class), this, "");

    private StudentMilestoneOptionsTable(Name alias, Table<StudentMilestoneOptionsRecord> aliased) {
        this(alias, aliased, null);
    }

    private StudentMilestoneOptionsTable(Name alias, Table<StudentMilestoneOptionsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.student_milestone_options</code> table
     * reference
     */
    public StudentMilestoneOptionsTable(String alias) {
        this(DSL.name(alias), STUDENT_MILESTONE_OPTIONS);
    }

    /**
     * Create an aliased <code>public.student_milestone_options</code> table
     * reference
     */
    public StudentMilestoneOptionsTable(Name alias) {
        this(alias, STUDENT_MILESTONE_OPTIONS);
    }

    /**
     * Create a <code>public.student_milestone_options</code> table reference
     */
    public StudentMilestoneOptionsTable() {
        this(DSL.name("student_milestone_options"), null);
    }

    public <O extends Record> StudentMilestoneOptionsTable(Table<O> child, ForeignKey<O, StudentMilestoneOptionsRecord> key) {
        super(child, key, STUDENT_MILESTONE_OPTIONS);
    }

    @Override
    @Nonnull
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    @Nonnull
    public UniqueKey<StudentMilestoneOptionsRecord> getPrimaryKey() {
        return Keys.STUDENT_MILESTONE_QUESTIONNAIRE_COPY1_PKEY;
    }

    @Override
    @Nonnull
    public StudentMilestoneOptionsTable as(String alias) {
        return new StudentMilestoneOptionsTable(DSL.name(alias), this);
    }

    @Override
    @Nonnull
    public StudentMilestoneOptionsTable as(Name alias) {
        return new StudentMilestoneOptionsTable(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public StudentMilestoneOptionsTable rename(String name) {
        return new StudentMilestoneOptionsTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public StudentMilestoneOptionsTable rename(Name name) {
        return new StudentMilestoneOptionsTable(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    @Nonnull
    public Row5<UUID, UUID, Integer, UUID, MilestoneOptionTypeEnum> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
