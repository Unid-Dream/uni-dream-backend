/*
 * This file is generated by jOOQ.
 */
package unid.jooqMono.model.tables.daos;


import java.util.List;
import java.util.UUID;

import javax.annotation.Nonnull;
import javax.annotation.Nullable;
import javax.annotation.processing.Generated;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;

import unid.jooqMono.model.enums.MilestoneOptionTypeEnum;
import unid.jooqMono.model.tables.StudentMilestoneOptionsTable;
import unid.jooqMono.model.tables.pojos.StudentMilestoneOptionsPojo;
import unid.jooqMono.model.tables.records.StudentMilestoneOptionsRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.15.12"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class StudentMilestoneOptionsDao extends DAOImpl<StudentMilestoneOptionsRecord, StudentMilestoneOptionsPojo, UUID> {

    /**
     * Create a new StudentMilestoneOptionsDao without any configuration
     */
    public StudentMilestoneOptionsDao() {
        super(StudentMilestoneOptionsTable.STUDENT_MILESTONE_OPTIONS, StudentMilestoneOptionsPojo.class);
    }

    /**
     * Create a new StudentMilestoneOptionsDao with an attached configuration
     */
    public StudentMilestoneOptionsDao(Configuration configuration) {
        super(StudentMilestoneOptionsTable.STUDENT_MILESTONE_OPTIONS, StudentMilestoneOptionsPojo.class, configuration);
    }

    @Override
    @Nonnull
    public UUID getId(StudentMilestoneOptionsPojo object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<StudentMilestoneOptionsPojo> fetchRangeOfId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(StudentMilestoneOptionsTable.STUDENT_MILESTONE_OPTIONS.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    @Nonnull
    public List<StudentMilestoneOptionsPojo> fetchById(UUID... values) {
        return fetch(StudentMilestoneOptionsTable.STUDENT_MILESTONE_OPTIONS.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    @Nullable
    public StudentMilestoneOptionsPojo fetchOneById(UUID value) {
        return fetchOne(StudentMilestoneOptionsTable.STUDENT_MILESTONE_OPTIONS.ID, value);
    }

    /**
     * Fetch records that have <code>answer_i18n_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<StudentMilestoneOptionsPojo> fetchRangeOfAnswerI18nId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(StudentMilestoneOptionsTable.STUDENT_MILESTONE_OPTIONS.ANSWER_I18N_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>answer_i18n_id IN (values)</code>
     */
    @Nonnull
    public List<StudentMilestoneOptionsPojo> fetchByAnswerI18nId(UUID... values) {
        return fetch(StudentMilestoneOptionsTable.STUDENT_MILESTONE_OPTIONS.ANSWER_I18N_ID, values);
    }

    /**
     * Fetch records that have <code>sort_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<StudentMilestoneOptionsPojo> fetchRangeOfSortId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(StudentMilestoneOptionsTable.STUDENT_MILESTONE_OPTIONS.SORT_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>sort_id IN (values)</code>
     */
    @Nonnull
    public List<StudentMilestoneOptionsPojo> fetchBySortId(Integer... values) {
        return fetch(StudentMilestoneOptionsTable.STUDENT_MILESTONE_OPTIONS.SORT_ID, values);
    }

    /**
     * Fetch records that have <code>questionnaire_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<StudentMilestoneOptionsPojo> fetchRangeOfQuestionnaireId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(StudentMilestoneOptionsTable.STUDENT_MILESTONE_OPTIONS.QUESTIONNAIRE_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>questionnaire_id IN (values)</code>
     */
    @Nonnull
    public List<StudentMilestoneOptionsPojo> fetchByQuestionnaireId(UUID... values) {
        return fetch(StudentMilestoneOptionsTable.STUDENT_MILESTONE_OPTIONS.QUESTIONNAIRE_ID, values);
    }

    /**
     * Fetch records that have <code>option_type BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<StudentMilestoneOptionsPojo> fetchRangeOfOptionType(MilestoneOptionTypeEnum lowerInclusive, MilestoneOptionTypeEnum upperInclusive) {
        return fetchRange(StudentMilestoneOptionsTable.STUDENT_MILESTONE_OPTIONS.OPTION_TYPE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>option_type IN (values)</code>
     */
    @Nonnull
    public List<StudentMilestoneOptionsPojo> fetchByOptionType(MilestoneOptionTypeEnum... values) {
        return fetch(StudentMilestoneOptionsTable.STUDENT_MILESTONE_OPTIONS.OPTION_TYPE, values);
    }
}
