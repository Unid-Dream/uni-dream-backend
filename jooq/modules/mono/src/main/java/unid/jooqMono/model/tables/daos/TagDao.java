/*
 * This file is generated by jOOQ.
 */
package unid.jooqMono.model.tables.daos;


import java.time.OffsetDateTime;
import java.util.List;
import java.util.UUID;

import javax.annotation.Nonnull;
import javax.annotation.Nullable;
import javax.annotation.processing.Generated;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;

import unid.jooqMono.model.enums.TagCategoryEnum;
import unid.jooqMono.model.tables.TagTable;
import unid.jooqMono.model.tables.pojos.TagPojo;
import unid.jooqMono.model.tables.records.TagRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.15.12"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TagDao extends DAOImpl<TagRecord, TagPojo, UUID> {

    /**
     * Create a new TagDao without any configuration
     */
    public TagDao() {
        super(TagTable.TAG, TagPojo.class);
    }

    /**
     * Create a new TagDao with an attached configuration
     */
    public TagDao(Configuration configuration) {
        super(TagTable.TAG, TagPojo.class, configuration);
    }

    @Override
    @Nonnull
    public UUID getId(TagPojo object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<TagPojo> fetchRangeOfId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(TagTable.TAG.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    @Nonnull
    public List<TagPojo> fetchById(UUID... values) {
        return fetch(TagTable.TAG.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    @Nullable
    public TagPojo fetchOneById(UUID value) {
        return fetchOne(TagTable.TAG.ID, value);
    }

    /**
     * Fetch records that have <code>description_i18n_id BETWEEN lowerInclusive
     * AND upperInclusive</code>
     */
    @Nonnull
    public List<TagPojo> fetchRangeOfDescriptionI18nId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(TagTable.TAG.DESCRIPTION_I18N_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>description_i18n_id IN (values)</code>
     */
    @Nonnull
    public List<TagPojo> fetchByDescriptionI18nId(UUID... values) {
        return fetch(TagTable.TAG.DESCRIPTION_I18N_ID, values);
    }

    /**
     * Fetch a unique record that has <code>description_i18n_id = value</code>
     */
    @Nullable
    public TagPojo fetchOneByDescriptionI18nId(UUID value) {
        return fetchOne(TagTable.TAG.DESCRIPTION_I18N_ID, value);
    }

    /**
     * Fetch records that have <code>tag_category BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<TagPojo> fetchRangeOfTagCategory(TagCategoryEnum lowerInclusive, TagCategoryEnum upperInclusive) {
        return fetchRange(TagTable.TAG.TAG_CATEGORY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>tag_category IN (values)</code>
     */
    @Nonnull
    public List<TagPojo> fetchByTagCategory(TagCategoryEnum... values) {
        return fetch(TagTable.TAG.TAG_CATEGORY, values);
    }

    /**
     * Fetch records that have <code>created_on BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<TagPojo> fetchRangeOfCreatedOn(OffsetDateTime lowerInclusive, OffsetDateTime upperInclusive) {
        return fetchRange(TagTable.TAG.CREATED_ON, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>created_on IN (values)</code>
     */
    @Nonnull
    public List<TagPojo> fetchByCreatedOn(OffsetDateTime... values) {
        return fetch(TagTable.TAG.CREATED_ON, values);
    }

    /**
     * Fetch records that have <code>created_by BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<TagPojo> fetchRangeOfCreatedBy(String lowerInclusive, String upperInclusive) {
        return fetchRange(TagTable.TAG.CREATED_BY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>created_by IN (values)</code>
     */
    @Nonnull
    public List<TagPojo> fetchByCreatedBy(String... values) {
        return fetch(TagTable.TAG.CREATED_BY, values);
    }

    /**
     * Fetch records that have <code>updated_on BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<TagPojo> fetchRangeOfUpdatedOn(OffsetDateTime lowerInclusive, OffsetDateTime upperInclusive) {
        return fetchRange(TagTable.TAG.UPDATED_ON, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>updated_on IN (values)</code>
     */
    @Nonnull
    public List<TagPojo> fetchByUpdatedOn(OffsetDateTime... values) {
        return fetch(TagTable.TAG.UPDATED_ON, values);
    }

    /**
     * Fetch records that have <code>updated_by BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<TagPojo> fetchRangeOfUpdatedBy(String lowerInclusive, String upperInclusive) {
        return fetchRange(TagTable.TAG.UPDATED_BY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>updated_by IN (values)</code>
     */
    @Nonnull
    public List<TagPojo> fetchByUpdatedBy(String... values) {
        return fetch(TagTable.TAG.UPDATED_BY, values);
    }
}
