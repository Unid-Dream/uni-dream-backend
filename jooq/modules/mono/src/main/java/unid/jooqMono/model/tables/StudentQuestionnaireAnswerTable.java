/*
 * This file is generated by jOOQ.
 */
package unid.jooqMono.model.tables;


import java.math.BigDecimal;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import javax.annotation.Nonnull;
import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row11;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import unid.jooqMono.model.Keys;
import unid.jooqMono.model.Public;
import unid.jooqMono.model.enums.QuestionnaireAnswerTypeEnum;
import unid.jooqMono.model.tables.records.StudentQuestionnaireAnswerRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.15.12"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class StudentQuestionnaireAnswerTable extends TableImpl<StudentQuestionnaireAnswerRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>public.student_questionnaire_answer</code>
     */
    public static final StudentQuestionnaireAnswerTable STUDENT_QUESTIONNAIRE_ANSWER = new StudentQuestionnaireAnswerTable();

    /**
     * The class holding records for this type
     */
    @Override
    @Nonnull
    public Class<StudentQuestionnaireAnswerRecord> getRecordType() {
        return StudentQuestionnaireAnswerRecord.class;
    }

    /**
     * The column <code>public.student_questionnaire_answer.id</code>.
     */
    public final TableField<StudentQuestionnaireAnswerRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field("gen_random_uuid()", SQLDataType.UUID)), this, "");

    /**
     * The column
     * <code>public.student_questionnaire_answer.student_questionnaire_question_id</code>.
     */
    public final TableField<StudentQuestionnaireAnswerRecord, UUID> STUDENT_QUESTIONNAIRE_QUESTION_ID = createField(DSL.name("student_questionnaire_question_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.student_questionnaire_answer.order</code>.
     */
    public final TableField<StudentQuestionnaireAnswerRecord, Integer> ORDER = createField(DSL.name("order"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column
     * <code>public.student_questionnaire_answer.description_i18n_id</code>.
     */
    public final TableField<StudentQuestionnaireAnswerRecord, UUID> DESCRIPTION_I18N_ID = createField(DSL.name("description_i18n_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.student_questionnaire_answer.tag_id</code>.
     */
    public final TableField<StudentQuestionnaireAnswerRecord, UUID> TAG_ID = createField(DSL.name("tag_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.student_questionnaire_answer.score</code>.
     */
    public final TableField<StudentQuestionnaireAnswerRecord, BigDecimal> SCORE = createField(DSL.name("score"), SQLDataType.NUMERIC, this, "");

    /**
     * The column <code>public.student_questionnaire_answer.type</code>.
     */
    public final TableField<StudentQuestionnaireAnswerRecord, QuestionnaireAnswerTypeEnum> TYPE = createField(DSL.name("type"), SQLDataType.VARCHAR.nullable(false).defaultValue(DSL.field("'PROVIDED_CHOICE'::questionnaire_answer_type", SQLDataType.VARCHAR)).asEnumDataType(unid.jooqMono.model.enums.QuestionnaireAnswerTypeEnum.class), this, "");

    /**
     * The column <code>public.student_questionnaire_answer.created_on</code>.
     */
    public final TableField<StudentQuestionnaireAnswerRecord, OffsetDateTime> CREATED_ON = createField(DSL.name("created_on"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    /**
     * The column <code>public.student_questionnaire_answer.created_by</code>.
     */
    public final TableField<StudentQuestionnaireAnswerRecord, String> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.student_questionnaire_answer.updated_on</code>.
     */
    public final TableField<StudentQuestionnaireAnswerRecord, OffsetDateTime> UPDATED_ON = createField(DSL.name("updated_on"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    /**
     * The column <code>public.student_questionnaire_answer.updated_by</code>.
     */
    public final TableField<StudentQuestionnaireAnswerRecord, String> UPDATED_BY = createField(DSL.name("updated_by"), SQLDataType.CLOB, this, "");

    private StudentQuestionnaireAnswerTable(Name alias, Table<StudentQuestionnaireAnswerRecord> aliased) {
        this(alias, aliased, null);
    }

    private StudentQuestionnaireAnswerTable(Name alias, Table<StudentQuestionnaireAnswerRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.student_questionnaire_answer</code> table
     * reference
     */
    public StudentQuestionnaireAnswerTable(String alias) {
        this(DSL.name(alias), STUDENT_QUESTIONNAIRE_ANSWER);
    }

    /**
     * Create an aliased <code>public.student_questionnaire_answer</code> table
     * reference
     */
    public StudentQuestionnaireAnswerTable(Name alias) {
        this(alias, STUDENT_QUESTIONNAIRE_ANSWER);
    }

    /**
     * Create a <code>public.student_questionnaire_answer</code> table reference
     */
    public StudentQuestionnaireAnswerTable() {
        this(DSL.name("student_questionnaire_answer"), null);
    }

    public <O extends Record> StudentQuestionnaireAnswerTable(Table<O> child, ForeignKey<O, StudentQuestionnaireAnswerRecord> key) {
        super(child, key, STUDENT_QUESTIONNAIRE_ANSWER);
    }

    @Override
    @Nonnull
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    @Nonnull
    public UniqueKey<StudentQuestionnaireAnswerRecord> getPrimaryKey() {
        return Keys.STUDENT_QUESTIONNAIRE_ANSWER_PKEY;
    }

    @Override
    @Nonnull
    public List<UniqueKey<StudentQuestionnaireAnswerRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.UQ_STU_QUET_ANS_QUES, Keys.STUDENT_QUESTIONNAIRE_ANSWER_DESCRIPTION_I18N_ID_KEY);
    }

    @Override
    @Nonnull
    public List<ForeignKey<StudentQuestionnaireAnswerRecord, ?>> getReferences() {
        return Arrays.asList(Keys.STUDENT_QUESTIONNAIRE_ANSWER__FK_STU_QUET_ANS_QUET, Keys.STUDENT_QUESTIONNAIRE_ANSWER__FK_STU_QUET_ANS_DESC, Keys.STUDENT_QUESTIONNAIRE_ANSWER__FK_STU_QUET_ANS_TAG);
    }

    private transient StudentQuestionnaireQuestionTable _studentQuestionnaireQuestion;
    private transient I18nTable _i18n;
    private transient TagTable _tag;

    public StudentQuestionnaireQuestionTable studentQuestionnaireQuestion() {
        if (_studentQuestionnaireQuestion == null)
            _studentQuestionnaireQuestion = new StudentQuestionnaireQuestionTable(this, Keys.STUDENT_QUESTIONNAIRE_ANSWER__FK_STU_QUET_ANS_QUET);

        return _studentQuestionnaireQuestion;
    }

    public I18nTable i18n() {
        if (_i18n == null)
            _i18n = new I18nTable(this, Keys.STUDENT_QUESTIONNAIRE_ANSWER__FK_STU_QUET_ANS_DESC);

        return _i18n;
    }

    public TagTable tag() {
        if (_tag == null)
            _tag = new TagTable(this, Keys.STUDENT_QUESTIONNAIRE_ANSWER__FK_STU_QUET_ANS_TAG);

        return _tag;
    }

    @Override
    @Nonnull
    public StudentQuestionnaireAnswerTable as(String alias) {
        return new StudentQuestionnaireAnswerTable(DSL.name(alias), this);
    }

    @Override
    @Nonnull
    public StudentQuestionnaireAnswerTable as(Name alias) {
        return new StudentQuestionnaireAnswerTable(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public StudentQuestionnaireAnswerTable rename(String name) {
        return new StudentQuestionnaireAnswerTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public StudentQuestionnaireAnswerTable rename(Name name) {
        return new StudentQuestionnaireAnswerTable(name, null);
    }

    // -------------------------------------------------------------------------
    // Row11 type methods
    // -------------------------------------------------------------------------

    @Override
    @Nonnull
    public Row11<UUID, UUID, Integer, UUID, UUID, BigDecimal, QuestionnaireAnswerTypeEnum, OffsetDateTime, String, OffsetDateTime, String> fieldsRow() {
        return (Row11) super.fieldsRow();
    }
}
