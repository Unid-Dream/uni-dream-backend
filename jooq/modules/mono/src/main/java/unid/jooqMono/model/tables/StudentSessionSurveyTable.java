/*
 * This file is generated by jOOQ.
 */
package unid.jooqMono.model.tables;


import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import javax.annotation.Nonnull;
import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row10;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import unid.jooqMono.model.Keys;
import unid.jooqMono.model.Public;
import unid.jooqMono.model.tables.records.StudentSessionSurveyRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.15.12"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class StudentSessionSurveyTable extends TableImpl<StudentSessionSurveyRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.student_session_survey</code>
     */
    public static final StudentSessionSurveyTable STUDENT_SESSION_SURVEY = new StudentSessionSurveyTable();

    /**
     * The class holding records for this type
     */
    @Override
    @Nonnull
    public Class<StudentSessionSurveyRecord> getRecordType() {
        return StudentSessionSurveyRecord.class;
    }

    /**
     * The column <code>public.student_session_survey.id</code>.
     */
    public final TableField<StudentSessionSurveyRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.student_session_survey.version</code>.
     */
    public final TableField<StudentSessionSurveyRecord, OffsetDateTime> VERSION = createField(DSL.name("version"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field("now()", SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    /**
     * The column <code>public.student_session_survey.title_i18n_id</code>.
     */
    public final TableField<StudentSessionSurveyRecord, UUID> TITLE_I18N_ID = createField(DSL.name("title_i18n_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.student_session_survey.sub_title_i18n_id</code>.
     */
    public final TableField<StudentSessionSurveyRecord, UUID> SUB_TITLE_I18N_ID = createField(DSL.name("sub_title_i18n_id"), SQLDataType.UUID, this, "");

    /**
     * The column
     * <code>public.student_session_survey.description_i18n_id</code>.
     */
    public final TableField<StudentSessionSurveyRecord, UUID> DESCRIPTION_I18N_ID = createField(DSL.name("description_i18n_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.student_session_survey.mandatory</code>.
     */
    public final TableField<StudentSessionSurveyRecord, Boolean> MANDATORY = createField(DSL.name("mandatory"), SQLDataType.BOOLEAN.defaultValue(DSL.field("false", SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.student_session_survey.created_on</code>.
     */
    public final TableField<StudentSessionSurveyRecord, OffsetDateTime> CREATED_ON = createField(DSL.name("created_on"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    /**
     * The column <code>public.student_session_survey.created_by</code>.
     */
    public final TableField<StudentSessionSurveyRecord, String> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.student_session_survey.updated_on</code>.
     */
    public final TableField<StudentSessionSurveyRecord, OffsetDateTime> UPDATED_ON = createField(DSL.name("updated_on"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    /**
     * The column <code>public.student_session_survey.updated_by</code>.
     */
    public final TableField<StudentSessionSurveyRecord, String> UPDATED_BY = createField(DSL.name("updated_by"), SQLDataType.CLOB, this, "");

    private StudentSessionSurveyTable(Name alias, Table<StudentSessionSurveyRecord> aliased) {
        this(alias, aliased, null);
    }

    private StudentSessionSurveyTable(Name alias, Table<StudentSessionSurveyRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.student_session_survey</code> table
     * reference
     */
    public StudentSessionSurveyTable(String alias) {
        this(DSL.name(alias), STUDENT_SESSION_SURVEY);
    }

    /**
     * Create an aliased <code>public.student_session_survey</code> table
     * reference
     */
    public StudentSessionSurveyTable(Name alias) {
        this(alias, STUDENT_SESSION_SURVEY);
    }

    /**
     * Create a <code>public.student_session_survey</code> table reference
     */
    public StudentSessionSurveyTable() {
        this(DSL.name("student_session_survey"), null);
    }

    public <O extends Record> StudentSessionSurveyTable(Table<O> child, ForeignKey<O, StudentSessionSurveyRecord> key) {
        super(child, key, STUDENT_SESSION_SURVEY);
    }

    @Override
    @Nonnull
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    @Nonnull
    public UniqueKey<StudentSessionSurveyRecord> getPrimaryKey() {
        return Keys.STUDENT_SESSION_SURVEY_PKEY;
    }

    @Override
    @Nonnull
    public List<UniqueKey<StudentSessionSurveyRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.STUDENT_SESSION_SURVEY_TITLE_I18N_ID_KEY, Keys.STUDENT_SESSION_SURVEY_SUB_TITLE_I18N_ID_KEY, Keys.STUDENT_SESSION_SURVEY_DESCRIPTION_I18N_ID_KEY);
    }

    @Override
    @Nonnull
    public List<ForeignKey<StudentSessionSurveyRecord, ?>> getReferences() {
        return Arrays.asList(Keys.STUDENT_SESSION_SURVEY__FK_STUD_SESS_SURV_TITL, Keys.STUDENT_SESSION_SURVEY__FK_STUD_SESS_SURV_SUB_TITL, Keys.STUDENT_SESSION_SURVEY__FK_STUD_SESS_SURV_DESC);
    }

    private transient I18nTable _fkStudSessSurvTitl;
    private transient I18nTable _fkStudSessSurvSubTitl;
    private transient I18nTable _fkStudSessSurvDesc;

    public I18nTable fkStudSessSurvTitl() {
        if (_fkStudSessSurvTitl == null)
            _fkStudSessSurvTitl = new I18nTable(this, Keys.STUDENT_SESSION_SURVEY__FK_STUD_SESS_SURV_TITL);

        return _fkStudSessSurvTitl;
    }

    public I18nTable fkStudSessSurvSubTitl() {
        if (_fkStudSessSurvSubTitl == null)
            _fkStudSessSurvSubTitl = new I18nTable(this, Keys.STUDENT_SESSION_SURVEY__FK_STUD_SESS_SURV_SUB_TITL);

        return _fkStudSessSurvSubTitl;
    }

    public I18nTable fkStudSessSurvDesc() {
        if (_fkStudSessSurvDesc == null)
            _fkStudSessSurvDesc = new I18nTable(this, Keys.STUDENT_SESSION_SURVEY__FK_STUD_SESS_SURV_DESC);

        return _fkStudSessSurvDesc;
    }

    @Override
    @Nonnull
    public StudentSessionSurveyTable as(String alias) {
        return new StudentSessionSurveyTable(DSL.name(alias), this);
    }

    @Override
    @Nonnull
    public StudentSessionSurveyTable as(Name alias) {
        return new StudentSessionSurveyTable(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public StudentSessionSurveyTable rename(String name) {
        return new StudentSessionSurveyTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public StudentSessionSurveyTable rename(Name name) {
        return new StudentSessionSurveyTable(name, null);
    }

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------

    @Override
    @Nonnull
    public Row10<UUID, OffsetDateTime, UUID, UUID, UUID, Boolean, OffsetDateTime, String, OffsetDateTime, String> fieldsRow() {
        return (Row10) super.fieldsRow();
    }
}
