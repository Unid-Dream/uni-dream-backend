/*
 * This file is generated by jOOQ.
 */
package unid.jooqMono.model.tables;


import java.math.BigDecimal;
import java.time.LocalDate;
import java.time.LocalTime;
import java.util.UUID;

import javax.annotation.Nonnull;
import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.JSON;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row13;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import unid.jooqMono.model.Public;
import unid.jooqMono.model.tables.records.ViewLearningHubRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.15.12"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ViewLearningHubTable extends TableImpl<ViewLearningHubRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.view_learning_hub</code>
     */
    public static final ViewLearningHubTable VIEW_LEARNING_HUB = new ViewLearningHubTable();

    /**
     * The class holding records for this type
     */
    @Override
    @Nonnull
    public Class<ViewLearningHubRecord> getRecordType() {
        return ViewLearningHubRecord.class;
    }

    /**
     * The column <code>public.view_learning_hub.id</code>.
     */
    public final TableField<ViewLearningHubRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.view_learning_hub.title_i18n</code>.
     */
    public final TableField<ViewLearningHubRecord, JSON> TITLE_I18N = createField(DSL.name("title_i18n"), SQLDataType.JSON, this, "");

    /**
     * The column <code>public.view_learning_hub.description_i18n</code>.
     */
    public final TableField<ViewLearningHubRecord, JSON> DESCRIPTION_I18N = createField(DSL.name("description_i18n"), SQLDataType.JSON, this, "");

    /**
     * The column <code>public.view_learning_hub.end_date</code>.
     */
    public final TableField<ViewLearningHubRecord, LocalDate> END_DATE = createField(DSL.name("end_date"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>public.view_learning_hub.start_date</code>.
     */
    public final TableField<ViewLearningHubRecord, LocalDate> START_DATE = createField(DSL.name("start_date"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>public.view_learning_hub.start_time</code>.
     */
    public final TableField<ViewLearningHubRecord, LocalTime> START_TIME = createField(DSL.name("start_time"), SQLDataType.LOCALTIME(6), this, "");

    /**
     * The column <code>public.view_learning_hub.end_time</code>.
     */
    public final TableField<ViewLearningHubRecord, LocalTime> END_TIME = createField(DSL.name("end_time"), SQLDataType.LOCALTIME(6), this, "");

    /**
     * The column <code>public.view_learning_hub.max_number_of_student</code>.
     */
    public final TableField<ViewLearningHubRecord, BigDecimal> MAX_NUMBER_OF_STUDENT = createField(DSL.name("max_number_of_student"), SQLDataType.NUMERIC, this, "");

    /**
     * The column <code>public.view_learning_hub.price</code>.
     */
    public final TableField<ViewLearningHubRecord, BigDecimal> PRICE = createField(DSL.name("price"), SQLDataType.NUMERIC, this, "");

    /**
     * The column <code>public.view_learning_hub.poster_image</code>.
     */
    public final TableField<ViewLearningHubRecord, String> POSTER_IMAGE = createField(DSL.name("poster_image"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.view_learning_hub.educator</code>.
     */
    public final TableField<ViewLearningHubRecord, JSON> EDUCATOR = createField(DSL.name("educator"), SQLDataType.JSON, this, "");

    /**
     * The column <code>public.view_learning_hub.academic_major</code>.
     */
    public final TableField<ViewLearningHubRecord, JSON> ACADEMIC_MAJOR = createField(DSL.name("academic_major"), SQLDataType.JSON, this, "");

    /**
     * The column <code>public.view_learning_hub.event_id</code>.
     */
    public final TableField<ViewLearningHubRecord, UUID> EVENT_ID = createField(DSL.name("event_id"), SQLDataType.UUID, this, "");

    private ViewLearningHubTable(Name alias, Table<ViewLearningHubRecord> aliased) {
        this(alias, aliased, null);
    }

    private ViewLearningHubTable(Name alias, Table<ViewLearningHubRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.view("create view \"view_learning_hub\" as  SELECT course.id,\n    ( SELECT json_build_object('english', i18n.english, 'chinese_simplified', i18n.chinese_simplified, 'chinese_traditional', i18n.chinese_traditional) AS json_build_object\n           FROM i18n,\n            course course_1\n          WHERE (course_1.title_i18n_id = i18n.id)) AS title_i18n,\n    ( SELECT json_build_object('english', i18n.english, 'chinese_simplified', i18n.chinese_simplified, 'chinese_traditional', i18n.chinese_traditional) AS json_build_object\n           FROM i18n,\n            course course_1\n          WHERE (course_1.description_i18n_id = i18n.id)) AS description_i18n,\n    event.end_date,\n    event.start_date,\n    event.start_time,\n    event.end_time,\n    event.max_number_of_student,\n    event.price,\n    event.poster_image,\n    json_build_object('first_name_i18n', ( SELECT json_build_object('english', i18n.english, 'chinese_simplified', i18n.chinese_simplified, 'chinese_traditional', i18n.chinese_traditional) AS json_build_object\n           FROM i18n\n          WHERE (i18n.id = \"user\".fist_name_i18n_id)), 'last_name_i18n', ( SELECT json_build_object('english', i18n.english, 'chinese_simplified', i18n.chinese_simplified, 'chinese_traditional', i18n.chinese_traditional) AS json_build_object\n           FROM i18n\n          WHERE (i18n.id = \"user\".last_name_i18n_id)), 'head_img', educator_profile.profile_picture, 'schools', json_build_array('Havard University'), 'languages', ( SELECT json_agg(json_build_object('english', i18n.english, 'chinese_simplified', i18n.chinese_simplified, 'chinese_traditional', i18n.chinese_traditional)) AS json_agg\n           FROM i18n,\n            tag\n          WHERE ((tag.id = ANY (educator_profile_extension.language_id)) AND (i18n.id = tag.description_i18n_id))), 'country', ( SELECT json_build_object('english', i18n.english, 'chinese_simplified', i18n.chinese_simplified, 'chinese_traditional', i18n.chinese_traditional) AS json_build_object\n           FROM i18n,\n            tag\n          WHERE ((tag.id = educator_profile_extension.country_id) AND (i18n.id = tag.description_i18n_id))), 'expertises', ( SELECT json_agg(json_build_object('english', i18n.english, 'chinese_simplified', i18n.chinese_simplified, 'chinese_traditional', i18n.chinese_traditional)) AS json_agg\n           FROM i18n,\n            tag\n          WHERE ((i18n.id = tag.description_i18n_id) AND (tag.id = ANY (educator_profile_extension.expertise_id)))), 'description', educator_profile_extension.description) AS educator,\n    json_build_object('title_i18n', ( SELECT json_build_object('english', i18n.english, 'chinese_simplified', i18n.chinese_simplified, 'chinese_traditional', i18n.chinese_traditional) AS json_build_object\n           FROM i18n,\n            academic_major\n          WHERE ((academic_major.description_i18n_id = i18n.id) AND (academic_major.id = course.academic_major_id))), 'subjects', ( SELECT json_agg(json_build_object('english', i18n.english, 'chinese_simplified', i18n.chinese_simplified, 'chinese_traditional', i18n.chinese_traditional)) AS json_agg\n           FROM i18n,\n            academic_subject,\n            academic_major_subject_map\n          WHERE ((i18n.id = academic_subject.title_i18n_id) AND (academic_major_subject_map.academic_subject_id = academic_subject.id) AND (academic_major_subject_map.academic_major_id = course.academic_major_id)))) AS academic_major,\n    event.id AS event_id\n   FROM course,\n    course_event,\n    event,\n    event_extension,\n    educator_profile,\n    \"user\",\n    educator_profile_extension\n  WHERE ((course.id = course_event.course_id) AND (course_event.event_id = event.id) AND (event_extension.event_id = event.id) AND (educator_profile.id = event_extension.educator_profile_id) AND (\"user\".id = educator_profile.user_id) AND (educator_profile_extension.educator_profile_id = educator_profile.id));"));
    }

    /**
     * Create an aliased <code>public.view_learning_hub</code> table reference
     */
    public ViewLearningHubTable(String alias) {
        this(DSL.name(alias), VIEW_LEARNING_HUB);
    }

    /**
     * Create an aliased <code>public.view_learning_hub</code> table reference
     */
    public ViewLearningHubTable(Name alias) {
        this(alias, VIEW_LEARNING_HUB);
    }

    /**
     * Create a <code>public.view_learning_hub</code> table reference
     */
    public ViewLearningHubTable() {
        this(DSL.name("view_learning_hub"), null);
    }

    public <O extends Record> ViewLearningHubTable(Table<O> child, ForeignKey<O, ViewLearningHubRecord> key) {
        super(child, key, VIEW_LEARNING_HUB);
    }

    @Override
    @Nonnull
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    @Nonnull
    public ViewLearningHubTable as(String alias) {
        return new ViewLearningHubTable(DSL.name(alias), this);
    }

    @Override
    @Nonnull
    public ViewLearningHubTable as(Name alias) {
        return new ViewLearningHubTable(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public ViewLearningHubTable rename(String name) {
        return new ViewLearningHubTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public ViewLearningHubTable rename(Name name) {
        return new ViewLearningHubTable(name, null);
    }

    // -------------------------------------------------------------------------
    // Row13 type methods
    // -------------------------------------------------------------------------

    @Override
    @Nonnull
    public Row13<UUID, JSON, JSON, LocalDate, LocalDate, LocalTime, LocalTime, BigDecimal, BigDecimal, String, JSON, JSON, UUID> fieldsRow() {
        return (Row13) super.fieldsRow();
    }
}
