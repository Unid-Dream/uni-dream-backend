/*
 * This file is generated by jOOQ.
 */
package unid.jooqMono.model.tables.daos;


import java.time.OffsetDateTime;
import java.util.List;
import java.util.UUID;

import javax.annotation.Nonnull;
import javax.annotation.Nullable;
import javax.annotation.processing.Generated;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;

import unid.jooqMono.model.enums.SchoolLevelEnum;
import unid.jooqMono.model.tables.SchoolTable;
import unid.jooqMono.model.tables.pojos.SchoolPojo;
import unid.jooqMono.model.tables.records.SchoolRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.15.12"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SchoolDao extends DAOImpl<SchoolRecord, SchoolPojo, UUID> {

    /**
     * Create a new SchoolDao without any configuration
     */
    public SchoolDao() {
        super(SchoolTable.SCHOOL, SchoolPojo.class);
    }

    /**
     * Create a new SchoolDao with an attached configuration
     */
    public SchoolDao(Configuration configuration) {
        super(SchoolTable.SCHOOL, SchoolPojo.class, configuration);
    }

    @Override
    @Nonnull
    public UUID getId(SchoolPojo object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<SchoolPojo> fetchRangeOfId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(SchoolTable.SCHOOL.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    @Nonnull
    public List<SchoolPojo> fetchById(UUID... values) {
        return fetch(SchoolTable.SCHOOL.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    @Nullable
    public SchoolPojo fetchOneById(UUID value) {
        return fetchOne(SchoolTable.SCHOOL.ID, value);
    }

    /**
     * Fetch records that have <code>school_level BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<SchoolPojo> fetchRangeOfSchoolLevel(SchoolLevelEnum lowerInclusive, SchoolLevelEnum upperInclusive) {
        return fetchRange(SchoolTable.SCHOOL.SCHOOL_LEVEL, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>school_level IN (values)</code>
     */
    @Nonnull
    public List<SchoolPojo> fetchBySchoolLevel(SchoolLevelEnum... values) {
        return fetch(SchoolTable.SCHOOL.SCHOOL_LEVEL, values);
    }

    /**
     * Fetch records that have <code>name_i18n_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<SchoolPojo> fetchRangeOfNameI18nId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(SchoolTable.SCHOOL.NAME_I18N_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>name_i18n_id IN (values)</code>
     */
    @Nonnull
    public List<SchoolPojo> fetchByNameI18nId(UUID... values) {
        return fetch(SchoolTable.SCHOOL.NAME_I18N_ID, values);
    }

    /**
     * Fetch a unique record that has <code>name_i18n_id = value</code>
     */
    @Nullable
    public SchoolPojo fetchOneByNameI18nId(UUID value) {
        return fetchOne(SchoolTable.SCHOOL.NAME_I18N_ID, value);
    }

    /**
     * Fetch records that have <code>country_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<SchoolPojo> fetchRangeOfCountryId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(SchoolTable.SCHOOL.COUNTRY_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>country_id IN (values)</code>
     */
    @Nonnull
    public List<SchoolPojo> fetchByCountryId(UUID... values) {
        return fetch(SchoolTable.SCHOOL.COUNTRY_ID, values);
    }

    /**
     * Fetch records that have <code>city_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<SchoolPojo> fetchRangeOfCityId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(SchoolTable.SCHOOL.CITY_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>city_id IN (values)</code>
     */
    @Nonnull
    public List<SchoolPojo> fetchByCityId(UUID... values) {
        return fetch(SchoolTable.SCHOOL.CITY_ID, values);
    }

    /**
     * Fetch records that have <code>longitude BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<SchoolPojo> fetchRangeOfLongitude(String lowerInclusive, String upperInclusive) {
        return fetchRange(SchoolTable.SCHOOL.LONGITUDE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>longitude IN (values)</code>
     */
    @Nonnull
    public List<SchoolPojo> fetchByLongitude(String... values) {
        return fetch(SchoolTable.SCHOOL.LONGITUDE, values);
    }

    /**
     * Fetch records that have <code>latitude BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<SchoolPojo> fetchRangeOfLatitude(String lowerInclusive, String upperInclusive) {
        return fetchRange(SchoolTable.SCHOOL.LATITUDE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>latitude IN (values)</code>
     */
    @Nonnull
    public List<SchoolPojo> fetchByLatitude(String... values) {
        return fetch(SchoolTable.SCHOOL.LATITUDE, values);
    }

    /**
     * Fetch records that have <code>detailed_address_i18n_id BETWEEN
     * lowerInclusive AND upperInclusive</code>
     */
    @Nonnull
    public List<SchoolPojo> fetchRangeOfDetailedAddressI18nId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(SchoolTable.SCHOOL.DETAILED_ADDRESS_I18N_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>detailed_address_i18n_id IN (values)</code>
     */
    @Nonnull
    public List<SchoolPojo> fetchByDetailedAddressI18nId(UUID... values) {
        return fetch(SchoolTable.SCHOOL.DETAILED_ADDRESS_I18N_ID, values);
    }

    /**
     * Fetch records that have <code>tag_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<SchoolPojo> fetchRangeOfTagId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(SchoolTable.SCHOOL.TAG_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>tag_id IN (values)</code>
     */
    @Nonnull
    public List<SchoolPojo> fetchByTagId(UUID... values) {
        return fetch(SchoolTable.SCHOOL.TAG_ID, values);
    }

    /**
     * Fetch records that have <code>created_on BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<SchoolPojo> fetchRangeOfCreatedOn(OffsetDateTime lowerInclusive, OffsetDateTime upperInclusive) {
        return fetchRange(SchoolTable.SCHOOL.CREATED_ON, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>created_on IN (values)</code>
     */
    @Nonnull
    public List<SchoolPojo> fetchByCreatedOn(OffsetDateTime... values) {
        return fetch(SchoolTable.SCHOOL.CREATED_ON, values);
    }

    /**
     * Fetch records that have <code>created_by BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<SchoolPojo> fetchRangeOfCreatedBy(String lowerInclusive, String upperInclusive) {
        return fetchRange(SchoolTable.SCHOOL.CREATED_BY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>created_by IN (values)</code>
     */
    @Nonnull
    public List<SchoolPojo> fetchByCreatedBy(String... values) {
        return fetch(SchoolTable.SCHOOL.CREATED_BY, values);
    }

    /**
     * Fetch records that have <code>updated_on BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<SchoolPojo> fetchRangeOfUpdatedOn(OffsetDateTime lowerInclusive, OffsetDateTime upperInclusive) {
        return fetchRange(SchoolTable.SCHOOL.UPDATED_ON, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>updated_on IN (values)</code>
     */
    @Nonnull
    public List<SchoolPojo> fetchByUpdatedOn(OffsetDateTime... values) {
        return fetch(SchoolTable.SCHOOL.UPDATED_ON, values);
    }

    /**
     * Fetch records that have <code>updated_by BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<SchoolPojo> fetchRangeOfUpdatedBy(String lowerInclusive, String upperInclusive) {
        return fetchRange(SchoolTable.SCHOOL.UPDATED_BY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>updated_by IN (values)</code>
     */
    @Nonnull
    public List<SchoolPojo> fetchByUpdatedBy(String... values) {
        return fetch(SchoolTable.SCHOOL.UPDATED_BY, values);
    }
}
