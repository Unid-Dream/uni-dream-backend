/*
 * This file is generated by jOOQ.
 */
package unid.jooqMono.model.tables;


import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import javax.annotation.Nonnull;
import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import unid.jooqMono.model.Keys;
import unid.jooqMono.model.Public;
import unid.jooqMono.model.tables.records.SchoolIdentityRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.15.12"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SchoolIdentityTable extends TableImpl<SchoolIdentityRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.school_identity</code>
     */
    public static final SchoolIdentityTable SCHOOL_IDENTITY = new SchoolIdentityTable();

    /**
     * The class holding records for this type
     */
    @Override
    @Nonnull
    public Class<SchoolIdentityRecord> getRecordType() {
        return SchoolIdentityRecord.class;
    }

    /**
     * The column <code>public.school_identity.id</code>.
     */
    public final TableField<SchoolIdentityRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field("gen_random_uuid()", SQLDataType.UUID)), this, "");

    /**
     * The column <code>public.school_identity.name_i18n_id</code>.
     */
    public final TableField<SchoolIdentityRecord, UUID> NAME_I18N_ID = createField(DSL.name("name_i18n_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.school_identity.created_on</code>.
     */
    public final TableField<SchoolIdentityRecord, OffsetDateTime> CREATED_ON = createField(DSL.name("created_on"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    /**
     * The column <code>public.school_identity.created_by</code>.
     */
    public final TableField<SchoolIdentityRecord, String> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.school_identity.updated_on</code>.
     */
    public final TableField<SchoolIdentityRecord, OffsetDateTime> UPDATED_ON = createField(DSL.name("updated_on"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    /**
     * The column <code>public.school_identity.updated_by</code>.
     */
    public final TableField<SchoolIdentityRecord, String> UPDATED_BY = createField(DSL.name("updated_by"), SQLDataType.CLOB, this, "");

    private SchoolIdentityTable(Name alias, Table<SchoolIdentityRecord> aliased) {
        this(alias, aliased, null);
    }

    private SchoolIdentityTable(Name alias, Table<SchoolIdentityRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.school_identity</code> table reference
     */
    public SchoolIdentityTable(String alias) {
        this(DSL.name(alias), SCHOOL_IDENTITY);
    }

    /**
     * Create an aliased <code>public.school_identity</code> table reference
     */
    public SchoolIdentityTable(Name alias) {
        this(alias, SCHOOL_IDENTITY);
    }

    /**
     * Create a <code>public.school_identity</code> table reference
     */
    public SchoolIdentityTable() {
        this(DSL.name("school_identity"), null);
    }

    public <O extends Record> SchoolIdentityTable(Table<O> child, ForeignKey<O, SchoolIdentityRecord> key) {
        super(child, key, SCHOOL_IDENTITY);
    }

    @Override
    @Nonnull
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    @Nonnull
    public UniqueKey<SchoolIdentityRecord> getPrimaryKey() {
        return Keys.SCHOOL_IDENTITY_PKEY;
    }

    @Override
    @Nonnull
    public List<UniqueKey<SchoolIdentityRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.SCHOOL_IDENTITY_NAME_I18N_ID_KEY);
    }

    @Override
    @Nonnull
    public List<ForeignKey<SchoolIdentityRecord, ?>> getReferences() {
        return Arrays.asList(Keys.SCHOOL_IDENTITY__FK_SCHL_IDTY_NAME);
    }

    private transient I18nTable _i18n;

    public I18nTable i18n() {
        if (_i18n == null)
            _i18n = new I18nTable(this, Keys.SCHOOL_IDENTITY__FK_SCHL_IDTY_NAME);

        return _i18n;
    }

    @Override
    @Nonnull
    public SchoolIdentityTable as(String alias) {
        return new SchoolIdentityTable(DSL.name(alias), this);
    }

    @Override
    @Nonnull
    public SchoolIdentityTable as(Name alias) {
        return new SchoolIdentityTable(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public SchoolIdentityTable rename(String name) {
        return new SchoolIdentityTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public SchoolIdentityTable rename(Name name) {
        return new SchoolIdentityTable(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    @Nonnull
    public Row6<UUID, UUID, OffsetDateTime, String, OffsetDateTime, String> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
