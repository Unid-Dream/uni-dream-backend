/*
 * This file is generated by jOOQ.
 */
package unid.jooqMono.model.tables.records;


import java.beans.ConstructorProperties;
import java.util.UUID;

import javax.annotation.Nonnull;
import javax.annotation.Nullable;
import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.JSONB;
import org.jooq.Record1;
import org.jooq.Record2;
import org.jooq.Row2;
import org.jooq.impl.UpdatableRecordImpl;

import unid.jooqMono.model.tables.StudentMilestoneTable;
import unid.jooqMono.model.tables.pojos.StudentMilestonePojo;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.15.12"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@lombok.experimental.FieldNameConstants(innerTypeName = "Columns")
public class StudentMilestoneRecord extends UpdatableRecordImpl<StudentMilestoneRecord> implements Record2<UUID, JSONB> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.student_milestone.id</code>.
     */
    public StudentMilestoneRecord setId(@Nonnull UUID value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>public.student_milestone.id</code>.
     */
    @Nonnull
    public UUID getId() {
        return (UUID) get(0);
    }

    /**
     * Setter for <code>public.student_milestone.questionnaire</code>.
     */
    public StudentMilestoneRecord setQuestionnaire(@Nullable JSONB value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>public.student_milestone.questionnaire</code>.
     */
    @Nullable
    public JSONB getQuestionnaire() {
        return (JSONB) get(1);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    @Nonnull
    public Record1<UUID> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    @Override
    @Nonnull
    public Row2<UUID, JSONB> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    @Override
    @Nonnull
    public Row2<UUID, JSONB> valuesRow() {
        return (Row2) super.valuesRow();
    }

    @Override
    @Nonnull
    public Field<UUID> field1() {
        return StudentMilestoneTable.STUDENT_MILESTONE.ID;
    }

    @Override
    @Nonnull
    public Field<JSONB> field2() {
        return StudentMilestoneTable.STUDENT_MILESTONE.QUESTIONNAIRE;
    }

    @Override
    @Nonnull
    public UUID component1() {
        return getId();
    }

    @Override
    @Nullable
    public JSONB component2() {
        return getQuestionnaire();
    }

    @Override
    @Nonnull
    public UUID value1() {
        return getId();
    }

    @Override
    @Nullable
    public JSONB value2() {
        return getQuestionnaire();
    }

    @Override
    @Nonnull
    public StudentMilestoneRecord value1(@Nonnull UUID value) {
        setId(value);
        return this;
    }

    @Override
    @Nonnull
    public StudentMilestoneRecord value2(@Nullable JSONB value) {
        setQuestionnaire(value);
        return this;
    }

    @Override
    @Nonnull
    public StudentMilestoneRecord values(@Nonnull UUID value1, @Nullable JSONB value2) {
        value1(value1);
        value2(value2);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached StudentMilestoneRecord
     */
    public StudentMilestoneRecord() {
        super(StudentMilestoneTable.STUDENT_MILESTONE);
    }

    /**
     * Create a detached, initialised StudentMilestoneRecord
     */
    @ConstructorProperties({ "id", "questionnaire" })
    public StudentMilestoneRecord(@Nonnull UUID id, @Nullable JSONB questionnaire) {
        super(StudentMilestoneTable.STUDENT_MILESTONE);

        setId(id);
        setQuestionnaire(questionnaire);
    }

    /**
     * Create a detached, initialised StudentMilestoneRecord
     */
    public StudentMilestoneRecord(StudentMilestonePojo value) {
        super(StudentMilestoneTable.STUDENT_MILESTONE);

        if (value != null) {
            setId(value.getId());
            setQuestionnaire(value.getQuestionnaire());
        }
    }
}
