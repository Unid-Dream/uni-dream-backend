/*
 * This file is generated by jOOQ.
 */
package unid.jooqMono.model.tables;


import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import javax.annotation.Nonnull;
import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row21;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import unid.jooqMono.model.Keys;
import unid.jooqMono.model.Public;
import unid.jooqMono.model.enums.GenderEnum;
import unid.jooqMono.model.tables.records.StudentProfileRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.15.12"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class StudentProfileTable extends TableImpl<StudentProfileRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.student_profile</code>
     */
    public static final StudentProfileTable STUDENT_PROFILE = new StudentProfileTable();

    /**
     * The class holding records for this type
     */
    @Override
    @Nonnull
    public Class<StudentProfileRecord> getRecordType() {
        return StudentProfileRecord.class;
    }

    /**
     * The column <code>public.student_profile.id</code>.
     */
    public final TableField<StudentProfileRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field("gen_random_uuid()", SQLDataType.UUID)), this, "");

    /**
     * The column <code>public.student_profile.user_id</code>.
     */
    public final TableField<StudentProfileRecord, UUID> USER_ID = createField(DSL.name("user_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.student_profile.date_of_birth</code>.
     */
    public final TableField<StudentProfileRecord, LocalDate> DATE_OF_BIRTH = createField(DSL.name("date_of_birth"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>public.student_profile.gender</code>.
     */
    public final TableField<StudentProfileRecord, GenderEnum> GENDER = createField(DSL.name("gender"), SQLDataType.VARCHAR.asEnumDataType(unid.jooqMono.model.enums.GenderEnum.class), this, "");

    /**
     * The column <code>public.student_profile.country_id</code>.
     */
    public final TableField<StudentProfileRecord, UUID> COUNTRY_ID = createField(DSL.name("country_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.student_profile.profile_picture</code>.
     */
    public final TableField<StudentProfileRecord, String> PROFILE_PICTURE = createField(DSL.name("profile_picture"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.student_profile.phone_country_code</code>.
     */
    public final TableField<StudentProfileRecord, String> PHONE_COUNTRY_CODE = createField(DSL.name("phone_country_code"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.student_profile.phone</code>.
     */
    public final TableField<StudentProfileRecord, String> PHONE = createField(DSL.name("phone"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.student_profile.secondary_school_id</code>.
     */
    public final TableField<StudentProfileRecord, UUID> SECONDARY_SCHOOL_ID = createField(DSL.name("secondary_school_id"), SQLDataType.UUID, this, "");

    /**
     * The column
     * <code>public.student_profile.secondary_school_education_level_id</code>.
     */
    public final TableField<StudentProfileRecord, UUID> SECONDARY_SCHOOL_EDUCATION_LEVEL_ID = createField(DSL.name("secondary_school_education_level_id"), SQLDataType.UUID, this, "");

    /**
     * The column
     * <code>public.student_profile.secondary_school_curriculum_id</code>.
     */
    public final TableField<StudentProfileRecord, UUID> SECONDARY_SCHOOL_CURRICULUM_ID = createField(DSL.name("secondary_school_curriculum_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.student_profile.preferred_university_1_id</code>.
     */
    public final TableField<StudentProfileRecord, UUID> PREFERRED_UNIVERSITY_1_ID = createField(DSL.name("preferred_university_1_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.student_profile.preferred_university_2_id</code>.
     */
    public final TableField<StudentProfileRecord, UUID> PREFERRED_UNIVERSITY_2_ID = createField(DSL.name("preferred_university_2_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.student_profile.preferred_university_3_id</code>.
     */
    public final TableField<StudentProfileRecord, UUID> PREFERRED_UNIVERSITY_3_ID = createField(DSL.name("preferred_university_3_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.student_profile.created_on</code>.
     */
    public final TableField<StudentProfileRecord, OffsetDateTime> CREATED_ON = createField(DSL.name("created_on"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    /**
     * The column <code>public.student_profile.created_by</code>.
     */
    public final TableField<StudentProfileRecord, String> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.student_profile.updated_on</code>.
     */
    public final TableField<StudentProfileRecord, OffsetDateTime> UPDATED_ON = createField(DSL.name("updated_on"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    /**
     * The column <code>public.student_profile.updated_by</code>.
     */
    public final TableField<StudentProfileRecord, String> UPDATED_BY = createField(DSL.name("updated_by"), SQLDataType.CLOB, this, "");

    /**
     * The column
     * <code>public.student_profile.preferred_other_university_id</code>.
     */
    public final TableField<StudentProfileRecord, UUID[]> PREFERRED_OTHER_UNIVERSITY_ID = createField(DSL.name("preferred_other_university_id"), SQLDataType.UUID.getArrayDataType(), this, "");

    /**
     * The column
     * <code>public.student_profile.secondary_school_graduation_year</code>.
     */
    public final TableField<StudentProfileRecord, String> SECONDARY_SCHOOL_GRADUATION_YEAR = createField(DSL.name("secondary_school_graduation_year"), SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>public.student_profile.timezone</code>.
     */
    public final TableField<StudentProfileRecord, String> TIMEZONE = createField(DSL.name("timezone"), SQLDataType.VARCHAR(255), this, "");

    private StudentProfileTable(Name alias, Table<StudentProfileRecord> aliased) {
        this(alias, aliased, null);
    }

    private StudentProfileTable(Name alias, Table<StudentProfileRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.student_profile</code> table reference
     */
    public StudentProfileTable(String alias) {
        this(DSL.name(alias), STUDENT_PROFILE);
    }

    /**
     * Create an aliased <code>public.student_profile</code> table reference
     */
    public StudentProfileTable(Name alias) {
        this(alias, STUDENT_PROFILE);
    }

    /**
     * Create a <code>public.student_profile</code> table reference
     */
    public StudentProfileTable() {
        this(DSL.name("student_profile"), null);
    }

    public <O extends Record> StudentProfileTable(Table<O> child, ForeignKey<O, StudentProfileRecord> key) {
        super(child, key, STUDENT_PROFILE);
    }

    @Override
    @Nonnull
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    @Nonnull
    public UniqueKey<StudentProfileRecord> getPrimaryKey() {
        return Keys.STUDENT_PROFILE_PKEY;
    }

    @Override
    @Nonnull
    public List<UniqueKey<StudentProfileRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.STUDENT_PROFILE_USER_ID_KEY);
    }

    @Override
    @Nonnull
    public List<ForeignKey<StudentProfileRecord, ?>> getReferences() {
        return Arrays.asList(Keys.STUDENT_PROFILE__FK_STUD_PROF_USER, Keys.STUDENT_PROFILE__FK_STUD_PROF_COUT, Keys.STUDENT_PROFILE__FK_STUD_PROF_SECD_SCHL, Keys.STUDENT_PROFILE__FK_STUD_PROF_SECD_SCHL_EDU_LEVL, Keys.STUDENT_PROFILE__FK_STUD_PROF_SECD_SCHL_CRCU, Keys.STUDENT_PROFILE__FK_STUD_PROF_PREF_UNIY_1, Keys.STUDENT_PROFILE__FK_STUD_PROF_PREF_UNIY_2, Keys.STUDENT_PROFILE__FK_STUD_PROF_PREF_UNIY_3);
    }

    private transient UserTable _user;
    private transient CountryTable _country;
    private transient SchoolTable _fkStudProfSecdSchl;
    private transient EducationLevelTable _educationLevel;
    private transient CurriculumTable _curriculum;
    private transient SchoolTable _fkStudProfPrefUniy_1;
    private transient SchoolTable _fkStudProfPrefUniy_2;
    private transient SchoolTable _fkStudProfPrefUniy_3;

    public UserTable user() {
        if (_user == null)
            _user = new UserTable(this, Keys.STUDENT_PROFILE__FK_STUD_PROF_USER);

        return _user;
    }

    public CountryTable country() {
        if (_country == null)
            _country = new CountryTable(this, Keys.STUDENT_PROFILE__FK_STUD_PROF_COUT);

        return _country;
    }

    public SchoolTable fkStudProfSecdSchl() {
        if (_fkStudProfSecdSchl == null)
            _fkStudProfSecdSchl = new SchoolTable(this, Keys.STUDENT_PROFILE__FK_STUD_PROF_SECD_SCHL);

        return _fkStudProfSecdSchl;
    }

    public EducationLevelTable educationLevel() {
        if (_educationLevel == null)
            _educationLevel = new EducationLevelTable(this, Keys.STUDENT_PROFILE__FK_STUD_PROF_SECD_SCHL_EDU_LEVL);

        return _educationLevel;
    }

    public CurriculumTable curriculum() {
        if (_curriculum == null)
            _curriculum = new CurriculumTable(this, Keys.STUDENT_PROFILE__FK_STUD_PROF_SECD_SCHL_CRCU);

        return _curriculum;
    }

    public SchoolTable fkStudProfPrefUniy_1() {
        if (_fkStudProfPrefUniy_1 == null)
            _fkStudProfPrefUniy_1 = new SchoolTable(this, Keys.STUDENT_PROFILE__FK_STUD_PROF_PREF_UNIY_1);

        return _fkStudProfPrefUniy_1;
    }

    public SchoolTable fkStudProfPrefUniy_2() {
        if (_fkStudProfPrefUniy_2 == null)
            _fkStudProfPrefUniy_2 = new SchoolTable(this, Keys.STUDENT_PROFILE__FK_STUD_PROF_PREF_UNIY_2);

        return _fkStudProfPrefUniy_2;
    }

    public SchoolTable fkStudProfPrefUniy_3() {
        if (_fkStudProfPrefUniy_3 == null)
            _fkStudProfPrefUniy_3 = new SchoolTable(this, Keys.STUDENT_PROFILE__FK_STUD_PROF_PREF_UNIY_3);

        return _fkStudProfPrefUniy_3;
    }

    @Override
    @Nonnull
    public StudentProfileTable as(String alias) {
        return new StudentProfileTable(DSL.name(alias), this);
    }

    @Override
    @Nonnull
    public StudentProfileTable as(Name alias) {
        return new StudentProfileTable(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public StudentProfileTable rename(String name) {
        return new StudentProfileTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public StudentProfileTable rename(Name name) {
        return new StudentProfileTable(name, null);
    }

    // -------------------------------------------------------------------------
    // Row21 type methods
    // -------------------------------------------------------------------------

    @Override
    @Nonnull
    public Row21<UUID, UUID, LocalDate, GenderEnum, UUID, String, String, String, UUID, UUID, UUID, UUID, UUID, UUID, OffsetDateTime, String, OffsetDateTime, String, UUID[], String, String> fieldsRow() {
        return (Row21) super.fieldsRow();
    }
}
