/*
 * This file is generated by jOOQ.
 */
package unid.jooqMono.model.tables.daos;


import java.time.OffsetDateTime;
import java.util.List;
import java.util.UUID;

import javax.annotation.Nonnull;
import javax.annotation.Nullable;
import javax.annotation.processing.Generated;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;

import unid.jooqMono.model.tables.ExpertiseAcademicMajorMapTable;
import unid.jooqMono.model.tables.pojos.ExpertiseAcademicMajorMapPojo;
import unid.jooqMono.model.tables.records.ExpertiseAcademicMajorMapRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.15.12"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ExpertiseAcademicMajorMapDao extends DAOImpl<ExpertiseAcademicMajorMapRecord, ExpertiseAcademicMajorMapPojo, UUID> {

    /**
     * Create a new ExpertiseAcademicMajorMapDao without any configuration
     */
    public ExpertiseAcademicMajorMapDao() {
        super(ExpertiseAcademicMajorMapTable.EXPERTISE_ACADEMIC_MAJOR_MAP, ExpertiseAcademicMajorMapPojo.class);
    }

    /**
     * Create a new ExpertiseAcademicMajorMapDao with an attached configuration
     */
    public ExpertiseAcademicMajorMapDao(Configuration configuration) {
        super(ExpertiseAcademicMajorMapTable.EXPERTISE_ACADEMIC_MAJOR_MAP, ExpertiseAcademicMajorMapPojo.class, configuration);
    }

    @Override
    @Nonnull
    public UUID getId(ExpertiseAcademicMajorMapPojo object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<ExpertiseAcademicMajorMapPojo> fetchRangeOfId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(ExpertiseAcademicMajorMapTable.EXPERTISE_ACADEMIC_MAJOR_MAP.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    @Nonnull
    public List<ExpertiseAcademicMajorMapPojo> fetchById(UUID... values) {
        return fetch(ExpertiseAcademicMajorMapTable.EXPERTISE_ACADEMIC_MAJOR_MAP.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    @Nullable
    public ExpertiseAcademicMajorMapPojo fetchOneById(UUID value) {
        return fetchOne(ExpertiseAcademicMajorMapTable.EXPERTISE_ACADEMIC_MAJOR_MAP.ID, value);
    }

    /**
     * Fetch records that have <code>expertise_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<ExpertiseAcademicMajorMapPojo> fetchRangeOfExpertiseId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(ExpertiseAcademicMajorMapTable.EXPERTISE_ACADEMIC_MAJOR_MAP.EXPERTISE_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>expertise_id IN (values)</code>
     */
    @Nonnull
    public List<ExpertiseAcademicMajorMapPojo> fetchByExpertiseId(UUID... values) {
        return fetch(ExpertiseAcademicMajorMapTable.EXPERTISE_ACADEMIC_MAJOR_MAP.EXPERTISE_ID, values);
    }

    /**
     * Fetch records that have <code>academic_major_id BETWEEN lowerInclusive
     * AND upperInclusive</code>
     */
    @Nonnull
    public List<ExpertiseAcademicMajorMapPojo> fetchRangeOfAcademicMajorId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(ExpertiseAcademicMajorMapTable.EXPERTISE_ACADEMIC_MAJOR_MAP.ACADEMIC_MAJOR_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>academic_major_id IN (values)</code>
     */
    @Nonnull
    public List<ExpertiseAcademicMajorMapPojo> fetchByAcademicMajorId(UUID... values) {
        return fetch(ExpertiseAcademicMajorMapTable.EXPERTISE_ACADEMIC_MAJOR_MAP.ACADEMIC_MAJOR_ID, values);
    }

    /**
     * Fetch records that have <code>created_on BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<ExpertiseAcademicMajorMapPojo> fetchRangeOfCreatedOn(OffsetDateTime lowerInclusive, OffsetDateTime upperInclusive) {
        return fetchRange(ExpertiseAcademicMajorMapTable.EXPERTISE_ACADEMIC_MAJOR_MAP.CREATED_ON, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>created_on IN (values)</code>
     */
    @Nonnull
    public List<ExpertiseAcademicMajorMapPojo> fetchByCreatedOn(OffsetDateTime... values) {
        return fetch(ExpertiseAcademicMajorMapTable.EXPERTISE_ACADEMIC_MAJOR_MAP.CREATED_ON, values);
    }

    /**
     * Fetch records that have <code>created_by BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<ExpertiseAcademicMajorMapPojo> fetchRangeOfCreatedBy(String lowerInclusive, String upperInclusive) {
        return fetchRange(ExpertiseAcademicMajorMapTable.EXPERTISE_ACADEMIC_MAJOR_MAP.CREATED_BY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>created_by IN (values)</code>
     */
    @Nonnull
    public List<ExpertiseAcademicMajorMapPojo> fetchByCreatedBy(String... values) {
        return fetch(ExpertiseAcademicMajorMapTable.EXPERTISE_ACADEMIC_MAJOR_MAP.CREATED_BY, values);
    }

    /**
     * Fetch records that have <code>updated_on BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<ExpertiseAcademicMajorMapPojo> fetchRangeOfUpdatedOn(OffsetDateTime lowerInclusive, OffsetDateTime upperInclusive) {
        return fetchRange(ExpertiseAcademicMajorMapTable.EXPERTISE_ACADEMIC_MAJOR_MAP.UPDATED_ON, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>updated_on IN (values)</code>
     */
    @Nonnull
    public List<ExpertiseAcademicMajorMapPojo> fetchByUpdatedOn(OffsetDateTime... values) {
        return fetch(ExpertiseAcademicMajorMapTable.EXPERTISE_ACADEMIC_MAJOR_MAP.UPDATED_ON, values);
    }

    /**
     * Fetch records that have <code>updated_by BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<ExpertiseAcademicMajorMapPojo> fetchRangeOfUpdatedBy(String lowerInclusive, String upperInclusive) {
        return fetchRange(ExpertiseAcademicMajorMapTable.EXPERTISE_ACADEMIC_MAJOR_MAP.UPDATED_BY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>updated_by IN (values)</code>
     */
    @Nonnull
    public List<ExpertiseAcademicMajorMapPojo> fetchByUpdatedBy(String... values) {
        return fetch(ExpertiseAcademicMajorMapTable.EXPERTISE_ACADEMIC_MAJOR_MAP.UPDATED_BY, values);
    }
}
