/*
 * This file is generated by jOOQ.
 */
package unid.jooqMono.model.tables;


import java.time.LocalDateTime;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import javax.annotation.Nonnull;
import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row10;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import unid.jooqMono.model.Keys;
import unid.jooqMono.model.Public;
import unid.jooqMono.model.tables.records.StudentProfileQuestionnaireMapRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.15.12"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class StudentProfileQuestionnaireMapTable extends TableImpl<StudentProfileQuestionnaireMapRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>public.student_profile_questionnaire_map</code>
     */
    public static final StudentProfileQuestionnaireMapTable STUDENT_PROFILE_QUESTIONNAIRE_MAP = new StudentProfileQuestionnaireMapTable();

    /**
     * The class holding records for this type
     */
    @Override
    @Nonnull
    public Class<StudentProfileQuestionnaireMapRecord> getRecordType() {
        return StudentProfileQuestionnaireMapRecord.class;
    }

    /**
     * The column <code>public.student_profile_questionnaire_map.id</code>.
     */
    public final TableField<StudentProfileQuestionnaireMapRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field("gen_random_uuid()", SQLDataType.UUID)), this, "");

    /**
     * The column
     * <code>public.student_profile_questionnaire_map.student_profile_id</code>.
     */
    public final TableField<StudentProfileQuestionnaireMapRecord, UUID> STUDENT_PROFILE_ID = createField(DSL.name("student_profile_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column
     * <code>public.student_profile_questionnaire_map.student_questionnaire_id</code>.
     */
    public final TableField<StudentProfileQuestionnaireMapRecord, UUID> STUDENT_QUESTIONNAIRE_ID = createField(DSL.name("student_questionnaire_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column
     * <code>public.student_profile_questionnaire_map.student_questionnaire_version_asked</code>.
     */
    public final TableField<StudentProfileQuestionnaireMapRecord, OffsetDateTime> STUDENT_QUESTIONNAIRE_VERSION_ASKED = createField(DSL.name("student_questionnaire_version_asked"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false), this, "");

    /**
     * The column
     * <code>public.student_profile_questionnaire_map.student_questionnaire_version_completed</code>.
     */
    public final TableField<StudentProfileQuestionnaireMapRecord, LocalDateTime> STUDENT_QUESTIONNAIRE_VERSION_COMPLETED = createField(DSL.name("student_questionnaire_version_completed"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column
     * <code>public.student_profile_questionnaire_map.completed</code>.
     */
    public final TableField<StudentProfileQuestionnaireMapRecord, Boolean> COMPLETED = createField(DSL.name("completed"), SQLDataType.BOOLEAN.defaultValue(DSL.field("false", SQLDataType.BOOLEAN)), this, "");

    /**
     * The column
     * <code>public.student_profile_questionnaire_map.created_on</code>.
     */
    public final TableField<StudentProfileQuestionnaireMapRecord, OffsetDateTime> CREATED_ON = createField(DSL.name("created_on"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    /**
     * The column
     * <code>public.student_profile_questionnaire_map.created_by</code>.
     */
    public final TableField<StudentProfileQuestionnaireMapRecord, String> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.CLOB, this, "");

    /**
     * The column
     * <code>public.student_profile_questionnaire_map.updated_on</code>.
     */
    public final TableField<StudentProfileQuestionnaireMapRecord, OffsetDateTime> UPDATED_ON = createField(DSL.name("updated_on"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    /**
     * The column
     * <code>public.student_profile_questionnaire_map.updated_by</code>.
     */
    public final TableField<StudentProfileQuestionnaireMapRecord, String> UPDATED_BY = createField(DSL.name("updated_by"), SQLDataType.CLOB, this, "");

    private StudentProfileQuestionnaireMapTable(Name alias, Table<StudentProfileQuestionnaireMapRecord> aliased) {
        this(alias, aliased, null);
    }

    private StudentProfileQuestionnaireMapTable(Name alias, Table<StudentProfileQuestionnaireMapRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.student_profile_questionnaire_map</code>
     * table reference
     */
    public StudentProfileQuestionnaireMapTable(String alias) {
        this(DSL.name(alias), STUDENT_PROFILE_QUESTIONNAIRE_MAP);
    }

    /**
     * Create an aliased <code>public.student_profile_questionnaire_map</code>
     * table reference
     */
    public StudentProfileQuestionnaireMapTable(Name alias) {
        this(alias, STUDENT_PROFILE_QUESTIONNAIRE_MAP);
    }

    /**
     * Create a <code>public.student_profile_questionnaire_map</code> table
     * reference
     */
    public StudentProfileQuestionnaireMapTable() {
        this(DSL.name("student_profile_questionnaire_map"), null);
    }

    public <O extends Record> StudentProfileQuestionnaireMapTable(Table<O> child, ForeignKey<O, StudentProfileQuestionnaireMapRecord> key) {
        super(child, key, STUDENT_PROFILE_QUESTIONNAIRE_MAP);
    }

    @Override
    @Nonnull
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    @Nonnull
    public UniqueKey<StudentProfileQuestionnaireMapRecord> getPrimaryKey() {
        return Keys.STUDENT_PROFILE_QUESTIONNAIRE_MAP_PKEY;
    }

    @Override
    @Nonnull
    public List<UniqueKey<StudentProfileQuestionnaireMapRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.UQ_STUD_PROF_QUET_MAP);
    }

    @Override
    @Nonnull
    public List<ForeignKey<StudentProfileQuestionnaireMapRecord, ?>> getReferences() {
        return Arrays.asList(Keys.STUDENT_PROFILE_QUESTIONNAIRE_MAP__FK_STUD_PROF_QUET_MAP_STUD_PROF, Keys.STUDENT_PROFILE_QUESTIONNAIRE_MAP__FK_STUD_PROF_QUET_MAP_STUD_QUET, Keys.STUDENT_PROFILE_QUESTIONNAIRE_MAP__FK_STUD_PROF_QUET_MAP_STUD_QUET2);
    }

    private transient StudentProfileTable _studentProfile;
    private transient StudentQuestionnaireTable _fkStudProfQuetMapStudQuet;
    private transient StudentQuestionnaireTable _fkStudProfQuetMapStudQuet2;

    public StudentProfileTable studentProfile() {
        if (_studentProfile == null)
            _studentProfile = new StudentProfileTable(this, Keys.STUDENT_PROFILE_QUESTIONNAIRE_MAP__FK_STUD_PROF_QUET_MAP_STUD_PROF);

        return _studentProfile;
    }

    public StudentQuestionnaireTable fkStudProfQuetMapStudQuet() {
        if (_fkStudProfQuetMapStudQuet == null)
            _fkStudProfQuetMapStudQuet = new StudentQuestionnaireTable(this, Keys.STUDENT_PROFILE_QUESTIONNAIRE_MAP__FK_STUD_PROF_QUET_MAP_STUD_QUET);

        return _fkStudProfQuetMapStudQuet;
    }

    public StudentQuestionnaireTable fkStudProfQuetMapStudQuet2() {
        if (_fkStudProfQuetMapStudQuet2 == null)
            _fkStudProfQuetMapStudQuet2 = new StudentQuestionnaireTable(this, Keys.STUDENT_PROFILE_QUESTIONNAIRE_MAP__FK_STUD_PROF_QUET_MAP_STUD_QUET2);

        return _fkStudProfQuetMapStudQuet2;
    }

    @Override
    @Nonnull
    public StudentProfileQuestionnaireMapTable as(String alias) {
        return new StudentProfileQuestionnaireMapTable(DSL.name(alias), this);
    }

    @Override
    @Nonnull
    public StudentProfileQuestionnaireMapTable as(Name alias) {
        return new StudentProfileQuestionnaireMapTable(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public StudentProfileQuestionnaireMapTable rename(String name) {
        return new StudentProfileQuestionnaireMapTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public StudentProfileQuestionnaireMapTable rename(Name name) {
        return new StudentProfileQuestionnaireMapTable(name, null);
    }

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------

    @Override
    @Nonnull
    public Row10<UUID, UUID, UUID, OffsetDateTime, LocalDateTime, Boolean, OffsetDateTime, String, OffsetDateTime, String> fieldsRow() {
        return (Row10) super.fieldsRow();
    }
}
