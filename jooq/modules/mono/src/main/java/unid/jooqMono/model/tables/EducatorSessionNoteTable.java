/*
 * This file is generated by jOOQ.
 */
package unid.jooqMono.model.tables;


import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import javax.annotation.Nonnull;
import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row10;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import unid.jooqMono.model.Keys;
import unid.jooqMono.model.Public;
import unid.jooqMono.model.tables.records.EducatorSessionNoteRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.15.12"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class EducatorSessionNoteTable extends TableImpl<EducatorSessionNoteRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.educator_session_note</code>
     */
    public static final EducatorSessionNoteTable EDUCATOR_SESSION_NOTE = new EducatorSessionNoteTable();

    /**
     * The class holding records for this type
     */
    @Override
    @Nonnull
    public Class<EducatorSessionNoteRecord> getRecordType() {
        return EducatorSessionNoteRecord.class;
    }

    /**
     * The column <code>public.educator_session_note.id</code>.
     */
    public final TableField<EducatorSessionNoteRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field("gen_random_uuid()", SQLDataType.UUID)), this, "");

    /**
     * The column <code>public.educator_session_note.title_i18n_id</code>.
     */
    public final TableField<EducatorSessionNoteRecord, UUID> TITLE_I18N_ID = createField(DSL.name("title_i18n_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.educator_session_note.sub_title_i18n_id</code>.
     */
    public final TableField<EducatorSessionNoteRecord, UUID> SUB_TITLE_I18N_ID = createField(DSL.name("sub_title_i18n_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.educator_session_note.description_i18n_id</code>.
     */
    public final TableField<EducatorSessionNoteRecord, UUID> DESCRIPTION_I18N_ID = createField(DSL.name("description_i18n_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.educator_session_note.obsoleted</code>.
     */
    public final TableField<EducatorSessionNoteRecord, Boolean> OBSOLETED = createField(DSL.name("obsoleted"), SQLDataType.BOOLEAN.defaultValue(DSL.field("false", SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.educator_session_note.mandatory</code>.
     */
    public final TableField<EducatorSessionNoteRecord, Boolean> MANDATORY = createField(DSL.name("mandatory"), SQLDataType.BOOLEAN.defaultValue(DSL.field("true", SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.educator_session_note.created_on</code>.
     */
    public final TableField<EducatorSessionNoteRecord, OffsetDateTime> CREATED_ON = createField(DSL.name("created_on"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    /**
     * The column <code>public.educator_session_note.created_by</code>.
     */
    public final TableField<EducatorSessionNoteRecord, String> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.educator_session_note.updated_on</code>.
     */
    public final TableField<EducatorSessionNoteRecord, OffsetDateTime> UPDATED_ON = createField(DSL.name("updated_on"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    /**
     * The column <code>public.educator_session_note.updated_by</code>.
     */
    public final TableField<EducatorSessionNoteRecord, String> UPDATED_BY = createField(DSL.name("updated_by"), SQLDataType.CLOB, this, "");

    private EducatorSessionNoteTable(Name alias, Table<EducatorSessionNoteRecord> aliased) {
        this(alias, aliased, null);
    }

    private EducatorSessionNoteTable(Name alias, Table<EducatorSessionNoteRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.educator_session_note</code> table
     * reference
     */
    public EducatorSessionNoteTable(String alias) {
        this(DSL.name(alias), EDUCATOR_SESSION_NOTE);
    }

    /**
     * Create an aliased <code>public.educator_session_note</code> table
     * reference
     */
    public EducatorSessionNoteTable(Name alias) {
        this(alias, EDUCATOR_SESSION_NOTE);
    }

    /**
     * Create a <code>public.educator_session_note</code> table reference
     */
    public EducatorSessionNoteTable() {
        this(DSL.name("educator_session_note"), null);
    }

    public <O extends Record> EducatorSessionNoteTable(Table<O> child, ForeignKey<O, EducatorSessionNoteRecord> key) {
        super(child, key, EDUCATOR_SESSION_NOTE);
    }

    @Override
    @Nonnull
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    @Nonnull
    public UniqueKey<EducatorSessionNoteRecord> getPrimaryKey() {
        return Keys.EDUCATOR_SESSION_NOTE_PKEY;
    }

    @Override
    @Nonnull
    public List<UniqueKey<EducatorSessionNoteRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.EDUCATOR_SESSION_NOTE_TITLE_I18N_ID_KEY, Keys.EDUCATOR_SESSION_NOTE_SUB_TITLE_I18N_ID_KEY, Keys.EDUCATOR_SESSION_NOTE_DESCRIPTION_I18N_ID_KEY);
    }

    @Override
    @Nonnull
    public List<ForeignKey<EducatorSessionNoteRecord, ?>> getReferences() {
        return Arrays.asList(Keys.EDUCATOR_SESSION_NOTE__FK_EDUC_SESS_NOTE_TITL, Keys.EDUCATOR_SESSION_NOTE__FK_EDUC_SESS_NOTE_SUB_TITL, Keys.EDUCATOR_SESSION_NOTE__FK_EDUC_SESS_NOTE_DESC);
    }

    private transient I18nTable _fkEducSessNoteTitl;
    private transient I18nTable _fkEducSessNoteSubTitl;
    private transient I18nTable _fkEducSessNoteDesc;

    public I18nTable fkEducSessNoteTitl() {
        if (_fkEducSessNoteTitl == null)
            _fkEducSessNoteTitl = new I18nTable(this, Keys.EDUCATOR_SESSION_NOTE__FK_EDUC_SESS_NOTE_TITL);

        return _fkEducSessNoteTitl;
    }

    public I18nTable fkEducSessNoteSubTitl() {
        if (_fkEducSessNoteSubTitl == null)
            _fkEducSessNoteSubTitl = new I18nTable(this, Keys.EDUCATOR_SESSION_NOTE__FK_EDUC_SESS_NOTE_SUB_TITL);

        return _fkEducSessNoteSubTitl;
    }

    public I18nTable fkEducSessNoteDesc() {
        if (_fkEducSessNoteDesc == null)
            _fkEducSessNoteDesc = new I18nTable(this, Keys.EDUCATOR_SESSION_NOTE__FK_EDUC_SESS_NOTE_DESC);

        return _fkEducSessNoteDesc;
    }

    @Override
    @Nonnull
    public EducatorSessionNoteTable as(String alias) {
        return new EducatorSessionNoteTable(DSL.name(alias), this);
    }

    @Override
    @Nonnull
    public EducatorSessionNoteTable as(Name alias) {
        return new EducatorSessionNoteTable(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public EducatorSessionNoteTable rename(String name) {
        return new EducatorSessionNoteTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public EducatorSessionNoteTable rename(Name name) {
        return new EducatorSessionNoteTable(name, null);
    }

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------

    @Override
    @Nonnull
    public Row10<UUID, UUID, UUID, UUID, Boolean, Boolean, OffsetDateTime, String, OffsetDateTime, String> fieldsRow() {
        return (Row10) super.fieldsRow();
    }
}
