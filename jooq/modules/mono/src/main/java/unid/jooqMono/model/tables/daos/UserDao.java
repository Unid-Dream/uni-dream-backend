/*
 * This file is generated by jOOQ.
 */
package unid.jooqMono.model.tables.daos;


import java.time.OffsetDateTime;
import java.util.List;
import java.util.UUID;

import javax.annotation.Nonnull;
import javax.annotation.Nullable;
import javax.annotation.processing.Generated;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;

import unid.jooqMono.model.enums.UserRoleEnum;
import unid.jooqMono.model.tables.UserTable;
import unid.jooqMono.model.tables.pojos.UserPojo;
import unid.jooqMono.model.tables.records.UserRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.15.12"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserDao extends DAOImpl<UserRecord, UserPojo, UUID> {

    /**
     * Create a new UserDao without any configuration
     */
    public UserDao() {
        super(UserTable.USER, UserPojo.class);
    }

    /**
     * Create a new UserDao with an attached configuration
     */
    public UserDao(Configuration configuration) {
        super(UserTable.USER, UserPojo.class, configuration);
    }

    @Override
    @Nonnull
    public UUID getId(UserPojo object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<UserPojo> fetchRangeOfId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(UserTable.USER.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    @Nonnull
    public List<UserPojo> fetchById(UUID... values) {
        return fetch(UserTable.USER.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    @Nullable
    public UserPojo fetchOneById(UUID value) {
        return fetchOne(UserTable.USER.ID, value);
    }

    /**
     * Fetch records that have <code>last_name_i18n_id BETWEEN lowerInclusive
     * AND upperInclusive</code>
     */
    @Nonnull
    public List<UserPojo> fetchRangeOfLastNameI18nId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(UserTable.USER.LAST_NAME_I18N_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>last_name_i18n_id IN (values)</code>
     */
    @Nonnull
    public List<UserPojo> fetchByLastNameI18nId(UUID... values) {
        return fetch(UserTable.USER.LAST_NAME_I18N_ID, values);
    }

    /**
     * Fetch a unique record that has <code>last_name_i18n_id = value</code>
     */
    @Nullable
    public UserPojo fetchOneByLastNameI18nId(UUID value) {
        return fetchOne(UserTable.USER.LAST_NAME_I18N_ID, value);
    }

    /**
     * Fetch records that have <code>fist_name_i18n_id BETWEEN lowerInclusive
     * AND upperInclusive</code>
     */
    @Nonnull
    public List<UserPojo> fetchRangeOfFistNameI18nId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(UserTable.USER.FIST_NAME_I18N_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>fist_name_i18n_id IN (values)</code>
     */
    @Nonnull
    public List<UserPojo> fetchByFistNameI18nId(UUID... values) {
        return fetch(UserTable.USER.FIST_NAME_I18N_ID, values);
    }

    /**
     * Fetch a unique record that has <code>fist_name_i18n_id = value</code>
     */
    @Nullable
    public UserPojo fetchOneByFistNameI18nId(UUID value) {
        return fetchOne(UserTable.USER.FIST_NAME_I18N_ID, value);
    }

    /**
     * Fetch records that have <code>user_role BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<UserPojo> fetchRangeOfUserRole(UserRoleEnum lowerInclusive, UserRoleEnum upperInclusive) {
        return fetchRange(UserTable.USER.USER_ROLE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>user_role IN (values)</code>
     */
    @Nonnull
    public List<UserPojo> fetchByUserRole(UserRoleEnum... values) {
        return fetch(UserTable.USER.USER_ROLE, values);
    }

    /**
     * Fetch records that have <code>login_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<UserPojo> fetchRangeOfLoginId(String lowerInclusive, String upperInclusive) {
        return fetchRange(UserTable.USER.LOGIN_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>login_id IN (values)</code>
     */
    @Nonnull
    public List<UserPojo> fetchByLoginId(String... values) {
        return fetch(UserTable.USER.LOGIN_ID, values);
    }

    /**
     * Fetch a unique record that has <code>login_id = value</code>
     */
    @Nullable
    public UserPojo fetchOneByLoginId(String value) {
        return fetchOne(UserTable.USER.LOGIN_ID, value);
    }

    /**
     * Fetch records that have <code>login_password BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<UserPojo> fetchRangeOfLoginPassword(String lowerInclusive, String upperInclusive) {
        return fetchRange(UserTable.USER.LOGIN_PASSWORD, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>login_password IN (values)</code>
     */
    @Nonnull
    public List<UserPojo> fetchByLoginPassword(String... values) {
        return fetch(UserTable.USER.LOGIN_PASSWORD, values);
    }

    /**
     * Fetch records that have <code>email BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<UserPojo> fetchRangeOfEmail(String lowerInclusive, String upperInclusive) {
        return fetchRange(UserTable.USER.EMAIL, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>email IN (values)</code>
     */
    @Nonnull
    public List<UserPojo> fetchByEmail(String... values) {
        return fetch(UserTable.USER.EMAIL, values);
    }

    /**
     * Fetch a unique record that has <code>email = value</code>
     */
    @Nullable
    public UserPojo fetchOneByEmail(String value) {
        return fetchOne(UserTable.USER.EMAIL, value);
    }

    /**
     * Fetch records that have <code>email_verified BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<UserPojo> fetchRangeOfEmailVerified(Boolean lowerInclusive, Boolean upperInclusive) {
        return fetchRange(UserTable.USER.EMAIL_VERIFIED, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>email_verified IN (values)</code>
     */
    @Nonnull
    public List<UserPojo> fetchByEmailVerified(Boolean... values) {
        return fetch(UserTable.USER.EMAIL_VERIFIED, values);
    }

    /**
     * Fetch records that have <code>google_client_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<UserPojo> fetchRangeOfGoogleClientId(String lowerInclusive, String upperInclusive) {
        return fetchRange(UserTable.USER.GOOGLE_CLIENT_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>google_client_id IN (values)</code>
     */
    @Nonnull
    public List<UserPojo> fetchByGoogleClientId(String... values) {
        return fetch(UserTable.USER.GOOGLE_CLIENT_ID, values);
    }

    /**
     * Fetch a unique record that has <code>google_client_id = value</code>
     */
    @Nullable
    public UserPojo fetchOneByGoogleClientId(String value) {
        return fetchOne(UserTable.USER.GOOGLE_CLIENT_ID, value);
    }

    /**
     * Fetch records that have <code>tencent_wechat_client_id BETWEEN
     * lowerInclusive AND upperInclusive</code>
     */
    @Nonnull
    public List<UserPojo> fetchRangeOfTencentWechatClientId(String lowerInclusive, String upperInclusive) {
        return fetchRange(UserTable.USER.TENCENT_WECHAT_CLIENT_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>tencent_wechat_client_id IN (values)</code>
     */
    @Nonnull
    public List<UserPojo> fetchByTencentWechatClientId(String... values) {
        return fetch(UserTable.USER.TENCENT_WECHAT_CLIENT_ID, values);
    }

    /**
     * Fetch a unique record that has <code>tencent_wechat_client_id =
     * value</code>
     */
    @Nullable
    public UserPojo fetchOneByTencentWechatClientId(String value) {
        return fetchOne(UserTable.USER.TENCENT_WECHAT_CLIENT_ID, value);
    }

    /**
     * Fetch records that have <code>deleted BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<UserPojo> fetchRangeOfDeleted(Boolean lowerInclusive, Boolean upperInclusive) {
        return fetchRange(UserTable.USER.DELETED, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>deleted IN (values)</code>
     */
    @Nonnull
    public List<UserPojo> fetchByDeleted(Boolean... values) {
        return fetch(UserTable.USER.DELETED, values);
    }

    /**
     * Fetch records that have <code>created_on BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<UserPojo> fetchRangeOfCreatedOn(OffsetDateTime lowerInclusive, OffsetDateTime upperInclusive) {
        return fetchRange(UserTable.USER.CREATED_ON, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>created_on IN (values)</code>
     */
    @Nonnull
    public List<UserPojo> fetchByCreatedOn(OffsetDateTime... values) {
        return fetch(UserTable.USER.CREATED_ON, values);
    }

    /**
     * Fetch records that have <code>created_by BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<UserPojo> fetchRangeOfCreatedBy(String lowerInclusive, String upperInclusive) {
        return fetchRange(UserTable.USER.CREATED_BY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>created_by IN (values)</code>
     */
    @Nonnull
    public List<UserPojo> fetchByCreatedBy(String... values) {
        return fetch(UserTable.USER.CREATED_BY, values);
    }

    /**
     * Fetch records that have <code>updated_on BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<UserPojo> fetchRangeOfUpdatedOn(OffsetDateTime lowerInclusive, OffsetDateTime upperInclusive) {
        return fetchRange(UserTable.USER.UPDATED_ON, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>updated_on IN (values)</code>
     */
    @Nonnull
    public List<UserPojo> fetchByUpdatedOn(OffsetDateTime... values) {
        return fetch(UserTable.USER.UPDATED_ON, values);
    }

    /**
     * Fetch records that have <code>updated_by BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<UserPojo> fetchRangeOfUpdatedBy(String lowerInclusive, String upperInclusive) {
        return fetchRange(UserTable.USER.UPDATED_BY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>updated_by IN (values)</code>
     */
    @Nonnull
    public List<UserPojo> fetchByUpdatedBy(String... values) {
        return fetch(UserTable.USER.UPDATED_BY, values);
    }
}
