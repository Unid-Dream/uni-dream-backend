/*
 * This file is generated by jOOQ.
 */
package unid.jooqMono.model;


import javax.annotation.processing.Generated;

import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;

import unid.jooqMono.model.tables.AcademicMajorSubjectMapTable;
import unid.jooqMono.model.tables.AcademicMajorTable;
import unid.jooqMono.model.tables.AcademicSubjectResourceTable;
import unid.jooqMono.model.tables.AcademicSubjectTable;
import unid.jooqMono.model.tables.CityTable;
import unid.jooqMono.model.tables.CountryTable;
import unid.jooqMono.model.tables.CourseEventTable;
import unid.jooqMono.model.tables.CourseTable;
import unid.jooqMono.model.tables.CurriculumTable;
import unid.jooqMono.model.tables.EcaCourseAcademicMajorEducationLevelMapTable;
import unid.jooqMono.model.tables.EcaCourseAcademicMapTable;
import unid.jooqMono.model.tables.EcaCourseTable;
import unid.jooqMono.model.tables.EcaProfileOptionTable;
import unid.jooqMono.model.tables.EcaProfileSectionTable;
import unid.jooqMono.model.tables.EducationLevelTable;
import unid.jooqMono.model.tables.EducatorCalendarExtensionTable;
import unid.jooqMono.model.tables.EducatorCalendarTable;
import unid.jooqMono.model.tables.EducatorProfileCopy1Table;
import unid.jooqMono.model.tables.EducatorProfileExpertiseAcademicMapTable;
import unid.jooqMono.model.tables.EducatorProfileExtensionTable;
import unid.jooqMono.model.tables.EducatorProfileLanguageMapTable;
import unid.jooqMono.model.tables.EducatorProfileTable;
import unid.jooqMono.model.tables.EducatorSchoolTable;
import unid.jooqMono.model.tables.EducatorSessionNoteItemTable;
import unid.jooqMono.model.tables.EducatorSessionNoteMapTable;
import unid.jooqMono.model.tables.EducatorSessionNoteTable;
import unid.jooqMono.model.tables.EventExtensionTable;
import unid.jooqMono.model.tables.EventScheduleTimeTable;
import unid.jooqMono.model.tables.EventTable;
import unid.jooqMono.model.tables.ExpertiseAcademicMajorMapTable;
import unid.jooqMono.model.tables.ExpertiseTable;
import unid.jooqMono.model.tables.I18nTable;
import unid.jooqMono.model.tables.InterviewTopicTable;
import unid.jooqMono.model.tables.LanguageTable;
import unid.jooqMono.model.tables.OpportunityTable;
import unid.jooqMono.model.tables.PassionMajorTable;
import unid.jooqMono.model.tables.PassionSubjectAnswerTable;
import unid.jooqMono.model.tables.PassionSubjectBookTable;
import unid.jooqMono.model.tables.PassionSubjectPodcastTable;
import unid.jooqMono.model.tables.PassionSubjectTable;
import unid.jooqMono.model.tables.PassionSubjectVideoTable;
import unid.jooqMono.model.tables.PricingTable;
import unid.jooqMono.model.tables.SchoolExtensionTable;
import unid.jooqMono.model.tables.SchoolIdentityTable;
import unid.jooqMono.model.tables.SchoolTable;
import unid.jooqMono.model.tables.SessionRescheduleTable;
import unid.jooqMono.model.tables.StudentBookingSurveyAnswerMapTable;
import unid.jooqMono.model.tables.StudentBookingSurveyMapTable;
import unid.jooqMono.model.tables.StudentEcaProfileMapTable;
import unid.jooqMono.model.tables.StudentMilestoneMapTable;
import unid.jooqMono.model.tables.StudentMilestoneOptionsTable;
import unid.jooqMono.model.tables.StudentMilestoneQuestionnaireTable;
import unid.jooqMono.model.tables.StudentMilestoneTable;
import unid.jooqMono.model.tables.StudentPaymentTransactionTable;
import unid.jooqMono.model.tables.StudentProfilePredictedGradeTable;
import unid.jooqMono.model.tables.StudentProfileQuestionnaireAnswerMapTable;
import unid.jooqMono.model.tables.StudentProfileQuestionnaireMapTable;
import unid.jooqMono.model.tables.StudentProfileSchoolReportTable;
import unid.jooqMono.model.tables.StudentProfileTable;
import unid.jooqMono.model.tables.StudentQuestionnaireAnswerTable;
import unid.jooqMono.model.tables.StudentQuestionnaireQuestionTable;
import unid.jooqMono.model.tables.StudentQuestionnaireSectionTable;
import unid.jooqMono.model.tables.StudentQuestionnaireTable;
import unid.jooqMono.model.tables.StudentSessionSurveyAnswerTable;
import unid.jooqMono.model.tables.StudentSessionSurveyQuestionTable;
import unid.jooqMono.model.tables.StudentSessionSurveyTable;
import unid.jooqMono.model.tables.StudentUploadedInterviewTable;
import unid.jooqMono.model.tables.StudentUploadedSupervisorReviewTable;
import unid.jooqMono.model.tables.StudentUploadedWritingTable;
import unid.jooqMono.model.tables.TagTable;
import unid.jooqMono.model.tables.TaggingTable;
import unid.jooqMono.model.tables.UserNotificationTable;
import unid.jooqMono.model.tables.UserTable;
import unid.jooqMono.model.tables.WritingTopicTable;
import unid.jooqMono.model.tables.records.AcademicMajorRecord;
import unid.jooqMono.model.tables.records.AcademicMajorSubjectMapRecord;
import unid.jooqMono.model.tables.records.AcademicSubjectRecord;
import unid.jooqMono.model.tables.records.AcademicSubjectResourceRecord;
import unid.jooqMono.model.tables.records.CityRecord;
import unid.jooqMono.model.tables.records.CountryRecord;
import unid.jooqMono.model.tables.records.CourseEventRecord;
import unid.jooqMono.model.tables.records.CourseRecord;
import unid.jooqMono.model.tables.records.CurriculumRecord;
import unid.jooqMono.model.tables.records.EcaCourseAcademicMajorEducationLevelMapRecord;
import unid.jooqMono.model.tables.records.EcaCourseAcademicMapRecord;
import unid.jooqMono.model.tables.records.EcaCourseRecord;
import unid.jooqMono.model.tables.records.EcaProfileOptionRecord;
import unid.jooqMono.model.tables.records.EcaProfileSectionRecord;
import unid.jooqMono.model.tables.records.EducationLevelRecord;
import unid.jooqMono.model.tables.records.EducatorCalendarExtensionRecord;
import unid.jooqMono.model.tables.records.EducatorCalendarRecord;
import unid.jooqMono.model.tables.records.EducatorProfileCopy1Record;
import unid.jooqMono.model.tables.records.EducatorProfileExpertiseAcademicMapRecord;
import unid.jooqMono.model.tables.records.EducatorProfileExtensionRecord;
import unid.jooqMono.model.tables.records.EducatorProfileLanguageMapRecord;
import unid.jooqMono.model.tables.records.EducatorProfileRecord;
import unid.jooqMono.model.tables.records.EducatorSchoolRecord;
import unid.jooqMono.model.tables.records.EducatorSessionNoteItemRecord;
import unid.jooqMono.model.tables.records.EducatorSessionNoteMapRecord;
import unid.jooqMono.model.tables.records.EducatorSessionNoteRecord;
import unid.jooqMono.model.tables.records.EventExtensionRecord;
import unid.jooqMono.model.tables.records.EventRecord;
import unid.jooqMono.model.tables.records.EventScheduleTimeRecord;
import unid.jooqMono.model.tables.records.ExpertiseAcademicMajorMapRecord;
import unid.jooqMono.model.tables.records.ExpertiseRecord;
import unid.jooqMono.model.tables.records.I18nRecord;
import unid.jooqMono.model.tables.records.InterviewTopicRecord;
import unid.jooqMono.model.tables.records.LanguageRecord;
import unid.jooqMono.model.tables.records.OpportunityRecord;
import unid.jooqMono.model.tables.records.PassionMajorRecord;
import unid.jooqMono.model.tables.records.PassionSubjectAnswerRecord;
import unid.jooqMono.model.tables.records.PassionSubjectBookRecord;
import unid.jooqMono.model.tables.records.PassionSubjectPodcastRecord;
import unid.jooqMono.model.tables.records.PassionSubjectRecord;
import unid.jooqMono.model.tables.records.PassionSubjectVideoRecord;
import unid.jooqMono.model.tables.records.PricingRecord;
import unid.jooqMono.model.tables.records.SchoolExtensionRecord;
import unid.jooqMono.model.tables.records.SchoolIdentityRecord;
import unid.jooqMono.model.tables.records.SchoolRecord;
import unid.jooqMono.model.tables.records.SessionRescheduleRecord;
import unid.jooqMono.model.tables.records.StudentBookingSurveyAnswerMapRecord;
import unid.jooqMono.model.tables.records.StudentBookingSurveyMapRecord;
import unid.jooqMono.model.tables.records.StudentEcaProfileMapRecord;
import unid.jooqMono.model.tables.records.StudentMilestoneMapRecord;
import unid.jooqMono.model.tables.records.StudentMilestoneOptionsRecord;
import unid.jooqMono.model.tables.records.StudentMilestoneQuestionnaireRecord;
import unid.jooqMono.model.tables.records.StudentMilestoneRecord;
import unid.jooqMono.model.tables.records.StudentPaymentTransactionRecord;
import unid.jooqMono.model.tables.records.StudentProfilePredictedGradeRecord;
import unid.jooqMono.model.tables.records.StudentProfileQuestionnaireAnswerMapRecord;
import unid.jooqMono.model.tables.records.StudentProfileQuestionnaireMapRecord;
import unid.jooqMono.model.tables.records.StudentProfileRecord;
import unid.jooqMono.model.tables.records.StudentProfileSchoolReportRecord;
import unid.jooqMono.model.tables.records.StudentQuestionnaireAnswerRecord;
import unid.jooqMono.model.tables.records.StudentQuestionnaireQuestionRecord;
import unid.jooqMono.model.tables.records.StudentQuestionnaireRecord;
import unid.jooqMono.model.tables.records.StudentQuestionnaireSectionRecord;
import unid.jooqMono.model.tables.records.StudentSessionSurveyAnswerRecord;
import unid.jooqMono.model.tables.records.StudentSessionSurveyQuestionRecord;
import unid.jooqMono.model.tables.records.StudentSessionSurveyRecord;
import unid.jooqMono.model.tables.records.StudentUploadedInterviewRecord;
import unid.jooqMono.model.tables.records.StudentUploadedSupervisorReviewRecord;
import unid.jooqMono.model.tables.records.StudentUploadedWritingRecord;
import unid.jooqMono.model.tables.records.TagRecord;
import unid.jooqMono.model.tables.records.TaggingRecord;
import unid.jooqMono.model.tables.records.UserNotificationRecord;
import unid.jooqMono.model.tables.records.UserRecord;
import unid.jooqMono.model.tables.records.WritingTopicRecord;


/**
 * A class modelling foreign key relationships and constraints of tables in
 * public.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.15.12"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<AcademicMajorRecord> ACADEMIC_MAJOR_DESCRIPTION_I18N_ID_KEY = Internal.createUniqueKey(AcademicMajorTable.ACADEMIC_MAJOR, DSL.name("academic_major_description_i18n_id_key"), new TableField[] { AcademicMajorTable.ACADEMIC_MAJOR.DESCRIPTION_I18N_ID }, true);
    public static final UniqueKey<AcademicMajorRecord> ACADEMIC_MAJOR_PKEY = Internal.createUniqueKey(AcademicMajorTable.ACADEMIC_MAJOR, DSL.name("academic_major_pkey"), new TableField[] { AcademicMajorTable.ACADEMIC_MAJOR.ID }, true);
    public static final UniqueKey<AcademicMajorRecord> ACADEMIC_MAJOR_TITLE_I18N_ID_KEY = Internal.createUniqueKey(AcademicMajorTable.ACADEMIC_MAJOR, DSL.name("academic_major_title_i18n_id_key"), new TableField[] { AcademicMajorTable.ACADEMIC_MAJOR.TITLE_I18N_ID }, true);
    public static final UniqueKey<AcademicMajorSubjectMapRecord> ACADEMIC_MAJOR_SUBJECT_MAP_PKEY = Internal.createUniqueKey(AcademicMajorSubjectMapTable.ACADEMIC_MAJOR_SUBJECT_MAP, DSL.name("academic_major_subject_map_pkey"), new TableField[] { AcademicMajorSubjectMapTable.ACADEMIC_MAJOR_SUBJECT_MAP.ID }, true);
    public static final UniqueKey<AcademicMajorSubjectMapRecord> UQ_ACAD_MAJ_SUB_MAP = Internal.createUniqueKey(AcademicMajorSubjectMapTable.ACADEMIC_MAJOR_SUBJECT_MAP, DSL.name("uq_acad_maj_sub_map"), new TableField[] { AcademicMajorSubjectMapTable.ACADEMIC_MAJOR_SUBJECT_MAP.ACADEMIC_MAJOR_ID, AcademicMajorSubjectMapTable.ACADEMIC_MAJOR_SUBJECT_MAP.ACADEMIC_SUBJECT_ID }, true);
    public static final UniqueKey<AcademicSubjectRecord> ACADEMIC_SUBJECT_DESCRIPTION_I18N_ID_KEY = Internal.createUniqueKey(AcademicSubjectTable.ACADEMIC_SUBJECT, DSL.name("academic_subject_description_i18n_id_key"), new TableField[] { AcademicSubjectTable.ACADEMIC_SUBJECT.DESCRIPTION_I18N_ID }, true);
    public static final UniqueKey<AcademicSubjectRecord> ACADEMIC_SUBJECT_DESCRIPTION_MASTER_DEGREE_I18N_ID_KEY = Internal.createUniqueKey(AcademicSubjectTable.ACADEMIC_SUBJECT, DSL.name("academic_subject_description_master_degree_i18n_id_key"), new TableField[] { AcademicSubjectTable.ACADEMIC_SUBJECT.DESCRIPTION_MASTER_DEGREE_I18N_ID }, true);
    public static final UniqueKey<AcademicSubjectRecord> ACADEMIC_SUBJECT_DESCRIPTION_PHD_I18N_ID_KEY = Internal.createUniqueKey(AcademicSubjectTable.ACADEMIC_SUBJECT, DSL.name("academic_subject_description_phd_i18n_id_key"), new TableField[] { AcademicSubjectTable.ACADEMIC_SUBJECT.DESCRIPTION_PHD_I18N_ID }, true);
    public static final UniqueKey<AcademicSubjectRecord> ACADEMIC_SUBJECT_PKEY = Internal.createUniqueKey(AcademicSubjectTable.ACADEMIC_SUBJECT, DSL.name("academic_subject_pkey"), new TableField[] { AcademicSubjectTable.ACADEMIC_SUBJECT.ID }, true);
    public static final UniqueKey<AcademicSubjectRecord> ACADEMIC_SUBJECT_TITLE_I18N_ID_KEY = Internal.createUniqueKey(AcademicSubjectTable.ACADEMIC_SUBJECT, DSL.name("academic_subject_title_i18n_id_key"), new TableField[] { AcademicSubjectTable.ACADEMIC_SUBJECT.TITLE_I18N_ID }, true);
    public static final UniqueKey<AcademicSubjectResourceRecord> ACADEMIC_SUBJECT_RESOURCE_PKEY = Internal.createUniqueKey(AcademicSubjectResourceTable.ACADEMIC_SUBJECT_RESOURCE, DSL.name("academic_subject_resource_pkey"), new TableField[] { AcademicSubjectResourceTable.ACADEMIC_SUBJECT_RESOURCE.ID }, true);
    public static final UniqueKey<AcademicSubjectResourceRecord> ACADEMIC_SUBJECT_RESOURCE_TITLE_I18N_ID_KEY = Internal.createUniqueKey(AcademicSubjectResourceTable.ACADEMIC_SUBJECT_RESOURCE, DSL.name("academic_subject_resource_title_i18n_id_key"), new TableField[] { AcademicSubjectResourceTable.ACADEMIC_SUBJECT_RESOURCE.TITLE_I18N_ID }, true);
    public static final UniqueKey<CityRecord> CITY_NAME_I18N_ID_KEY = Internal.createUniqueKey(CityTable.CITY, DSL.name("city_name_i18n_id_key"), new TableField[] { CityTable.CITY.NAME_I18N_ID }, true);
    public static final UniqueKey<CityRecord> CITY_PKEY = Internal.createUniqueKey(CityTable.CITY, DSL.name("city_pkey"), new TableField[] { CityTable.CITY.ID }, true);
    public static final UniqueKey<CountryRecord> COUNTRY_NAME_I18N_ID_KEY = Internal.createUniqueKey(CountryTable.COUNTRY, DSL.name("country_name_i18n_id_key"), new TableField[] { CountryTable.COUNTRY.NAME_I18N_ID }, true);
    public static final UniqueKey<CountryRecord> COUNTRY_PKEY = Internal.createUniqueKey(CountryTable.COUNTRY, DSL.name("country_pkey"), new TableField[] { CountryTable.COUNTRY.ID }, true);
    public static final UniqueKey<CourseRecord> COURSE_DESCRIPTION_I18N_ID_KEY = Internal.createUniqueKey(CourseTable.COURSE, DSL.name("course_description_i18n_id_key"), new TableField[] { CourseTable.COURSE.DESCRIPTION_I18N_ID }, true);
    public static final UniqueKey<CourseRecord> COURSE_PKEY = Internal.createUniqueKey(CourseTable.COURSE, DSL.name("course_pkey"), new TableField[] { CourseTable.COURSE.ID }, true);
    public static final UniqueKey<CourseRecord> COURSE_TITLE_I18N_ID_KEY = Internal.createUniqueKey(CourseTable.COURSE, DSL.name("course_title_i18n_id_key"), new TableField[] { CourseTable.COURSE.TITLE_I18N_ID }, true);
    public static final UniqueKey<CourseEventRecord> COURSE_EVENT_PKEY = Internal.createUniqueKey(CourseEventTable.COURSE_EVENT, DSL.name("course_event_pkey"), new TableField[] { CourseEventTable.COURSE_EVENT.ID }, true);
    public static final UniqueKey<CourseEventRecord> UQ_COUR_EVET_EVET = Internal.createUniqueKey(CourseEventTable.COURSE_EVENT, DSL.name("uq_cour_evet_evet"), new TableField[] { CourseEventTable.COURSE_EVENT.EVENT_ID, CourseEventTable.COURSE_EVENT.COURSE_ID }, true);
    public static final UniqueKey<CurriculumRecord> CURRICULUM_NAME_I18N_ID_KEY = Internal.createUniqueKey(CurriculumTable.CURRICULUM, DSL.name("curriculum_name_i18n_id_key"), new TableField[] { CurriculumTable.CURRICULUM.NAME_I18N_ID }, true);
    public static final UniqueKey<CurriculumRecord> CURRICULUM_PKEY = Internal.createUniqueKey(CurriculumTable.CURRICULUM, DSL.name("curriculum_pkey"), new TableField[] { CurriculumTable.CURRICULUM.ID }, true);
    public static final UniqueKey<EcaCourseRecord> ECA_COURSE_PKEY = Internal.createUniqueKey(EcaCourseTable.ECA_COURSE, DSL.name("eca_course_pkey"), new TableField[] { EcaCourseTable.ECA_COURSE.ID }, true);
    public static final UniqueKey<EcaCourseAcademicMajorEducationLevelMapRecord> ECA_COURSE_ACADEMIC_MAJOR_EDUCATION_LEVEL_MAP_PKEY = Internal.createUniqueKey(EcaCourseAcademicMajorEducationLevelMapTable.ECA_COURSE_ACADEMIC_MAJOR_EDUCATION_LEVEL_MAP, DSL.name("eca_course_academic_major_education_level_map_pkey"), new TableField[] { EcaCourseAcademicMajorEducationLevelMapTable.ECA_COURSE_ACADEMIC_MAJOR_EDUCATION_LEVEL_MAP.ID }, true);
    public static final UniqueKey<EcaCourseAcademicMajorEducationLevelMapRecord> UQ_ECA_COUR_EDU_LEVL_MAP = Internal.createUniqueKey(EcaCourseAcademicMajorEducationLevelMapTable.ECA_COURSE_ACADEMIC_MAJOR_EDUCATION_LEVEL_MAP, DSL.name("uq_eca_cour_edu_levl_map"), new TableField[] { EcaCourseAcademicMajorEducationLevelMapTable.ECA_COURSE_ACADEMIC_MAJOR_EDUCATION_LEVEL_MAP.ECA_COURSE_ID, EcaCourseAcademicMajorEducationLevelMapTable.ECA_COURSE_ACADEMIC_MAJOR_EDUCATION_LEVEL_MAP.EDUCATION_LEVEL_ID }, true);
    public static final UniqueKey<EcaCourseAcademicMapRecord> ECA_COURSE_ACADEMIC_MAP_PKEY = Internal.createUniqueKey(EcaCourseAcademicMapTable.ECA_COURSE_ACADEMIC_MAP, DSL.name("eca_course_academic_map_pkey"), new TableField[] { EcaCourseAcademicMapTable.ECA_COURSE_ACADEMIC_MAP.ID }, true);
    public static final UniqueKey<EcaCourseAcademicMapRecord> UQ_ECA_COUR_ACAD_MAP_ACAD = Internal.createUniqueKey(EcaCourseAcademicMapTable.ECA_COURSE_ACADEMIC_MAP, DSL.name("uq_eca_cour_acad_map_acad"), new TableField[] { EcaCourseAcademicMapTable.ECA_COURSE_ACADEMIC_MAP.ECA_COURSE_ID, EcaCourseAcademicMapTable.ECA_COURSE_ACADEMIC_MAP.ACADEMIC_MAJOR_ID, EcaCourseAcademicMapTable.ECA_COURSE_ACADEMIC_MAP.ACADEMIC_SUBJECT_ID }, true);
    public static final UniqueKey<EcaProfileOptionRecord> ECA_PROFILE_PKEY = Internal.createUniqueKey(EcaProfileOptionTable.ECA_PROFILE_OPTION, DSL.name("eca_profile_pkey"), new TableField[] { EcaProfileOptionTable.ECA_PROFILE_OPTION.ID }, true);
    public static final UniqueKey<EcaProfileSectionRecord> ECA_PROFILE_ANSWER_PKEY = Internal.createUniqueKey(EcaProfileSectionTable.ECA_PROFILE_SECTION, DSL.name("eca_profile_answer_pkey"), new TableField[] { EcaProfileSectionTable.ECA_PROFILE_SECTION.ID }, true);
    public static final UniqueKey<EducationLevelRecord> EDUCATION_LEVEL_DESCRIPTION_I18N_ID_KEY = Internal.createUniqueKey(EducationLevelTable.EDUCATION_LEVEL, DSL.name("education_level_description_i18n_id_key"), new TableField[] { EducationLevelTable.EDUCATION_LEVEL.DESCRIPTION_I18N_ID }, true);
    public static final UniqueKey<EducationLevelRecord> EDUCATION_LEVEL_PKEY = Internal.createUniqueKey(EducationLevelTable.EDUCATION_LEVEL, DSL.name("education_level_pkey"), new TableField[] { EducationLevelTable.EDUCATION_LEVEL.ID }, true);
    public static final UniqueKey<EducationLevelRecord> UQ_EDU_LEVL_GRAD_SCHL_LEVL = Internal.createUniqueKey(EducationLevelTable.EDUCATION_LEVEL, DSL.name("uq_edu_levl_grad_schl_levl"), new TableField[] { EducationLevelTable.EDUCATION_LEVEL.GRADE, EducationLevelTable.EDUCATION_LEVEL.SCHOOL_LEVEL }, true);
    public static final UniqueKey<EducatorCalendarRecord> EDUCATOR_CALENDAR_PAYMENT_TRANSACTION_ID_KEY = Internal.createUniqueKey(EducatorCalendarTable.EDUCATOR_CALENDAR, DSL.name("educator_calendar_payment_transaction_id_key"), new TableField[] { EducatorCalendarTable.EDUCATOR_CALENDAR.PAYMENT_TRANSACTION_ID }, true);
    public static final UniqueKey<EducatorCalendarRecord> EDUCATOR_CALENDAR_PKEY = Internal.createUniqueKey(EducatorCalendarTable.EDUCATOR_CALENDAR, DSL.name("educator_calendar_pkey"), new TableField[] { EducatorCalendarTable.EDUCATOR_CALENDAR.ID }, true);
    public static final UniqueKey<EducatorCalendarExtensionRecord> EDUCATOR_CALENDAR_EXTENSION_PKEY = Internal.createUniqueKey(EducatorCalendarExtensionTable.EDUCATOR_CALENDAR_EXTENSION, DSL.name("educator_calendar_extension_pkey"), new TableField[] { EducatorCalendarExtensionTable.EDUCATOR_CALENDAR_EXTENSION.ID }, true);
    public static final UniqueKey<EducatorProfileRecord> EDUCATOR_PROFILE_ID_KEY = Internal.createUniqueKey(EducatorProfileTable.EDUCATOR_PROFILE, DSL.name("educator_profile_id_key"), new TableField[] { EducatorProfileTable.EDUCATOR_PROFILE.ID }, true);
    public static final UniqueKey<EducatorProfileRecord> EDUCATOR_PROFILE_PKEY = Internal.createUniqueKey(EducatorProfileTable.EDUCATOR_PROFILE, DSL.name("educator_profile_pkey"), new TableField[] { EducatorProfileTable.EDUCATOR_PROFILE.ID }, true);
    public static final UniqueKey<EducatorProfileRecord> EDUCATOR_PROFILE_USER_ID_KEY = Internal.createUniqueKey(EducatorProfileTable.EDUCATOR_PROFILE, DSL.name("educator_profile_user_id_key"), new TableField[] { EducatorProfileTable.EDUCATOR_PROFILE.USER_ID }, true);
    public static final UniqueKey<EducatorProfileCopy1Record> EDUCATOR_PROFILE_COPY1_PKEY = Internal.createUniqueKey(EducatorProfileCopy1Table.EDUCATOR_PROFILE_COPY1, DSL.name("educator_profile_copy1_pkey"), new TableField[] { EducatorProfileCopy1Table.EDUCATOR_PROFILE_COPY1.ID }, true);
    public static final UniqueKey<EducatorProfileCopy1Record> EDUCATOR_PROFILE_COPY1_USER_ID_KEY = Internal.createUniqueKey(EducatorProfileCopy1Table.EDUCATOR_PROFILE_COPY1, DSL.name("educator_profile_copy1_user_id_key"), new TableField[] { EducatorProfileCopy1Table.EDUCATOR_PROFILE_COPY1.USER_ID }, true);
    public static final UniqueKey<EducatorProfileExpertiseAcademicMapRecord> EDUCATOR_PROFILE_EXPERTISE_ACADEMIC_MAP_PKEY = Internal.createUniqueKey(EducatorProfileExpertiseAcademicMapTable.EDUCATOR_PROFILE_EXPERTISE_ACADEMIC_MAP, DSL.name("educator_profile_expertise_academic_map_pkey"), new TableField[] { EducatorProfileExpertiseAcademicMapTable.EDUCATOR_PROFILE_EXPERTISE_ACADEMIC_MAP.ID }, true);
    public static final UniqueKey<EducatorProfileExtensionRecord> EDUCATOR_PROFILE_EXTENSION_PKEY = Internal.createUniqueKey(EducatorProfileExtensionTable.EDUCATOR_PROFILE_EXTENSION, DSL.name("educator_profile_extension_pkey"), new TableField[] { EducatorProfileExtensionTable.EDUCATOR_PROFILE_EXTENSION.ID }, true);
    public static final UniqueKey<EducatorProfileLanguageMapRecord> EDUCATOR_PROFILE_LANGUAGE_MAP_PKEY = Internal.createUniqueKey(EducatorProfileLanguageMapTable.EDUCATOR_PROFILE_LANGUAGE_MAP, DSL.name("educator_profile_language_map_pkey"), new TableField[] { EducatorProfileLanguageMapTable.EDUCATOR_PROFILE_LANGUAGE_MAP.ID }, true);
    public static final UniqueKey<EducatorProfileLanguageMapRecord> UQ_EDUC_PROF_LANG_MAP = Internal.createUniqueKey(EducatorProfileLanguageMapTable.EDUCATOR_PROFILE_LANGUAGE_MAP, DSL.name("uq_educ_prof_lang_map"), new TableField[] { EducatorProfileLanguageMapTable.EDUCATOR_PROFILE_LANGUAGE_MAP.EDUCATOR_PROFILE_ID, EducatorProfileLanguageMapTable.EDUCATOR_PROFILE_LANGUAGE_MAP.LANGUAGE_ID }, true);
    public static final UniqueKey<EducatorSchoolRecord> EDUCATOR_SCHOOL_PKEY = Internal.createUniqueKey(EducatorSchoolTable.EDUCATOR_SCHOOL, DSL.name("educator_school_pkey"), new TableField[] { EducatorSchoolTable.EDUCATOR_SCHOOL.ID }, true);
    public static final UniqueKey<EducatorSessionNoteRecord> EDUCATOR_SESSION_NOTE_DESCRIPTION_I18N_ID_KEY = Internal.createUniqueKey(EducatorSessionNoteTable.EDUCATOR_SESSION_NOTE, DSL.name("educator_session_note_description_i18n_id_key"), new TableField[] { EducatorSessionNoteTable.EDUCATOR_SESSION_NOTE.DESCRIPTION_I18N_ID }, true);
    public static final UniqueKey<EducatorSessionNoteRecord> EDUCATOR_SESSION_NOTE_PKEY = Internal.createUniqueKey(EducatorSessionNoteTable.EDUCATOR_SESSION_NOTE, DSL.name("educator_session_note_pkey"), new TableField[] { EducatorSessionNoteTable.EDUCATOR_SESSION_NOTE.ID }, true);
    public static final UniqueKey<EducatorSessionNoteRecord> EDUCATOR_SESSION_NOTE_SUB_TITLE_I18N_ID_KEY = Internal.createUniqueKey(EducatorSessionNoteTable.EDUCATOR_SESSION_NOTE, DSL.name("educator_session_note_sub_title_i18n_id_key"), new TableField[] { EducatorSessionNoteTable.EDUCATOR_SESSION_NOTE.SUB_TITLE_I18N_ID }, true);
    public static final UniqueKey<EducatorSessionNoteRecord> EDUCATOR_SESSION_NOTE_TITLE_I18N_ID_KEY = Internal.createUniqueKey(EducatorSessionNoteTable.EDUCATOR_SESSION_NOTE, DSL.name("educator_session_note_title_i18n_id_key"), new TableField[] { EducatorSessionNoteTable.EDUCATOR_SESSION_NOTE.TITLE_I18N_ID }, true);
    public static final UniqueKey<EducatorSessionNoteItemRecord> EDUCATOR_SESSION_NOTE_ITEM_PKEY = Internal.createUniqueKey(EducatorSessionNoteItemTable.EDUCATOR_SESSION_NOTE_ITEM, DSL.name("educator_session_note_item_pkey"), new TableField[] { EducatorSessionNoteItemTable.EDUCATOR_SESSION_NOTE_ITEM.ID }, true);
    public static final UniqueKey<EducatorSessionNoteItemRecord> EDUCATOR_SESSION_NOTE_ITEM_TITLE_I18N_ID_KEY = Internal.createUniqueKey(EducatorSessionNoteItemTable.EDUCATOR_SESSION_NOTE_ITEM, DSL.name("educator_session_note_item_title_i18n_id_key"), new TableField[] { EducatorSessionNoteItemTable.EDUCATOR_SESSION_NOTE_ITEM.TITLE_I18N_ID }, true);
    public static final UniqueKey<EducatorSessionNoteItemRecord> UQ_EDUC_SESS_NOTE_ITEM = Internal.createUniqueKey(EducatorSessionNoteItemTable.EDUCATOR_SESSION_NOTE_ITEM, DSL.name("uq_educ_sess_note_item"), new TableField[] { EducatorSessionNoteItemTable.EDUCATOR_SESSION_NOTE_ITEM.EDUCATOR_SESSION_NOTE_ID, EducatorSessionNoteItemTable.EDUCATOR_SESSION_NOTE_ITEM.ORDER }, true);
    public static final UniqueKey<EducatorSessionNoteMapRecord> EDUCATOR_SESSION_NOTE_MAP_PKEY = Internal.createUniqueKey(EducatorSessionNoteMapTable.EDUCATOR_SESSION_NOTE_MAP, DSL.name("educator_session_note_map_pkey"), new TableField[] { EducatorSessionNoteMapTable.EDUCATOR_SESSION_NOTE_MAP.ID }, true);
    public static final UniqueKey<EventRecord> EVENT_DESCRIPTION_I18N_ID_KEY = Internal.createUniqueKey(EventTable.EVENT, DSL.name("event_description_i18n_id_key"), new TableField[] { EventTable.EVENT.DESCRIPTION_I18N_ID }, true);
    public static final UniqueKey<EventRecord> EVENT_PKEY = Internal.createUniqueKey(EventTable.EVENT, DSL.name("event_pkey"), new TableField[] { EventTable.EVENT.ID }, true);
    public static final UniqueKey<EventRecord> EVENT_TITLE_I18N_ID_KEY = Internal.createUniqueKey(EventTable.EVENT, DSL.name("event_title_i18n_id_key"), new TableField[] { EventTable.EVENT.TITLE_I18N_ID }, true);
    public static final UniqueKey<EventExtensionRecord> EVENT_EXTENSION_PKEY = Internal.createUniqueKey(EventExtensionTable.EVENT_EXTENSION, DSL.name("event_extension_pkey"), new TableField[] { EventExtensionTable.EVENT_EXTENSION.ID }, true);
    public static final UniqueKey<EventScheduleTimeRecord> EVENT_SCHEDULE_TIME_PKEY = Internal.createUniqueKey(EventScheduleTimeTable.EVENT_SCHEDULE_TIME, DSL.name("event_schedule_time_pkey"), new TableField[] { EventScheduleTimeTable.EVENT_SCHEDULE_TIME.ID }, true);
    public static final UniqueKey<ExpertiseRecord> EXPERTISE_DESCRIPTION_I18N_ID_KEY = Internal.createUniqueKey(ExpertiseTable.EXPERTISE, DSL.name("expertise_description_i18n_id_key"), new TableField[] { ExpertiseTable.EXPERTISE.DESCRIPTION_I18N_ID }, true);
    public static final UniqueKey<ExpertiseRecord> EXPERTISE_PKEY = Internal.createUniqueKey(ExpertiseTable.EXPERTISE, DSL.name("expertise_pkey"), new TableField[] { ExpertiseTable.EXPERTISE.ID }, true);
    public static final UniqueKey<ExpertiseAcademicMajorMapRecord> EXPERTISE_ACADEMIC_MAJOR_MAP_PKEY = Internal.createUniqueKey(ExpertiseAcademicMajorMapTable.EXPERTISE_ACADEMIC_MAJOR_MAP, DSL.name("expertise_academic_major_map_pkey"), new TableField[] { ExpertiseAcademicMajorMapTable.EXPERTISE_ACADEMIC_MAJOR_MAP.ID }, true);
    public static final UniqueKey<ExpertiseAcademicMajorMapRecord> UQ_EXPT_ACAD_MAJ_MAP_EXPT = Internal.createUniqueKey(ExpertiseAcademicMajorMapTable.EXPERTISE_ACADEMIC_MAJOR_MAP, DSL.name("uq_expt_acad_maj_map_expt"), new TableField[] { ExpertiseAcademicMajorMapTable.EXPERTISE_ACADEMIC_MAJOR_MAP.EXPERTISE_ID, ExpertiseAcademicMajorMapTable.EXPERTISE_ACADEMIC_MAJOR_MAP.ACADEMIC_MAJOR_ID }, true);
    public static final UniqueKey<I18nRecord> I18N_PKEY = Internal.createUniqueKey(I18nTable.I18N, DSL.name("i18n_pkey"), new TableField[] { I18nTable.I18N.ID }, true);
    public static final UniqueKey<InterviewTopicRecord> INTERVIEW_TOPIC_PKEY = Internal.createUniqueKey(InterviewTopicTable.INTERVIEW_TOPIC, DSL.name("interview_topic_pkey"), new TableField[] { InterviewTopicTable.INTERVIEW_TOPIC.ID }, true);
    public static final UniqueKey<LanguageRecord> LANGUAGE_DESCRIPTION_I18N_ID_KEY = Internal.createUniqueKey(LanguageTable.LANGUAGE, DSL.name("language_description_i18n_id_key"), new TableField[] { LanguageTable.LANGUAGE.DESCRIPTION_I18N_ID }, true);
    public static final UniqueKey<LanguageRecord> LANGUAGE_PKEY = Internal.createUniqueKey(LanguageTable.LANGUAGE, DSL.name("language_pkey"), new TableField[] { LanguageTable.LANGUAGE.ID }, true);
    public static final UniqueKey<OpportunityRecord> OPPORTUNITY_PKEY = Internal.createUniqueKey(OpportunityTable.OPPORTUNITY, DSL.name("opportunity_pkey"), new TableField[] { OpportunityTable.OPPORTUNITY.ID }, true);
    public static final UniqueKey<PassionMajorRecord> PASSION_MAJOR_PKEY = Internal.createUniqueKey(PassionMajorTable.PASSION_MAJOR, DSL.name("passion_major_pkey"), new TableField[] { PassionMajorTable.PASSION_MAJOR.ID }, true);
    public static final UniqueKey<PassionSubjectRecord> PASSION_SUBJECT_PKEY = Internal.createUniqueKey(PassionSubjectTable.PASSION_SUBJECT, DSL.name("passion_subject_pkey"), new TableField[] { PassionSubjectTable.PASSION_SUBJECT.ID }, true);
    public static final UniqueKey<PassionSubjectAnswerRecord> PASSION_SUBJECT_ANSWER_PKEY = Internal.createUniqueKey(PassionSubjectAnswerTable.PASSION_SUBJECT_ANSWER, DSL.name("passion_subject_answer_pkey"), new TableField[] { PassionSubjectAnswerTable.PASSION_SUBJECT_ANSWER.ID }, true);
    public static final UniqueKey<PassionSubjectBookRecord> PASSION_SUBJECT_BOOK_PKEY = Internal.createUniqueKey(PassionSubjectBookTable.PASSION_SUBJECT_BOOK, DSL.name("passion_subject_book_pkey"), new TableField[] { PassionSubjectBookTable.PASSION_SUBJECT_BOOK.ID }, true);
    public static final UniqueKey<PassionSubjectPodcastRecord> PASSION_SUBJECT_PODCAST_PKEY = Internal.createUniqueKey(PassionSubjectPodcastTable.PASSION_SUBJECT_PODCAST, DSL.name("passion_subject_podcast_pkey"), new TableField[] { PassionSubjectPodcastTable.PASSION_SUBJECT_PODCAST.ID }, true);
    public static final UniqueKey<PassionSubjectVideoRecord> PASSION_SUBJECT_VIDEO_PKEY = Internal.createUniqueKey(PassionSubjectVideoTable.PASSION_SUBJECT_VIDEO, DSL.name("passion_subject_video_pkey"), new TableField[] { PassionSubjectVideoTable.PASSION_SUBJECT_VIDEO.ID }, true);
    public static final UniqueKey<PricingRecord> PRICING_PKEY = Internal.createUniqueKey(PricingTable.PRICING, DSL.name("pricing_pkey"), new TableField[] { PricingTable.PRICING.ID }, true);
    public static final UniqueKey<SchoolRecord> SCHOOL_NAME_I18N_ID_KEY = Internal.createUniqueKey(SchoolTable.SCHOOL, DSL.name("school_name_i18n_id_key"), new TableField[] { SchoolTable.SCHOOL.NAME_I18N_ID }, true);
    public static final UniqueKey<SchoolRecord> SCHOOL_PKEY = Internal.createUniqueKey(SchoolTable.SCHOOL, DSL.name("school_pkey"), new TableField[] { SchoolTable.SCHOOL.ID }, true);
    public static final UniqueKey<SchoolExtensionRecord> SCHOOL_EXTENSION_PKEY = Internal.createUniqueKey(SchoolExtensionTable.SCHOOL_EXTENSION, DSL.name("school_extension_pkey"), new TableField[] { SchoolExtensionTable.SCHOOL_EXTENSION.ID }, true);
    public static final UniqueKey<SchoolIdentityRecord> SCHOOL_IDENTITY_NAME_I18N_ID_KEY = Internal.createUniqueKey(SchoolIdentityTable.SCHOOL_IDENTITY, DSL.name("school_identity_name_i18n_id_key"), new TableField[] { SchoolIdentityTable.SCHOOL_IDENTITY.NAME_I18N_ID }, true);
    public static final UniqueKey<SchoolIdentityRecord> SCHOOL_IDENTITY_PKEY = Internal.createUniqueKey(SchoolIdentityTable.SCHOOL_IDENTITY, DSL.name("school_identity_pkey"), new TableField[] { SchoolIdentityTable.SCHOOL_IDENTITY.ID }, true);
    public static final UniqueKey<SessionRescheduleRecord> SESSION_RESCHEDULE_PKEY = Internal.createUniqueKey(SessionRescheduleTable.SESSION_RESCHEDULE, DSL.name("session_reschedule_pkey"), new TableField[] { SessionRescheduleTable.SESSION_RESCHEDULE.ID }, true);
    public static final UniqueKey<StudentBookingSurveyAnswerMapRecord> STUDENT_BOOKING_SURVEY_ANSWER_MAP_PKEY = Internal.createUniqueKey(StudentBookingSurveyAnswerMapTable.STUDENT_BOOKING_SURVEY_ANSWER_MAP, DSL.name("student_booking_survey_answer_map_pkey"), new TableField[] { StudentBookingSurveyAnswerMapTable.STUDENT_BOOKING_SURVEY_ANSWER_MAP.ID }, true);
    public static final UniqueKey<StudentBookingSurveyMapRecord> STUDENT_BOOKING_SURVEY_MAP_PKEY = Internal.createUniqueKey(StudentBookingSurveyMapTable.STUDENT_BOOKING_SURVEY_MAP, DSL.name("student_booking_survey_map_pkey"), new TableField[] { StudentBookingSurveyMapTable.STUDENT_BOOKING_SURVEY_MAP.ID }, true);
    public static final UniqueKey<StudentBookingSurveyMapRecord> UQ_STUD_BOOK_SURV_MAP = Internal.createUniqueKey(StudentBookingSurveyMapTable.STUDENT_BOOKING_SURVEY_MAP, DSL.name("uq_stud_book_surv_map"), new TableField[] { StudentBookingSurveyMapTable.STUDENT_BOOKING_SURVEY_MAP.EDUCATOR_CALENDAR_ID, StudentBookingSurveyMapTable.STUDENT_BOOKING_SURVEY_MAP.STUDENT_SESSION_SURVEY_ID, StudentBookingSurveyMapTable.STUDENT_BOOKING_SURVEY_MAP.STUDENT_SESSION_SURVEY_VERSION_ASKED }, true);
    public static final UniqueKey<StudentEcaProfileMapRecord> STUDENT_ECA_PROFILE_MAP_PKEY = Internal.createUniqueKey(StudentEcaProfileMapTable.STUDENT_ECA_PROFILE_MAP, DSL.name("student_eca_profile_map_pkey"), new TableField[] { StudentEcaProfileMapTable.STUDENT_ECA_PROFILE_MAP.ID }, true);
    public static final UniqueKey<StudentMilestoneRecord> STUDENT_MILESTONE_PKEY = Internal.createUniqueKey(StudentMilestoneTable.STUDENT_MILESTONE, DSL.name("student_milestone_pkey"), new TableField[] { StudentMilestoneTable.STUDENT_MILESTONE.ID }, true);
    public static final UniqueKey<StudentMilestoneMapRecord> STUDENT_MILESTONE_MAP_PKEY = Internal.createUniqueKey(StudentMilestoneMapTable.STUDENT_MILESTONE_MAP, DSL.name("student_milestone_map_pkey"), new TableField[] { StudentMilestoneMapTable.STUDENT_MILESTONE_MAP.ID }, true);
    public static final UniqueKey<StudentMilestoneOptionsRecord> STUDENT_MILESTONE_QUESTIONNAIRE_COPY1_PKEY = Internal.createUniqueKey(StudentMilestoneOptionsTable.STUDENT_MILESTONE_OPTIONS, DSL.name("student_milestone_questionnaire_copy1_pkey"), new TableField[] { StudentMilestoneOptionsTable.STUDENT_MILESTONE_OPTIONS.ID }, true);
    public static final UniqueKey<StudentMilestoneQuestionnaireRecord> STUDENT_MILESTONE_COPY1_PKEY = Internal.createUniqueKey(StudentMilestoneQuestionnaireTable.STUDENT_MILESTONE_QUESTIONNAIRE, DSL.name("student_milestone_copy1_pkey"), new TableField[] { StudentMilestoneQuestionnaireTable.STUDENT_MILESTONE_QUESTIONNAIRE.ID }, true);
    public static final UniqueKey<StudentPaymentTransactionRecord> STUDENT_PAYMENT_TRANSACTION_PKEY = Internal.createUniqueKey(StudentPaymentTransactionTable.STUDENT_PAYMENT_TRANSACTION, DSL.name("student_payment_transaction_pkey"), new TableField[] { StudentPaymentTransactionTable.STUDENT_PAYMENT_TRANSACTION.ID }, true);
    public static final UniqueKey<StudentProfileRecord> STUDENT_PROFILE_PKEY = Internal.createUniqueKey(StudentProfileTable.STUDENT_PROFILE, DSL.name("student_profile_pkey"), new TableField[] { StudentProfileTable.STUDENT_PROFILE.ID }, true);
    public static final UniqueKey<StudentProfileRecord> STUDENT_PROFILE_USER_ID_KEY = Internal.createUniqueKey(StudentProfileTable.STUDENT_PROFILE, DSL.name("student_profile_user_id_key"), new TableField[] { StudentProfileTable.STUDENT_PROFILE.USER_ID }, true);
    public static final UniqueKey<StudentProfilePredictedGradeRecord> STUDENT_PROFILE_PREDICTED_GRADE_PKEY = Internal.createUniqueKey(StudentProfilePredictedGradeTable.STUDENT_PROFILE_PREDICTED_GRADE, DSL.name("student_profile_predicted_grade_pkey"), new TableField[] { StudentProfilePredictedGradeTable.STUDENT_PROFILE_PREDICTED_GRADE.ID }, true);
    public static final UniqueKey<StudentProfilePredictedGradeRecord> UQ_STUD_PROF_PRED_GRAD = Internal.createUniqueKey(StudentProfilePredictedGradeTable.STUDENT_PROFILE_PREDICTED_GRADE, DSL.name("uq_stud_prof_pred_grad"), new TableField[] { StudentProfilePredictedGradeTable.STUDENT_PROFILE_PREDICTED_GRADE.ID, StudentProfilePredictedGradeTable.STUDENT_PROFILE_PREDICTED_GRADE.ACADEMIC_SUBJECT_ID }, true);
    public static final UniqueKey<StudentProfileQuestionnaireAnswerMapRecord> STUDENT_PROFILE_QUESTIONNAIRE_ANSWER_MAP_PKEY = Internal.createUniqueKey(StudentProfileQuestionnaireAnswerMapTable.STUDENT_PROFILE_QUESTIONNAIRE_ANSWER_MAP, DSL.name("student_profile_questionnaire_answer_map_pkey"), new TableField[] { StudentProfileQuestionnaireAnswerMapTable.STUDENT_PROFILE_QUESTIONNAIRE_ANSWER_MAP.ID }, true);
    public static final UniqueKey<StudentProfileQuestionnaireMapRecord> STUDENT_PROFILE_QUESTIONNAIRE_MAP_PKEY = Internal.createUniqueKey(StudentProfileQuestionnaireMapTable.STUDENT_PROFILE_QUESTIONNAIRE_MAP, DSL.name("student_profile_questionnaire_map_pkey"), new TableField[] { StudentProfileQuestionnaireMapTable.STUDENT_PROFILE_QUESTIONNAIRE_MAP.ID }, true);
    public static final UniqueKey<StudentProfileQuestionnaireMapRecord> UQ_STUD_PROF_QUET_MAP = Internal.createUniqueKey(StudentProfileQuestionnaireMapTable.STUDENT_PROFILE_QUESTIONNAIRE_MAP, DSL.name("uq_stud_prof_quet_map"), new TableField[] { StudentProfileQuestionnaireMapTable.STUDENT_PROFILE_QUESTIONNAIRE_MAP.STUDENT_QUESTIONNAIRE_ID, StudentProfileQuestionnaireMapTable.STUDENT_PROFILE_QUESTIONNAIRE_MAP.STUDENT_QUESTIONNAIRE_VERSION_ASKED }, true);
    public static final UniqueKey<StudentProfileSchoolReportRecord> STUDENT_PROFILE_SCHOOL_REPORT_PKEY = Internal.createUniqueKey(StudentProfileSchoolReportTable.STUDENT_PROFILE_SCHOOL_REPORT, DSL.name("student_profile_school_report_pkey"), new TableField[] { StudentProfileSchoolReportTable.STUDENT_PROFILE_SCHOOL_REPORT.ID }, true);
    public static final UniqueKey<StudentQuestionnaireRecord> STUDENT_QUESTIONNAIRE_DESCRIPTION_I18N_ID_KEY = Internal.createUniqueKey(StudentQuestionnaireTable.STUDENT_QUESTIONNAIRE, DSL.name("student_questionnaire_description_i18n_id_key"), new TableField[] { StudentQuestionnaireTable.STUDENT_QUESTIONNAIRE.DESCRIPTION_I18N_ID }, true);
    public static final UniqueKey<StudentQuestionnaireRecord> STUDENT_QUESTIONNAIRE_PKEY = Internal.createUniqueKey(StudentQuestionnaireTable.STUDENT_QUESTIONNAIRE, DSL.name("student_questionnaire_pkey"), new TableField[] { StudentQuestionnaireTable.STUDENT_QUESTIONNAIRE.ID, StudentQuestionnaireTable.STUDENT_QUESTIONNAIRE.VERSION }, true);
    public static final UniqueKey<StudentQuestionnaireRecord> STUDENT_QUESTIONNAIRE_SUB_TITLE_I18N_ID_KEY = Internal.createUniqueKey(StudentQuestionnaireTable.STUDENT_QUESTIONNAIRE, DSL.name("student_questionnaire_sub_title_i18n_id_key"), new TableField[] { StudentQuestionnaireTable.STUDENT_QUESTIONNAIRE.SUB_TITLE_I18N_ID }, true);
    public static final UniqueKey<StudentQuestionnaireRecord> STUDENT_QUESTIONNAIRE_TITLE_I18N_ID_KEY = Internal.createUniqueKey(StudentQuestionnaireTable.STUDENT_QUESTIONNAIRE, DSL.name("student_questionnaire_title_i18n_id_key"), new TableField[] { StudentQuestionnaireTable.STUDENT_QUESTIONNAIRE.TITLE_I18N_ID }, true);
    public static final UniqueKey<StudentQuestionnaireAnswerRecord> STUDENT_QUESTIONNAIRE_ANSWER_DESCRIPTION_I18N_ID_KEY = Internal.createUniqueKey(StudentQuestionnaireAnswerTable.STUDENT_QUESTIONNAIRE_ANSWER, DSL.name("student_questionnaire_answer_description_i18n_id_key"), new TableField[] { StudentQuestionnaireAnswerTable.STUDENT_QUESTIONNAIRE_ANSWER.DESCRIPTION_I18N_ID }, true);
    public static final UniqueKey<StudentQuestionnaireAnswerRecord> STUDENT_QUESTIONNAIRE_ANSWER_PKEY = Internal.createUniqueKey(StudentQuestionnaireAnswerTable.STUDENT_QUESTIONNAIRE_ANSWER, DSL.name("student_questionnaire_answer_pkey"), new TableField[] { StudentQuestionnaireAnswerTable.STUDENT_QUESTIONNAIRE_ANSWER.ID }, true);
    public static final UniqueKey<StudentQuestionnaireAnswerRecord> UQ_STU_QUET_ANS_QUES = Internal.createUniqueKey(StudentQuestionnaireAnswerTable.STUDENT_QUESTIONNAIRE_ANSWER, DSL.name("uq_stu_quet_ans_ques"), new TableField[] { StudentQuestionnaireAnswerTable.STUDENT_QUESTIONNAIRE_ANSWER.STUDENT_QUESTIONNAIRE_QUESTION_ID, StudentQuestionnaireAnswerTable.STUDENT_QUESTIONNAIRE_ANSWER.ORDER }, true);
    public static final UniqueKey<StudentQuestionnaireQuestionRecord> STUDENT_QUESTIONNAIRE_QUESTION_DESCRIPTION_I18N_ID_KEY = Internal.createUniqueKey(StudentQuestionnaireQuestionTable.STUDENT_QUESTIONNAIRE_QUESTION, DSL.name("student_questionnaire_question_description_i18n_id_key"), new TableField[] { StudentQuestionnaireQuestionTable.STUDENT_QUESTIONNAIRE_QUESTION.DESCRIPTION_I18N_ID }, true);
    public static final UniqueKey<StudentQuestionnaireQuestionRecord> STUDENT_QUESTIONNAIRE_QUESTION_PKEY = Internal.createUniqueKey(StudentQuestionnaireQuestionTable.STUDENT_QUESTIONNAIRE_QUESTION, DSL.name("student_questionnaire_question_pkey"), new TableField[] { StudentQuestionnaireQuestionTable.STUDENT_QUESTIONNAIRE_QUESTION.ID }, true);
    public static final UniqueKey<StudentQuestionnaireQuestionRecord> UQ_STU_QUET_QUES = Internal.createUniqueKey(StudentQuestionnaireQuestionTable.STUDENT_QUESTIONNAIRE_QUESTION, DSL.name("uq_stu_quet_ques"), new TableField[] { StudentQuestionnaireQuestionTable.STUDENT_QUESTIONNAIRE_QUESTION.STUDENT_QUESTIONNAIRE_SECTION_ID, StudentQuestionnaireQuestionTable.STUDENT_QUESTIONNAIRE_QUESTION.ORDER }, true);
    public static final UniqueKey<StudentQuestionnaireSectionRecord> STUDENT_QUESTIONNAIRE_SECTION_PKEY = Internal.createUniqueKey(StudentQuestionnaireSectionTable.STUDENT_QUESTIONNAIRE_SECTION, DSL.name("student_questionnaire_section_pkey"), new TableField[] { StudentQuestionnaireSectionTable.STUDENT_QUESTIONNAIRE_SECTION.ID }, true);
    public static final UniqueKey<StudentQuestionnaireSectionRecord> STUDENT_QUESTIONNAIRE_SECTION_TITLE_I18N_ID_KEY = Internal.createUniqueKey(StudentQuestionnaireSectionTable.STUDENT_QUESTIONNAIRE_SECTION, DSL.name("student_questionnaire_section_title_i18n_id_key"), new TableField[] { StudentQuestionnaireSectionTable.STUDENT_QUESTIONNAIRE_SECTION.TITLE_I18N_ID }, true);
    public static final UniqueKey<StudentQuestionnaireSectionRecord> UQ_STU_QUET_SECT_QUET = Internal.createUniqueKey(StudentQuestionnaireSectionTable.STUDENT_QUESTIONNAIRE_SECTION, DSL.name("uq_stu_quet_sect_quet"), new TableField[] { StudentQuestionnaireSectionTable.STUDENT_QUESTIONNAIRE_SECTION.STUDENT_QUESTIONNAIRE_ID, StudentQuestionnaireSectionTable.STUDENT_QUESTIONNAIRE_SECTION.STUDENT_QUESTIONNAIRE_VERSION, StudentQuestionnaireSectionTable.STUDENT_QUESTIONNAIRE_SECTION.ORDER }, true);
    public static final UniqueKey<StudentSessionSurveyRecord> STUDENT_SESSION_SURVEY_DESCRIPTION_I18N_ID_KEY = Internal.createUniqueKey(StudentSessionSurveyTable.STUDENT_SESSION_SURVEY, DSL.name("student_session_survey_description_i18n_id_key"), new TableField[] { StudentSessionSurveyTable.STUDENT_SESSION_SURVEY.DESCRIPTION_I18N_ID }, true);
    public static final UniqueKey<StudentSessionSurveyRecord> STUDENT_SESSION_SURVEY_PKEY = Internal.createUniqueKey(StudentSessionSurveyTable.STUDENT_SESSION_SURVEY, DSL.name("student_session_survey_pkey"), new TableField[] { StudentSessionSurveyTable.STUDENT_SESSION_SURVEY.ID, StudentSessionSurveyTable.STUDENT_SESSION_SURVEY.VERSION }, true);
    public static final UniqueKey<StudentSessionSurveyRecord> STUDENT_SESSION_SURVEY_SUB_TITLE_I18N_ID_KEY = Internal.createUniqueKey(StudentSessionSurveyTable.STUDENT_SESSION_SURVEY, DSL.name("student_session_survey_sub_title_i18n_id_key"), new TableField[] { StudentSessionSurveyTable.STUDENT_SESSION_SURVEY.SUB_TITLE_I18N_ID }, true);
    public static final UniqueKey<StudentSessionSurveyRecord> STUDENT_SESSION_SURVEY_TITLE_I18N_ID_KEY = Internal.createUniqueKey(StudentSessionSurveyTable.STUDENT_SESSION_SURVEY, DSL.name("student_session_survey_title_i18n_id_key"), new TableField[] { StudentSessionSurveyTable.STUDENT_SESSION_SURVEY.TITLE_I18N_ID }, true);
    public static final UniqueKey<StudentSessionSurveyAnswerRecord> STUDENT_SESSION_SURVEY_ANSWER_DESCRIPTION_I18N_ID_KEY = Internal.createUniqueKey(StudentSessionSurveyAnswerTable.STUDENT_SESSION_SURVEY_ANSWER, DSL.name("student_session_survey_answer_description_i18n_id_key"), new TableField[] { StudentSessionSurveyAnswerTable.STUDENT_SESSION_SURVEY_ANSWER.DESCRIPTION_I18N_ID }, true);
    public static final UniqueKey<StudentSessionSurveyAnswerRecord> STUDENT_SESSION_SURVEY_ANSWER_PKEY = Internal.createUniqueKey(StudentSessionSurveyAnswerTable.STUDENT_SESSION_SURVEY_ANSWER, DSL.name("student_session_survey_answer_pkey"), new TableField[] { StudentSessionSurveyAnswerTable.STUDENT_SESSION_SURVEY_ANSWER.ID }, true);
    public static final UniqueKey<StudentSessionSurveyAnswerRecord> UQ_STUD_SESS_SURV_ANS_QUES = Internal.createUniqueKey(StudentSessionSurveyAnswerTable.STUDENT_SESSION_SURVEY_ANSWER, DSL.name("uq_stud_sess_surv_ans_ques"), new TableField[] { StudentSessionSurveyAnswerTable.STUDENT_SESSION_SURVEY_ANSWER.STUDENT_SESSION_SURVEY_QUESTION_ID, StudentSessionSurveyAnswerTable.STUDENT_SESSION_SURVEY_ANSWER.ORDER }, true);
    public static final UniqueKey<StudentSessionSurveyQuestionRecord> STUDENT_SESSION_SURVEY_QUESTION_DESCRIPTION_I18N_ID_KEY = Internal.createUniqueKey(StudentSessionSurveyQuestionTable.STUDENT_SESSION_SURVEY_QUESTION, DSL.name("student_session_survey_question_description_i18n_id_key"), new TableField[] { StudentSessionSurveyQuestionTable.STUDENT_SESSION_SURVEY_QUESTION.DESCRIPTION_I18N_ID }, true);
    public static final UniqueKey<StudentSessionSurveyQuestionRecord> STUDENT_SESSION_SURVEY_QUESTION_PKEY = Internal.createUniqueKey(StudentSessionSurveyQuestionTable.STUDENT_SESSION_SURVEY_QUESTION, DSL.name("student_session_survey_question_pkey"), new TableField[] { StudentSessionSurveyQuestionTable.STUDENT_SESSION_SURVEY_QUESTION.ID }, true);
    public static final UniqueKey<StudentSessionSurveyQuestionRecord> UQ_STUD_SESS_SURV_QUES = Internal.createUniqueKey(StudentSessionSurveyQuestionTable.STUDENT_SESSION_SURVEY_QUESTION, DSL.name("uq_stud_sess_surv_ques"), new TableField[] { StudentSessionSurveyQuestionTable.STUDENT_SESSION_SURVEY_QUESTION.STUDENT_SESSION_SURVEY_ID, StudentSessionSurveyQuestionTable.STUDENT_SESSION_SURVEY_QUESTION.STUDENT_SESSION_SURVEY_VERSION, StudentSessionSurveyQuestionTable.STUDENT_SESSION_SURVEY_QUESTION.ORDER }, true);
    public static final UniqueKey<StudentUploadedInterviewRecord> STUDENT_UPLOADED_INTERVIEW_PAYMENT_TRANSACTION_ID_KEY = Internal.createUniqueKey(StudentUploadedInterviewTable.STUDENT_UPLOADED_INTERVIEW, DSL.name("student_uploaded_interview_payment_transaction_id_key"), new TableField[] { StudentUploadedInterviewTable.STUDENT_UPLOADED_INTERVIEW.PAYMENT_TRANSACTION_ID }, true);
    public static final UniqueKey<StudentUploadedInterviewRecord> STUDENT_UPLOADED_INTERVIEW_PKEY = Internal.createUniqueKey(StudentUploadedInterviewTable.STUDENT_UPLOADED_INTERVIEW, DSL.name("student_uploaded_interview_pkey"), new TableField[] { StudentUploadedInterviewTable.STUDENT_UPLOADED_INTERVIEW.ID }, true);
    public static final UniqueKey<StudentUploadedSupervisorReviewRecord> STUDENT_UPLOADED_SUPERVISOR_REVIEW_PKEY = Internal.createUniqueKey(StudentUploadedSupervisorReviewTable.STUDENT_UPLOADED_SUPERVISOR_REVIEW, DSL.name("student_uploaded_supervisor_review_pkey"), new TableField[] { StudentUploadedSupervisorReviewTable.STUDENT_UPLOADED_SUPERVISOR_REVIEW.ID }, true);
    public static final UniqueKey<StudentUploadedWritingRecord> STUDENT_UPLOADED_WRITING_PAYMENT_TRANSACTION_ID_KEY = Internal.createUniqueKey(StudentUploadedWritingTable.STUDENT_UPLOADED_WRITING, DSL.name("student_uploaded_writing_payment_transaction_id_key"), new TableField[] { StudentUploadedWritingTable.STUDENT_UPLOADED_WRITING.PAYMENT_TRANSACTION_ID }, true);
    public static final UniqueKey<StudentUploadedWritingRecord> STUDENT_UPLOADED_WRITING_PKEY = Internal.createUniqueKey(StudentUploadedWritingTable.STUDENT_UPLOADED_WRITING, DSL.name("student_uploaded_writing_pkey"), new TableField[] { StudentUploadedWritingTable.STUDENT_UPLOADED_WRITING.ID }, true);
    public static final UniqueKey<TagRecord> TAG_DESCRIPTION_I18N_ID_KEY = Internal.createUniqueKey(TagTable.TAG, DSL.name("tag_description_i18n_id_key"), new TableField[] { TagTable.TAG.DESCRIPTION_I18N_ID }, true);
    public static final UniqueKey<TagRecord> TAG_PKEY = Internal.createUniqueKey(TagTable.TAG, DSL.name("tag_pkey"), new TableField[] { TagTable.TAG.ID }, true);
    public static final UniqueKey<TaggingRecord> TAGGING_PKEY = Internal.createUniqueKey(TaggingTable.TAGGING, DSL.name("tagging_pkey"), new TableField[] { TaggingTable.TAGGING.ID }, true);
    public static final UniqueKey<UserRecord> USER_EMAIL_KEY = Internal.createUniqueKey(UserTable.USER, DSL.name("user_email_key"), new TableField[] { UserTable.USER.EMAIL }, true);
    public static final UniqueKey<UserRecord> USER_FIST_NAME_I18N_ID_KEY = Internal.createUniqueKey(UserTable.USER, DSL.name("user_fist_name_i18n_id_key"), new TableField[] { UserTable.USER.FIST_NAME_I18N_ID }, true);
    public static final UniqueKey<UserRecord> USER_GOOGLE_CLIENT_ID_KEY = Internal.createUniqueKey(UserTable.USER, DSL.name("user_google_client_id_key"), new TableField[] { UserTable.USER.GOOGLE_CLIENT_ID }, true);
    public static final UniqueKey<UserRecord> USER_LAST_NAME_I18N_ID_KEY = Internal.createUniqueKey(UserTable.USER, DSL.name("user_last_name_i18n_id_key"), new TableField[] { UserTable.USER.LAST_NAME_I18N_ID }, true);
    public static final UniqueKey<UserRecord> USER_LOGIN_ID_KEY = Internal.createUniqueKey(UserTable.USER, DSL.name("user_login_id_key"), new TableField[] { UserTable.USER.LOGIN_ID }, true);
    public static final UniqueKey<UserRecord> USER_PKEY = Internal.createUniqueKey(UserTable.USER, DSL.name("user_pkey"), new TableField[] { UserTable.USER.ID }, true);
    public static final UniqueKey<UserRecord> USER_TENCENT_WECHAT_CLIENT_ID_KEY = Internal.createUniqueKey(UserTable.USER, DSL.name("user_tencent_wechat_client_id_key"), new TableField[] { UserTable.USER.TENCENT_WECHAT_CLIENT_ID }, true);
    public static final UniqueKey<UserNotificationRecord> USER_NOTIFICATION_PKEY = Internal.createUniqueKey(UserNotificationTable.USER_NOTIFICATION, DSL.name("user_notification_pkey"), new TableField[] { UserNotificationTable.USER_NOTIFICATION.ID }, true);
    public static final UniqueKey<WritingTopicRecord> WRITING_TOPIC_PKEY = Internal.createUniqueKey(WritingTopicTable.WRITING_TOPIC, DSL.name("writing_topic_pkey"), new TableField[] { WritingTopicTable.WRITING_TOPIC.ID }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<AcademicMajorRecord, I18nRecord> ACADEMIC_MAJOR__FK_ACAD_MAJ_DESC = Internal.createForeignKey(AcademicMajorTable.ACADEMIC_MAJOR, DSL.name("fk_acad_maj_desc"), new TableField[] { AcademicMajorTable.ACADEMIC_MAJOR.DESCRIPTION_I18N_ID }, Keys.I18N_PKEY, new TableField[] { I18nTable.I18N.ID }, true);
    public static final ForeignKey<AcademicMajorRecord, TagRecord> ACADEMIC_MAJOR__FK_ACAD_MAJ_TAG = Internal.createForeignKey(AcademicMajorTable.ACADEMIC_MAJOR, DSL.name("fk_acad_maj_tag"), new TableField[] { AcademicMajorTable.ACADEMIC_MAJOR.TAG_ID }, Keys.TAG_PKEY, new TableField[] { TagTable.TAG.ID }, true);
    public static final ForeignKey<AcademicMajorRecord, I18nRecord> ACADEMIC_MAJOR__FK_ACAD_MAJ_TITL = Internal.createForeignKey(AcademicMajorTable.ACADEMIC_MAJOR, DSL.name("fk_acad_maj_titl"), new TableField[] { AcademicMajorTable.ACADEMIC_MAJOR.TITLE_I18N_ID }, Keys.I18N_PKEY, new TableField[] { I18nTable.I18N.ID }, true);
    public static final ForeignKey<AcademicMajorSubjectMapRecord, AcademicSubjectRecord> ACADEMIC_MAJOR_SUBJECT_MAP__FK_ACAD_MAJ_SUB_MAP_ACAD_SUB = Internal.createForeignKey(AcademicMajorSubjectMapTable.ACADEMIC_MAJOR_SUBJECT_MAP, DSL.name("fk_acad_maj_sub_map_acad_sub"), new TableField[] { AcademicMajorSubjectMapTable.ACADEMIC_MAJOR_SUBJECT_MAP.ACADEMIC_SUBJECT_ID }, Keys.ACADEMIC_SUBJECT_PKEY, new TableField[] { AcademicSubjectTable.ACADEMIC_SUBJECT.ID }, true);
    public static final ForeignKey<AcademicMajorSubjectMapRecord, AcademicMajorRecord> ACADEMIC_MAJOR_SUBJECT_MAP__FK_ACAD_MAJ_SUB_MAP_MAJ = Internal.createForeignKey(AcademicMajorSubjectMapTable.ACADEMIC_MAJOR_SUBJECT_MAP, DSL.name("fk_acad_maj_sub_map_maj"), new TableField[] { AcademicMajorSubjectMapTable.ACADEMIC_MAJOR_SUBJECT_MAP.ACADEMIC_MAJOR_ID }, Keys.ACADEMIC_MAJOR_PKEY, new TableField[] { AcademicMajorTable.ACADEMIC_MAJOR.ID }, true);
    public static final ForeignKey<AcademicSubjectRecord, I18nRecord> ACADEMIC_SUBJECT__FK_ACAD_SUB_DESC = Internal.createForeignKey(AcademicSubjectTable.ACADEMIC_SUBJECT, DSL.name("fk_acad_sub_desc"), new TableField[] { AcademicSubjectTable.ACADEMIC_SUBJECT.DESCRIPTION_I18N_ID }, Keys.I18N_PKEY, new TableField[] { I18nTable.I18N.ID }, true);
    public static final ForeignKey<AcademicSubjectRecord, I18nRecord> ACADEMIC_SUBJECT__FK_ACAD_SUB_DESC_MAST = Internal.createForeignKey(AcademicSubjectTable.ACADEMIC_SUBJECT, DSL.name("fk_acad_sub_desc_mast"), new TableField[] { AcademicSubjectTable.ACADEMIC_SUBJECT.DESCRIPTION_MASTER_DEGREE_I18N_ID }, Keys.I18N_PKEY, new TableField[] { I18nTable.I18N.ID }, true);
    public static final ForeignKey<AcademicSubjectRecord, I18nRecord> ACADEMIC_SUBJECT__FK_ACAD_SUB_DESC_PHD = Internal.createForeignKey(AcademicSubjectTable.ACADEMIC_SUBJECT, DSL.name("fk_acad_sub_desc_phd"), new TableField[] { AcademicSubjectTable.ACADEMIC_SUBJECT.DESCRIPTION_PHD_I18N_ID }, Keys.I18N_PKEY, new TableField[] { I18nTable.I18N.ID }, true);
    public static final ForeignKey<AcademicSubjectRecord, TagRecord> ACADEMIC_SUBJECT__FK_ACAD_SUB_TAG = Internal.createForeignKey(AcademicSubjectTable.ACADEMIC_SUBJECT, DSL.name("fk_acad_sub_tag"), new TableField[] { AcademicSubjectTable.ACADEMIC_SUBJECT.TAG_ID }, Keys.TAG_PKEY, new TableField[] { TagTable.TAG.ID }, true);
    public static final ForeignKey<AcademicSubjectRecord, I18nRecord> ACADEMIC_SUBJECT__FK_ACAD_SUB_TITL = Internal.createForeignKey(AcademicSubjectTable.ACADEMIC_SUBJECT, DSL.name("fk_acad_sub_titl"), new TableField[] { AcademicSubjectTable.ACADEMIC_SUBJECT.TITLE_I18N_ID }, Keys.I18N_PKEY, new TableField[] { I18nTable.I18N.ID }, true);
    public static final ForeignKey<AcademicSubjectResourceRecord, AcademicSubjectRecord> ACADEMIC_SUBJECT_RESOURCE__FK_ACAD_SUB_RESC_ACAD_SUB = Internal.createForeignKey(AcademicSubjectResourceTable.ACADEMIC_SUBJECT_RESOURCE, DSL.name("fk_acad_sub_resc_acad_sub"), new TableField[] { AcademicSubjectResourceTable.ACADEMIC_SUBJECT_RESOURCE.ACADEMIC_SUBJECT_ID }, Keys.ACADEMIC_SUBJECT_PKEY, new TableField[] { AcademicSubjectTable.ACADEMIC_SUBJECT.ID }, true);
    public static final ForeignKey<AcademicSubjectResourceRecord, I18nRecord> ACADEMIC_SUBJECT_RESOURCE__FK_ACAD_SUB_RESC_TITL = Internal.createForeignKey(AcademicSubjectResourceTable.ACADEMIC_SUBJECT_RESOURCE, DSL.name("fk_acad_sub_resc_titl"), new TableField[] { AcademicSubjectResourceTable.ACADEMIC_SUBJECT_RESOURCE.TITLE_I18N_ID }, Keys.I18N_PKEY, new TableField[] { I18nTable.I18N.ID }, true);
    public static final ForeignKey<CityRecord, CountryRecord> CITY__FK_CITY_COUT = Internal.createForeignKey(CityTable.CITY, DSL.name("fk_city_cout"), new TableField[] { CityTable.CITY.COUNTRY_ID }, Keys.COUNTRY_PKEY, new TableField[] { CountryTable.COUNTRY.ID }, true);
    public static final ForeignKey<CityRecord, I18nRecord> CITY__FK_CITY_NAME = Internal.createForeignKey(CityTable.CITY, DSL.name("fk_city_name"), new TableField[] { CityTable.CITY.NAME_I18N_ID }, Keys.I18N_PKEY, new TableField[] { I18nTable.I18N.ID }, true);
    public static final ForeignKey<CountryRecord, I18nRecord> COUNTRY__FK_COUT_NAME = Internal.createForeignKey(CountryTable.COUNTRY, DSL.name("fk_cout_name"), new TableField[] { CountryTable.COUNTRY.NAME_I18N_ID }, Keys.I18N_PKEY, new TableField[] { I18nTable.I18N.ID }, true);
    public static final ForeignKey<CountryRecord, TagRecord> COUNTRY__FK_COUT_TAG = Internal.createForeignKey(CountryTable.COUNTRY, DSL.name("fk_cout_tag"), new TableField[] { CountryTable.COUNTRY.TAG_ID }, Keys.TAG_PKEY, new TableField[] { TagTable.TAG.ID }, true);
    public static final ForeignKey<CourseRecord, AcademicMajorRecord> COURSE__FK_EVET_ACAD_MAJ = Internal.createForeignKey(CourseTable.COURSE, DSL.name("fk_evet_acad_maj"), new TableField[] { CourseTable.COURSE.ACADEMIC_MAJOR_ID }, Keys.ACADEMIC_MAJOR_PKEY, new TableField[] { AcademicMajorTable.ACADEMIC_MAJOR.ID }, true);
    public static final ForeignKey<CourseRecord, I18nRecord> COURSE__FK_EVET_DESC = Internal.createForeignKey(CourseTable.COURSE, DSL.name("fk_evet_desc"), new TableField[] { CourseTable.COURSE.DESCRIPTION_I18N_ID }, Keys.I18N_PKEY, new TableField[] { I18nTable.I18N.ID }, true);
    public static final ForeignKey<CourseRecord, I18nRecord> COURSE__FK_EVET_TITL = Internal.createForeignKey(CourseTable.COURSE, DSL.name("fk_evet_titl"), new TableField[] { CourseTable.COURSE.TITLE_I18N_ID }, Keys.I18N_PKEY, new TableField[] { I18nTable.I18N.ID }, true);
    public static final ForeignKey<CourseEventRecord, CourseRecord> COURSE_EVENT__FK_COUR_EVET_ACAD_MAJ = Internal.createForeignKey(CourseEventTable.COURSE_EVENT, DSL.name("fk_cour_evet_acad_maj"), new TableField[] { CourseEventTable.COURSE_EVENT.COURSE_ID }, Keys.COURSE_PKEY, new TableField[] { CourseTable.COURSE.ID }, true);
    public static final ForeignKey<CourseEventRecord, EventRecord> COURSE_EVENT__FK_COUR_EVET_EVET = Internal.createForeignKey(CourseEventTable.COURSE_EVENT, DSL.name("fk_cour_evet_evet"), new TableField[] { CourseEventTable.COURSE_EVENT.EVENT_ID }, Keys.EVENT_PKEY, new TableField[] { EventTable.EVENT.ID }, true);
    public static final ForeignKey<CurriculumRecord, I18nRecord> CURRICULUM__FK_CRCU_NAME = Internal.createForeignKey(CurriculumTable.CURRICULUM, DSL.name("fk_crcu_name"), new TableField[] { CurriculumTable.CURRICULUM.NAME_I18N_ID }, Keys.I18N_PKEY, new TableField[] { I18nTable.I18N.ID }, true);
    public static final ForeignKey<CurriculumRecord, TagRecord> CURRICULUM__FK_CRCU_TAG = Internal.createForeignKey(CurriculumTable.CURRICULUM, DSL.name("fk_crcu_tag"), new TableField[] { CurriculumTable.CURRICULUM.TAG_ID }, Keys.TAG_PKEY, new TableField[] { TagTable.TAG.ID }, true);
    public static final ForeignKey<EcaCourseRecord, I18nRecord> ECA_COURSE__FK_ECA_COUR_DESC = Internal.createForeignKey(EcaCourseTable.ECA_COURSE, DSL.name("fk_eca_cour_desc"), new TableField[] { EcaCourseTable.ECA_COURSE.DESCRIPTION_I18N_ID }, Keys.I18N_PKEY, new TableField[] { I18nTable.I18N.ID }, true);
    public static final ForeignKey<EcaCourseRecord, I18nRecord> ECA_COURSE__FK_ECA_COUR_ELIG = Internal.createForeignKey(EcaCourseTable.ECA_COURSE, DSL.name("fk_eca_cour_elig"), new TableField[] { EcaCourseTable.ECA_COURSE.ELIGIBILITY_I18N_ID }, Keys.I18N_PKEY, new TableField[] { I18nTable.I18N.ID }, true);
    public static final ForeignKey<EcaCourseRecord, I18nRecord> ECA_COURSE__FK_ECA_COUR_TITL = Internal.createForeignKey(EcaCourseTable.ECA_COURSE, DSL.name("fk_eca_cour_titl"), new TableField[] { EcaCourseTable.ECA_COURSE.TITLE_I18N_ID }, Keys.I18N_PKEY, new TableField[] { I18nTable.I18N.ID }, true);
    public static final ForeignKey<EcaCourseAcademicMajorEducationLevelMapRecord, EcaCourseRecord> ECA_COURSE_ACADEMIC_MAJOR_EDUCATION_LEVEL_MAP__FK_ECA_COUR_EDU_LEVL_MAP_ECA_COUR = Internal.createForeignKey(EcaCourseAcademicMajorEducationLevelMapTable.ECA_COURSE_ACADEMIC_MAJOR_EDUCATION_LEVEL_MAP, DSL.name("fk_eca_cour_edu_levl_map_eca_cour"), new TableField[] { EcaCourseAcademicMajorEducationLevelMapTable.ECA_COURSE_ACADEMIC_MAJOR_EDUCATION_LEVEL_MAP.ECA_COURSE_ID }, Keys.ECA_COURSE_PKEY, new TableField[] { EcaCourseTable.ECA_COURSE.ID }, true);
    public static final ForeignKey<EcaCourseAcademicMajorEducationLevelMapRecord, EducationLevelRecord> ECA_COURSE_ACADEMIC_MAJOR_EDUCATION_LEVEL_MAP__FK_ECA_COUR_EDU_LEVL_MAP_EDU_LEVL = Internal.createForeignKey(EcaCourseAcademicMajorEducationLevelMapTable.ECA_COURSE_ACADEMIC_MAJOR_EDUCATION_LEVEL_MAP, DSL.name("fk_eca_cour_edu_levl_map_edu_levl"), new TableField[] { EcaCourseAcademicMajorEducationLevelMapTable.ECA_COURSE_ACADEMIC_MAJOR_EDUCATION_LEVEL_MAP.EDUCATION_LEVEL_ID }, Keys.EDUCATION_LEVEL_PKEY, new TableField[] { EducationLevelTable.EDUCATION_LEVEL.ID }, true);
    public static final ForeignKey<EcaCourseAcademicMapRecord, AcademicMajorRecord> ECA_COURSE_ACADEMIC_MAP__FK_ECA_COUR_ACAD_MAP_ACAD_MAJ = Internal.createForeignKey(EcaCourseAcademicMapTable.ECA_COURSE_ACADEMIC_MAP, DSL.name("fk_eca_cour_acad_map_acad_maj"), new TableField[] { EcaCourseAcademicMapTable.ECA_COURSE_ACADEMIC_MAP.ACADEMIC_MAJOR_ID }, Keys.ACADEMIC_MAJOR_PKEY, new TableField[] { AcademicMajorTable.ACADEMIC_MAJOR.ID }, true);
    public static final ForeignKey<EcaCourseAcademicMapRecord, AcademicMajorSubjectMapRecord> ECA_COURSE_ACADEMIC_MAP__FK_ECA_COUR_ACAD_MAP_ACAD_MAJ_SUB = Internal.createForeignKey(EcaCourseAcademicMapTable.ECA_COURSE_ACADEMIC_MAP, DSL.name("fk_eca_cour_acad_map_acad_maj_sub"), new TableField[] { EcaCourseAcademicMapTable.ECA_COURSE_ACADEMIC_MAP.ACADEMIC_MAJOR_ID, EcaCourseAcademicMapTable.ECA_COURSE_ACADEMIC_MAP.ACADEMIC_SUBJECT_ID }, Keys.UQ_ACAD_MAJ_SUB_MAP, new TableField[] { AcademicMajorSubjectMapTable.ACADEMIC_MAJOR_SUBJECT_MAP.ACADEMIC_MAJOR_ID, AcademicMajorSubjectMapTable.ACADEMIC_MAJOR_SUBJECT_MAP.ACADEMIC_SUBJECT_ID }, true);
    public static final ForeignKey<EcaCourseAcademicMapRecord, EcaCourseRecord> ECA_COURSE_ACADEMIC_MAP__FK_ECA_COUR_ACAD_MAP_ECA_COUR = Internal.createForeignKey(EcaCourseAcademicMapTable.ECA_COURSE_ACADEMIC_MAP, DSL.name("fk_eca_cour_acad_map_eca_cour"), new TableField[] { EcaCourseAcademicMapTable.ECA_COURSE_ACADEMIC_MAP.ECA_COURSE_ID }, Keys.ECA_COURSE_PKEY, new TableField[] { EcaCourseTable.ECA_COURSE.ID }, true);
    public static final ForeignKey<EducationLevelRecord, I18nRecord> EDUCATION_LEVEL__FK_EDU_LEVL_DESC = Internal.createForeignKey(EducationLevelTable.EDUCATION_LEVEL, DSL.name("fk_edu_levl_desc"), new TableField[] { EducationLevelTable.EDUCATION_LEVEL.DESCRIPTION_I18N_ID }, Keys.I18N_PKEY, new TableField[] { I18nTable.I18N.ID }, true);
    public static final ForeignKey<EducatorCalendarRecord, EducatorProfileRecord> EDUCATOR_CALENDAR__FK_EDUC_CALD_EDUC_PROF = Internal.createForeignKey(EducatorCalendarTable.EDUCATOR_CALENDAR, DSL.name("fk_educ_cald_educ_prof"), new TableField[] { EducatorCalendarTable.EDUCATOR_CALENDAR.EDUCATOR_PROFILE_ID }, Keys.EDUCATOR_PROFILE_PKEY, new TableField[] { EducatorProfileTable.EDUCATOR_PROFILE.ID }, true);
    public static final ForeignKey<EducatorCalendarRecord, StudentPaymentTransactionRecord> EDUCATOR_CALENDAR__FK_EDUC_CALD_STUD_TRAN = Internal.createForeignKey(EducatorCalendarTable.EDUCATOR_CALENDAR, DSL.name("fk_educ_cald_stud_tran"), new TableField[] { EducatorCalendarTable.EDUCATOR_CALENDAR.PAYMENT_TRANSACTION_ID }, Keys.STUDENT_PAYMENT_TRANSACTION_PKEY, new TableField[] { StudentPaymentTransactionTable.STUDENT_PAYMENT_TRANSACTION.ID }, true);
    public static final ForeignKey<EducatorProfileRecord, EducationLevelRecord> EDUCATOR_PROFILE__FK_EDUC_PROF_EDU_LEVL = Internal.createForeignKey(EducatorProfileTable.EDUCATOR_PROFILE, DSL.name("fk_educ_prof_edu_levl"), new TableField[] { EducatorProfileTable.EDUCATOR_PROFILE.UNIVERSITY_EDUCATION_LEVEL_ID }, Keys.EDUCATION_LEVEL_PKEY, new TableField[] { EducationLevelTable.EDUCATION_LEVEL.ID }, true);
    public static final ForeignKey<EducatorProfileRecord, SchoolRecord> EDUCATOR_PROFILE__FK_EDUC_PROF_UITY = Internal.createForeignKey(EducatorProfileTable.EDUCATOR_PROFILE, DSL.name("fk_educ_prof_uity"), new TableField[] { EducatorProfileTable.EDUCATOR_PROFILE.UNIVERSITY_ID }, Keys.SCHOOL_PKEY, new TableField[] { SchoolTable.SCHOOL.ID }, true);
    public static final ForeignKey<EducatorProfileRecord, SchoolIdentityRecord> EDUCATOR_PROFILE__FK_EDUC_PROF_UITY_IDTY = Internal.createForeignKey(EducatorProfileTable.EDUCATOR_PROFILE, DSL.name("fk_educ_prof_uity_idty"), new TableField[] { EducatorProfileTable.EDUCATOR_PROFILE.UNIVERSITY_IDENTITY_ID }, Keys.SCHOOL_IDENTITY_PKEY, new TableField[] { SchoolIdentityTable.SCHOOL_IDENTITY.ID }, true);
    public static final ForeignKey<EducatorProfileRecord, UserRecord> EDUCATOR_PROFILE__FK_EDUC_PROF_USER = Internal.createForeignKey(EducatorProfileTable.EDUCATOR_PROFILE, DSL.name("fk_educ_prof_user"), new TableField[] { EducatorProfileTable.EDUCATOR_PROFILE.USER_ID }, Keys.USER_PKEY, new TableField[] { UserTable.USER.ID }, true);
    public static final ForeignKey<EducatorProfileCopy1Record, CountryRecord> EDUCATOR_PROFILE_COPY1__EDUCATOR_PROFILE_COPY1_COUNTRY_ID_FKEY = Internal.createForeignKey(EducatorProfileCopy1Table.EDUCATOR_PROFILE_COPY1, DSL.name("educator_profile_copy1_country_id_fkey"), new TableField[] { EducatorProfileCopy1Table.EDUCATOR_PROFILE_COPY1.COUNTRY_ID }, Keys.COUNTRY_PKEY, new TableField[] { CountryTable.COUNTRY.ID }, true);
    public static final ForeignKey<EducatorProfileCopy1Record, EducationLevelRecord> EDUCATOR_PROFILE_COPY1__EDUCATOR_PROFILE_COPY1_UNIVERSITY_EDUCATION_LEVEL_ID_FKEY = Internal.createForeignKey(EducatorProfileCopy1Table.EDUCATOR_PROFILE_COPY1, DSL.name("educator_profile_copy1_university_education_level_id_fkey"), new TableField[] { EducatorProfileCopy1Table.EDUCATOR_PROFILE_COPY1.UNIVERSITY_EDUCATION_LEVEL_ID }, Keys.EDUCATION_LEVEL_PKEY, new TableField[] { EducationLevelTable.EDUCATION_LEVEL.ID }, true);
    public static final ForeignKey<EducatorProfileCopy1Record, SchoolRecord> EDUCATOR_PROFILE_COPY1__EDUCATOR_PROFILE_COPY1_UNIVERSITY_ID_FKEY = Internal.createForeignKey(EducatorProfileCopy1Table.EDUCATOR_PROFILE_COPY1, DSL.name("educator_profile_copy1_university_id_fkey"), new TableField[] { EducatorProfileCopy1Table.EDUCATOR_PROFILE_COPY1.UNIVERSITY_ID }, Keys.SCHOOL_PKEY, new TableField[] { SchoolTable.SCHOOL.ID }, true);
    public static final ForeignKey<EducatorProfileCopy1Record, SchoolIdentityRecord> EDUCATOR_PROFILE_COPY1__EDUCATOR_PROFILE_COPY1_UNIVERSITY_IDENTITY_ID_FKEY = Internal.createForeignKey(EducatorProfileCopy1Table.EDUCATOR_PROFILE_COPY1, DSL.name("educator_profile_copy1_university_identity_id_fkey"), new TableField[] { EducatorProfileCopy1Table.EDUCATOR_PROFILE_COPY1.UNIVERSITY_IDENTITY_ID }, Keys.SCHOOL_IDENTITY_PKEY, new TableField[] { SchoolIdentityTable.SCHOOL_IDENTITY.ID }, true);
    public static final ForeignKey<EducatorProfileCopy1Record, UserRecord> EDUCATOR_PROFILE_COPY1__EDUCATOR_PROFILE_COPY1_USER_ID_FKEY = Internal.createForeignKey(EducatorProfileCopy1Table.EDUCATOR_PROFILE_COPY1, DSL.name("educator_profile_copy1_user_id_fkey"), new TableField[] { EducatorProfileCopy1Table.EDUCATOR_PROFILE_COPY1.USER_ID }, Keys.USER_PKEY, new TableField[] { UserTable.USER.ID }, true);
    public static final ForeignKey<EducatorProfileExpertiseAcademicMapRecord, ExpertiseAcademicMajorMapRecord> EDUCATOR_PROFILE_EXPERTISE_ACADEMIC_MAP__FK_EDUC_PROF_EXPT_ACAD_MAP_ACAD_MAJ = Internal.createForeignKey(EducatorProfileExpertiseAcademicMapTable.EDUCATOR_PROFILE_EXPERTISE_ACADEMIC_MAP, DSL.name("fk_educ_prof_expt_acad_map_acad_maj"), new TableField[] { EducatorProfileExpertiseAcademicMapTable.EDUCATOR_PROFILE_EXPERTISE_ACADEMIC_MAP.EXPERTISE_ID, EducatorProfileExpertiseAcademicMapTable.EDUCATOR_PROFILE_EXPERTISE_ACADEMIC_MAP.ACADEMIC_MAJOR_ID }, Keys.UQ_EXPT_ACAD_MAJ_MAP_EXPT, new TableField[] { ExpertiseAcademicMajorMapTable.EXPERTISE_ACADEMIC_MAJOR_MAP.EXPERTISE_ID, ExpertiseAcademicMajorMapTable.EXPERTISE_ACADEMIC_MAJOR_MAP.ACADEMIC_MAJOR_ID }, true);
    public static final ForeignKey<EducatorProfileExpertiseAcademicMapRecord, AcademicMajorSubjectMapRecord> EDUCATOR_PROFILE_EXPERTISE_ACADEMIC_MAP__FK_EDUC_PROF_EXPT_ACAD_MAP_ACAD_MAJ_SUB = Internal.createForeignKey(EducatorProfileExpertiseAcademicMapTable.EDUCATOR_PROFILE_EXPERTISE_ACADEMIC_MAP, DSL.name("fk_educ_prof_expt_acad_map_acad_maj_sub"), new TableField[] { EducatorProfileExpertiseAcademicMapTable.EDUCATOR_PROFILE_EXPERTISE_ACADEMIC_MAP.ACADEMIC_MAJOR_ID, EducatorProfileExpertiseAcademicMapTable.EDUCATOR_PROFILE_EXPERTISE_ACADEMIC_MAP.ACADEMIC_SUBJECT_ID }, Keys.UQ_ACAD_MAJ_SUB_MAP, new TableField[] { AcademicMajorSubjectMapTable.ACADEMIC_MAJOR_SUBJECT_MAP.ACADEMIC_MAJOR_ID, AcademicMajorSubjectMapTable.ACADEMIC_MAJOR_SUBJECT_MAP.ACADEMIC_SUBJECT_ID }, true);
    public static final ForeignKey<EducatorProfileExpertiseAcademicMapRecord, EducatorProfileRecord> EDUCATOR_PROFILE_EXPERTISE_ACADEMIC_MAP__FK_EDUC_PROF_EXPT_ACAD_MAP_EDUC_PROF = Internal.createForeignKey(EducatorProfileExpertiseAcademicMapTable.EDUCATOR_PROFILE_EXPERTISE_ACADEMIC_MAP, DSL.name("fk_educ_prof_expt_acad_map_educ_prof"), new TableField[] { EducatorProfileExpertiseAcademicMapTable.EDUCATOR_PROFILE_EXPERTISE_ACADEMIC_MAP.EDUCATOR_PROFILE_ID }, Keys.EDUCATOR_PROFILE_PKEY, new TableField[] { EducatorProfileTable.EDUCATOR_PROFILE.ID }, true);
    public static final ForeignKey<EducatorProfileExpertiseAcademicMapRecord, ExpertiseRecord> EDUCATOR_PROFILE_EXPERTISE_ACADEMIC_MAP__FK_EDUC_PROF_EXPT_ACAD_MAP_EXPT = Internal.createForeignKey(EducatorProfileExpertiseAcademicMapTable.EDUCATOR_PROFILE_EXPERTISE_ACADEMIC_MAP, DSL.name("fk_educ_prof_expt_acad_map_expt"), new TableField[] { EducatorProfileExpertiseAcademicMapTable.EDUCATOR_PROFILE_EXPERTISE_ACADEMIC_MAP.EXPERTISE_ID }, Keys.EXPERTISE_PKEY, new TableField[] { ExpertiseTable.EXPERTISE.ID }, true);
    public static final ForeignKey<EducatorProfileLanguageMapRecord, EducatorProfileRecord> EDUCATOR_PROFILE_LANGUAGE_MAP__FK_EDUC_PROF_LANG_MAP_EDUC_PROF = Internal.createForeignKey(EducatorProfileLanguageMapTable.EDUCATOR_PROFILE_LANGUAGE_MAP, DSL.name("fk_educ_prof_lang_map_educ_prof"), new TableField[] { EducatorProfileLanguageMapTable.EDUCATOR_PROFILE_LANGUAGE_MAP.EDUCATOR_PROFILE_ID }, Keys.EDUCATOR_PROFILE_PKEY, new TableField[] { EducatorProfileTable.EDUCATOR_PROFILE.ID }, true);
    public static final ForeignKey<EducatorProfileLanguageMapRecord, LanguageRecord> EDUCATOR_PROFILE_LANGUAGE_MAP__FK_EDUC_PROF_LANG_MAP_LANG = Internal.createForeignKey(EducatorProfileLanguageMapTable.EDUCATOR_PROFILE_LANGUAGE_MAP, DSL.name("fk_educ_prof_lang_map_lang"), new TableField[] { EducatorProfileLanguageMapTable.EDUCATOR_PROFILE_LANGUAGE_MAP.LANGUAGE_ID }, Keys.LANGUAGE_PKEY, new TableField[] { LanguageTable.LANGUAGE.ID }, true);
    public static final ForeignKey<EducatorSessionNoteRecord, I18nRecord> EDUCATOR_SESSION_NOTE__FK_EDUC_SESS_NOTE_DESC = Internal.createForeignKey(EducatorSessionNoteTable.EDUCATOR_SESSION_NOTE, DSL.name("fk_educ_sess_note_desc"), new TableField[] { EducatorSessionNoteTable.EDUCATOR_SESSION_NOTE.DESCRIPTION_I18N_ID }, Keys.I18N_PKEY, new TableField[] { I18nTable.I18N.ID }, true);
    public static final ForeignKey<EducatorSessionNoteRecord, I18nRecord> EDUCATOR_SESSION_NOTE__FK_EDUC_SESS_NOTE_SUB_TITL = Internal.createForeignKey(EducatorSessionNoteTable.EDUCATOR_SESSION_NOTE, DSL.name("fk_educ_sess_note_sub_titl"), new TableField[] { EducatorSessionNoteTable.EDUCATOR_SESSION_NOTE.SUB_TITLE_I18N_ID }, Keys.I18N_PKEY, new TableField[] { I18nTable.I18N.ID }, true);
    public static final ForeignKey<EducatorSessionNoteRecord, I18nRecord> EDUCATOR_SESSION_NOTE__FK_EDUC_SESS_NOTE_TITL = Internal.createForeignKey(EducatorSessionNoteTable.EDUCATOR_SESSION_NOTE, DSL.name("fk_educ_sess_note_titl"), new TableField[] { EducatorSessionNoteTable.EDUCATOR_SESSION_NOTE.TITLE_I18N_ID }, Keys.I18N_PKEY, new TableField[] { I18nTable.I18N.ID }, true);
    public static final ForeignKey<EducatorSessionNoteItemRecord, EducatorSessionNoteRecord> EDUCATOR_SESSION_NOTE_ITEM__FK_EDUC_SESS_NOTE_ITEM_NOTE = Internal.createForeignKey(EducatorSessionNoteItemTable.EDUCATOR_SESSION_NOTE_ITEM, DSL.name("fk_educ_sess_note_item_note"), new TableField[] { EducatorSessionNoteItemTable.EDUCATOR_SESSION_NOTE_ITEM.EDUCATOR_SESSION_NOTE_ID }, Keys.EDUCATOR_SESSION_NOTE_PKEY, new TableField[] { EducatorSessionNoteTable.EDUCATOR_SESSION_NOTE.ID }, true);
    public static final ForeignKey<EducatorSessionNoteItemRecord, I18nRecord> EDUCATOR_SESSION_NOTE_ITEM__FK_EDUC_SESS_NOTE_ITEM_TITL = Internal.createForeignKey(EducatorSessionNoteItemTable.EDUCATOR_SESSION_NOTE_ITEM, DSL.name("fk_educ_sess_note_item_titl"), new TableField[] { EducatorSessionNoteItemTable.EDUCATOR_SESSION_NOTE_ITEM.TITLE_I18N_ID }, Keys.I18N_PKEY, new TableField[] { I18nTable.I18N.ID }, true);
    public static final ForeignKey<EducatorSessionNoteMapRecord, EducatorCalendarRecord> EDUCATOR_SESSION_NOTE_MAP__FK_EDUC_SESS_NOTE_MAP_EDUC_CALD = Internal.createForeignKey(EducatorSessionNoteMapTable.EDUCATOR_SESSION_NOTE_MAP, DSL.name("fk_educ_sess_note_map_educ_cald"), new TableField[] { EducatorSessionNoteMapTable.EDUCATOR_SESSION_NOTE_MAP.EDUCATOR_CALENDAR_ID }, Keys.EDUCATOR_CALENDAR_PKEY, new TableField[] { EducatorCalendarTable.EDUCATOR_CALENDAR.ID }, true);
    public static final ForeignKey<EducatorSessionNoteMapRecord, EducatorSessionNoteItemRecord> EDUCATOR_SESSION_NOTE_MAP__FK_EDUC_SESS_NOTE_MAP_NOTE_ITEM = Internal.createForeignKey(EducatorSessionNoteMapTable.EDUCATOR_SESSION_NOTE_MAP, DSL.name("fk_educ_sess_note_map_note_item"), new TableField[] { EducatorSessionNoteMapTable.EDUCATOR_SESSION_NOTE_MAP.EDUCATOR_SESSION_NOTE_ITEM_ID }, Keys.EDUCATOR_SESSION_NOTE_ITEM_PKEY, new TableField[] { EducatorSessionNoteItemTable.EDUCATOR_SESSION_NOTE_ITEM.ID }, true);
    public static final ForeignKey<EventRecord, I18nRecord> EVENT__FK_EVET_DESC = Internal.createForeignKey(EventTable.EVENT, DSL.name("fk_evet_desc"), new TableField[] { EventTable.EVENT.DESCRIPTION_I18N_ID }, Keys.I18N_PKEY, new TableField[] { I18nTable.I18N.ID }, true);
    public static final ForeignKey<EventRecord, I18nRecord> EVENT__FK_EVET_TITL = Internal.createForeignKey(EventTable.EVENT, DSL.name("fk_evet_titl"), new TableField[] { EventTable.EVENT.TITLE_I18N_ID }, Keys.I18N_PKEY, new TableField[] { I18nTable.I18N.ID }, true);
    public static final ForeignKey<ExpertiseRecord, I18nRecord> EXPERTISE__FK_EXPT_DESC = Internal.createForeignKey(ExpertiseTable.EXPERTISE, DSL.name("fk_expt_desc"), new TableField[] { ExpertiseTable.EXPERTISE.DESCRIPTION_I18N_ID }, Keys.I18N_PKEY, new TableField[] { I18nTable.I18N.ID }, true);
    public static final ForeignKey<ExpertiseRecord, TagRecord> EXPERTISE__FK_EXPT_TAG = Internal.createForeignKey(ExpertiseTable.EXPERTISE, DSL.name("fk_expt_tag"), new TableField[] { ExpertiseTable.EXPERTISE.TAG_ID }, Keys.TAG_PKEY, new TableField[] { TagTable.TAG.ID }, true);
    public static final ForeignKey<ExpertiseAcademicMajorMapRecord, AcademicMajorRecord> EXPERTISE_ACADEMIC_MAJOR_MAP__FK_EXPT_ACAD_MAJ_MAP_ACAD_MAJ = Internal.createForeignKey(ExpertiseAcademicMajorMapTable.EXPERTISE_ACADEMIC_MAJOR_MAP, DSL.name("fk_expt_acad_maj_map_acad_maj"), new TableField[] { ExpertiseAcademicMajorMapTable.EXPERTISE_ACADEMIC_MAJOR_MAP.ACADEMIC_MAJOR_ID }, Keys.ACADEMIC_MAJOR_PKEY, new TableField[] { AcademicMajorTable.ACADEMIC_MAJOR.ID }, true);
    public static final ForeignKey<ExpertiseAcademicMajorMapRecord, ExpertiseRecord> EXPERTISE_ACADEMIC_MAJOR_MAP__FK_EXPT_ACAD_MAJ_MAP_EXPT = Internal.createForeignKey(ExpertiseAcademicMajorMapTable.EXPERTISE_ACADEMIC_MAJOR_MAP, DSL.name("fk_expt_acad_maj_map_expt"), new TableField[] { ExpertiseAcademicMajorMapTable.EXPERTISE_ACADEMIC_MAJOR_MAP.EXPERTISE_ID }, Keys.EXPERTISE_PKEY, new TableField[] { ExpertiseTable.EXPERTISE.ID }, true);
    public static final ForeignKey<InterviewTopicRecord, I18nRecord> INTERVIEW_TOPIC__FK_INTV_TOPI_DESC = Internal.createForeignKey(InterviewTopicTable.INTERVIEW_TOPIC, DSL.name("fk_intv_topi_desc"), new TableField[] { InterviewTopicTable.INTERVIEW_TOPIC.DESCRIPTION_I18N_ID }, Keys.I18N_PKEY, new TableField[] { I18nTable.I18N.ID }, true);
    public static final ForeignKey<LanguageRecord, I18nRecord> LANGUAGE__FK_LANGUAGE_DESCRIPTION = Internal.createForeignKey(LanguageTable.LANGUAGE, DSL.name("fk_language_description"), new TableField[] { LanguageTable.LANGUAGE.DESCRIPTION_I18N_ID }, Keys.I18N_PKEY, new TableField[] { I18nTable.I18N.ID }, true);
    public static final ForeignKey<LanguageRecord, TagRecord> LANGUAGE__FK_LANGUAGE_TAG = Internal.createForeignKey(LanguageTable.LANGUAGE, DSL.name("fk_language_tag"), new TableField[] { LanguageTable.LANGUAGE.TAG_ID }, Keys.TAG_PKEY, new TableField[] { TagTable.TAG.ID }, true);
    public static final ForeignKey<OpportunityRecord, I18nRecord> OPPORTUNITY__FK_OPPO_TITL = Internal.createForeignKey(OpportunityTable.OPPORTUNITY, DSL.name("fk_oppo_titl"), new TableField[] { OpportunityTable.OPPORTUNITY.TITLE_I18N_ID }, Keys.I18N_PKEY, new TableField[] { I18nTable.I18N.ID }, true);
    public static final ForeignKey<SchoolRecord, I18nRecord> SCHOOL__FK_SCHL_ADDR = Internal.createForeignKey(SchoolTable.SCHOOL, DSL.name("fk_schl_addr"), new TableField[] { SchoolTable.SCHOOL.DETAILED_ADDRESS_I18N_ID }, Keys.I18N_PKEY, new TableField[] { I18nTable.I18N.ID }, true);
    public static final ForeignKey<SchoolRecord, CityRecord> SCHOOL__FK_SCHL_CITY = Internal.createForeignKey(SchoolTable.SCHOOL, DSL.name("fk_schl_city"), new TableField[] { SchoolTable.SCHOOL.CITY_ID }, Keys.CITY_PKEY, new TableField[] { CityTable.CITY.ID }, true);
    public static final ForeignKey<SchoolRecord, CountryRecord> SCHOOL__FK_SCHL_COUT = Internal.createForeignKey(SchoolTable.SCHOOL, DSL.name("fk_schl_cout"), new TableField[] { SchoolTable.SCHOOL.COUNTRY_ID }, Keys.COUNTRY_PKEY, new TableField[] { CountryTable.COUNTRY.ID }, true);
    public static final ForeignKey<SchoolRecord, I18nRecord> SCHOOL__FK_SCHL_NAME = Internal.createForeignKey(SchoolTable.SCHOOL, DSL.name("fk_schl_name"), new TableField[] { SchoolTable.SCHOOL.NAME_I18N_ID }, Keys.I18N_PKEY, new TableField[] { I18nTable.I18N.ID }, true);
    public static final ForeignKey<SchoolRecord, TagRecord> SCHOOL__FK_SCHL_TAG = Internal.createForeignKey(SchoolTable.SCHOOL, DSL.name("fk_schl_tag"), new TableField[] { SchoolTable.SCHOOL.TAG_ID }, Keys.TAG_PKEY, new TableField[] { TagTable.TAG.ID }, true);
    public static final ForeignKey<SchoolIdentityRecord, I18nRecord> SCHOOL_IDENTITY__FK_SCHL_IDTY_NAME = Internal.createForeignKey(SchoolIdentityTable.SCHOOL_IDENTITY, DSL.name("fk_schl_idty_name"), new TableField[] { SchoolIdentityTable.SCHOOL_IDENTITY.NAME_I18N_ID }, Keys.I18N_PKEY, new TableField[] { I18nTable.I18N.ID }, true);
    public static final ForeignKey<StudentBookingSurveyAnswerMapRecord, StudentBookingSurveyMapRecord> STUDENT_BOOKING_SURVEY_ANSWER_MAP__FK_STUD_BOOK_SURV_ANS_MAP_ID = Internal.createForeignKey(StudentBookingSurveyAnswerMapTable.STUDENT_BOOKING_SURVEY_ANSWER_MAP, DSL.name("fk_stud_book_surv_ans_map_id"), new TableField[] { StudentBookingSurveyAnswerMapTable.STUDENT_BOOKING_SURVEY_ANSWER_MAP.STUDENT_BOOKING_SURVEY_MAP_ID }, Keys.STUDENT_BOOKING_SURVEY_MAP_PKEY, new TableField[] { StudentBookingSurveyMapTable.STUDENT_BOOKING_SURVEY_MAP.ID }, true);
    public static final ForeignKey<StudentBookingSurveyAnswerMapRecord, StudentSessionSurveyQuestionRecord> STUDENT_BOOKING_SURVEY_ANSWER_MAP__FK_STUD_BOOK_SURV_ANS_MAP_QUET = Internal.createForeignKey(StudentBookingSurveyAnswerMapTable.STUDENT_BOOKING_SURVEY_ANSWER_MAP, DSL.name("fk_stud_book_surv_ans_map_quet"), new TableField[] { StudentBookingSurveyAnswerMapTable.STUDENT_BOOKING_SURVEY_ANSWER_MAP.STUDENT_SESSION_SURVEY_QUESTION_ID }, Keys.STUDENT_SESSION_SURVEY_QUESTION_PKEY, new TableField[] { StudentSessionSurveyQuestionTable.STUDENT_SESSION_SURVEY_QUESTION.ID }, true);
    public static final ForeignKey<StudentBookingSurveyAnswerMapRecord, StudentSessionSurveyAnswerRecord> STUDENT_BOOKING_SURVEY_ANSWER_MAP__FK_STUD_BOOK_SURV_ANS_MAP_QUET_ANS = Internal.createForeignKey(StudentBookingSurveyAnswerMapTable.STUDENT_BOOKING_SURVEY_ANSWER_MAP, DSL.name("fk_stud_book_surv_ans_map_quet_ans"), new TableField[] { StudentBookingSurveyAnswerMapTable.STUDENT_BOOKING_SURVEY_ANSWER_MAP.STUDENT_SESSION_SURVEY_ANSWER_ID }, Keys.STUDENT_SESSION_SURVEY_ANSWER_PKEY, new TableField[] { StudentSessionSurveyAnswerTable.STUDENT_SESSION_SURVEY_ANSWER.ID }, true);
    public static final ForeignKey<StudentBookingSurveyAnswerMapRecord, StudentSessionSurveyAnswerRecord> STUDENT_BOOKING_SURVEY_ANSWER_MAP__FK_STUD_BOOK_SURV_ANS_MAP_QUET_ANS_UQ = Internal.createForeignKey(StudentBookingSurveyAnswerMapTable.STUDENT_BOOKING_SURVEY_ANSWER_MAP, DSL.name("fk_stud_book_surv_ans_map_quet_ans_uq"), new TableField[] { StudentBookingSurveyAnswerMapTable.STUDENT_BOOKING_SURVEY_ANSWER_MAP.STUDENT_SESSION_SURVEY_QUESTION_ID, StudentBookingSurveyAnswerMapTable.STUDENT_BOOKING_SURVEY_ANSWER_MAP.STUDENT_SESSION_SURVEY_ANSWER_ORDER }, Keys.UQ_STUD_SESS_SURV_ANS_QUES, new TableField[] { StudentSessionSurveyAnswerTable.STUDENT_SESSION_SURVEY_ANSWER.STUDENT_SESSION_SURVEY_QUESTION_ID, StudentSessionSurveyAnswerTable.STUDENT_SESSION_SURVEY_ANSWER.ORDER }, true);
    public static final ForeignKey<StudentBookingSurveyMapRecord, EducatorCalendarRecord> STUDENT_BOOKING_SURVEY_MAP__FK_STUD_BOOK_SURV_MAP_EDUC_STUD_BOOK = Internal.createForeignKey(StudentBookingSurveyMapTable.STUDENT_BOOKING_SURVEY_MAP, DSL.name("fk_stud_book_surv_map_educ_stud_book"), new TableField[] { StudentBookingSurveyMapTable.STUDENT_BOOKING_SURVEY_MAP.EDUCATOR_CALENDAR_ID }, Keys.EDUCATOR_CALENDAR_PKEY, new TableField[] { EducatorCalendarTable.EDUCATOR_CALENDAR.ID }, true);
    public static final ForeignKey<StudentBookingSurveyMapRecord, StudentSessionSurveyRecord> STUDENT_BOOKING_SURVEY_MAP__FK_STUD_BOOK_SURV_MAP_SURV = Internal.createForeignKey(StudentBookingSurveyMapTable.STUDENT_BOOKING_SURVEY_MAP, DSL.name("fk_stud_book_surv_map_surv"), new TableField[] { StudentBookingSurveyMapTable.STUDENT_BOOKING_SURVEY_MAP.STUDENT_SESSION_SURVEY_ID, StudentBookingSurveyMapTable.STUDENT_BOOKING_SURVEY_MAP.STUDENT_SESSION_SURVEY_VERSION_ASKED }, Keys.STUDENT_SESSION_SURVEY_PKEY, new TableField[] { StudentSessionSurveyTable.STUDENT_SESSION_SURVEY.ID, StudentSessionSurveyTable.STUDENT_SESSION_SURVEY.VERSION }, true);
    public static final ForeignKey<StudentBookingSurveyMapRecord, StudentSessionSurveyRecord> STUDENT_BOOKING_SURVEY_MAP__FK_STUD_BOOK_SURV_MAP_SURV2 = Internal.createForeignKey(StudentBookingSurveyMapTable.STUDENT_BOOKING_SURVEY_MAP, DSL.name("fk_stud_book_surv_map_surv2"), new TableField[] { StudentBookingSurveyMapTable.STUDENT_BOOKING_SURVEY_MAP.STUDENT_SESSION_SURVEY_ID, StudentBookingSurveyMapTable.STUDENT_BOOKING_SURVEY_MAP.STUDENT_SESSION_SURVEY_VERSION_COMPLETED }, Keys.STUDENT_SESSION_SURVEY_PKEY, new TableField[] { StudentSessionSurveyTable.STUDENT_SESSION_SURVEY.ID, StudentSessionSurveyTable.STUDENT_SESSION_SURVEY.VERSION }, true);
    public static final ForeignKey<StudentPaymentTransactionRecord, StudentProfileRecord> STUDENT_PAYMENT_TRANSACTION__FK_STUD_PAYM_TRAN_STUD_PROF = Internal.createForeignKey(StudentPaymentTransactionTable.STUDENT_PAYMENT_TRANSACTION, DSL.name("fk_stud_paym_tran_stud_prof"), new TableField[] { StudentPaymentTransactionTable.STUDENT_PAYMENT_TRANSACTION.STUDENT_PROFILE_ID }, Keys.STUDENT_PROFILE_PKEY, new TableField[] { StudentProfileTable.STUDENT_PROFILE.ID }, true);
    public static final ForeignKey<StudentProfileRecord, CountryRecord> STUDENT_PROFILE__FK_STUD_PROF_COUT = Internal.createForeignKey(StudentProfileTable.STUDENT_PROFILE, DSL.name("fk_stud_prof_cout"), new TableField[] { StudentProfileTable.STUDENT_PROFILE.COUNTRY_ID }, Keys.COUNTRY_PKEY, new TableField[] { CountryTable.COUNTRY.ID }, true);
    public static final ForeignKey<StudentProfileRecord, UserRecord> STUDENT_PROFILE__FK_STUD_PROF_USER = Internal.createForeignKey(StudentProfileTable.STUDENT_PROFILE, DSL.name("fk_stud_prof_user"), new TableField[] { StudentProfileTable.STUDENT_PROFILE.USER_ID }, Keys.USER_PKEY, new TableField[] { UserTable.USER.ID }, true);
    public static final ForeignKey<StudentProfilePredictedGradeRecord, AcademicSubjectRecord> STUDENT_PROFILE_PREDICTED_GRADE__FK_STUD_PROF_PRED_GRAD_ACAD_SUB = Internal.createForeignKey(StudentProfilePredictedGradeTable.STUDENT_PROFILE_PREDICTED_GRADE, DSL.name("fk_stud_prof_pred_grad_acad_sub"), new TableField[] { StudentProfilePredictedGradeTable.STUDENT_PROFILE_PREDICTED_GRADE.ACADEMIC_SUBJECT_ID }, Keys.ACADEMIC_SUBJECT_PKEY, new TableField[] { AcademicSubjectTable.ACADEMIC_SUBJECT.ID }, true);
    public static final ForeignKey<StudentProfilePredictedGradeRecord, StudentProfileRecord> STUDENT_PROFILE_PREDICTED_GRADE__FK_STUD_PROF_PRED_GRAD_STUD_PROF = Internal.createForeignKey(StudentProfilePredictedGradeTable.STUDENT_PROFILE_PREDICTED_GRADE, DSL.name("fk_stud_prof_pred_grad_stud_prof"), new TableField[] { StudentProfilePredictedGradeTable.STUDENT_PROFILE_PREDICTED_GRADE.STUDENT_PROFILE_ID }, Keys.STUDENT_PROFILE_PKEY, new TableField[] { StudentProfileTable.STUDENT_PROFILE.ID }, true);
    public static final ForeignKey<StudentProfileQuestionnaireAnswerMapRecord, StudentProfileQuestionnaireMapRecord> STUDENT_PROFILE_QUESTIONNAIRE_ANSWER_MAP__FK_STUD_PROF_QUET_ANS_MAP_ID = Internal.createForeignKey(StudentProfileQuestionnaireAnswerMapTable.STUDENT_PROFILE_QUESTIONNAIRE_ANSWER_MAP, DSL.name("fk_stud_prof_quet_ans_map_id"), new TableField[] { StudentProfileQuestionnaireAnswerMapTable.STUDENT_PROFILE_QUESTIONNAIRE_ANSWER_MAP.STUDENT_PROFILE_QUESTIONNAIRE_MAP_ID }, Keys.STUDENT_PROFILE_QUESTIONNAIRE_MAP_PKEY, new TableField[] { StudentProfileQuestionnaireMapTable.STUDENT_PROFILE_QUESTIONNAIRE_MAP.ID }, true);
    public static final ForeignKey<StudentProfileQuestionnaireAnswerMapRecord, StudentQuestionnaireQuestionRecord> STUDENT_PROFILE_QUESTIONNAIRE_ANSWER_MAP__FK_STUD_PROF_QUET_ANS_MAP_QUET = Internal.createForeignKey(StudentProfileQuestionnaireAnswerMapTable.STUDENT_PROFILE_QUESTIONNAIRE_ANSWER_MAP, DSL.name("fk_stud_prof_quet_ans_map_quet"), new TableField[] { StudentProfileQuestionnaireAnswerMapTable.STUDENT_PROFILE_QUESTIONNAIRE_ANSWER_MAP.QUESTIONNAIRE_QUESTION_ID }, Keys.STUDENT_QUESTIONNAIRE_QUESTION_PKEY, new TableField[] { StudentQuestionnaireQuestionTable.STUDENT_QUESTIONNAIRE_QUESTION.ID }, true);
    public static final ForeignKey<StudentProfileQuestionnaireAnswerMapRecord, StudentQuestionnaireAnswerRecord> STUDENT_PROFILE_QUESTIONNAIRE_ANSWER_MAP__FK_STUD_PROF_QUET_ANS_MAP_QUET_ANS = Internal.createForeignKey(StudentProfileQuestionnaireAnswerMapTable.STUDENT_PROFILE_QUESTIONNAIRE_ANSWER_MAP, DSL.name("fk_stud_prof_quet_ans_map_quet_ans"), new TableField[] { StudentProfileQuestionnaireAnswerMapTable.STUDENT_PROFILE_QUESTIONNAIRE_ANSWER_MAP.QUESTIONNAIRE_ANSWER_ID }, Keys.STUDENT_QUESTIONNAIRE_ANSWER_PKEY, new TableField[] { StudentQuestionnaireAnswerTable.STUDENT_QUESTIONNAIRE_ANSWER.ID }, true);
    public static final ForeignKey<StudentProfileQuestionnaireAnswerMapRecord, StudentQuestionnaireAnswerRecord> STUDENT_PROFILE_QUESTIONNAIRE_ANSWER_MAP__FK_STUD_PROF_QUET_ANS_MAP_QUET_ANS_UQ = Internal.createForeignKey(StudentProfileQuestionnaireAnswerMapTable.STUDENT_PROFILE_QUESTIONNAIRE_ANSWER_MAP, DSL.name("fk_stud_prof_quet_ans_map_quet_ans_uq"), new TableField[] { StudentProfileQuestionnaireAnswerMapTable.STUDENT_PROFILE_QUESTIONNAIRE_ANSWER_MAP.QUESTIONNAIRE_QUESTION_ID, StudentProfileQuestionnaireAnswerMapTable.STUDENT_PROFILE_QUESTIONNAIRE_ANSWER_MAP.QUESTIONNAIRE_ANSWER_ORDER }, Keys.UQ_STU_QUET_ANS_QUES, new TableField[] { StudentQuestionnaireAnswerTable.STUDENT_QUESTIONNAIRE_ANSWER.STUDENT_QUESTIONNAIRE_QUESTION_ID, StudentQuestionnaireAnswerTable.STUDENT_QUESTIONNAIRE_ANSWER.ORDER }, true);
    public static final ForeignKey<StudentProfileQuestionnaireMapRecord, StudentProfileRecord> STUDENT_PROFILE_QUESTIONNAIRE_MAP__FK_STUD_PROF_QUET_MAP_STUD_PROF = Internal.createForeignKey(StudentProfileQuestionnaireMapTable.STUDENT_PROFILE_QUESTIONNAIRE_MAP, DSL.name("fk_stud_prof_quet_map_stud_prof"), new TableField[] { StudentProfileQuestionnaireMapTable.STUDENT_PROFILE_QUESTIONNAIRE_MAP.STUDENT_PROFILE_ID }, Keys.STUDENT_PROFILE_PKEY, new TableField[] { StudentProfileTable.STUDENT_PROFILE.ID }, true);
    public static final ForeignKey<StudentProfileQuestionnaireMapRecord, StudentQuestionnaireRecord> STUDENT_PROFILE_QUESTIONNAIRE_MAP__FK_STUD_PROF_QUET_MAP_STUD_QUET = Internal.createForeignKey(StudentProfileQuestionnaireMapTable.STUDENT_PROFILE_QUESTIONNAIRE_MAP, DSL.name("fk_stud_prof_quet_map_stud_quet"), new TableField[] { StudentProfileQuestionnaireMapTable.STUDENT_PROFILE_QUESTIONNAIRE_MAP.STUDENT_QUESTIONNAIRE_ID, StudentProfileQuestionnaireMapTable.STUDENT_PROFILE_QUESTIONNAIRE_MAP.STUDENT_QUESTIONNAIRE_VERSION_ASKED }, Keys.STUDENT_QUESTIONNAIRE_PKEY, new TableField[] { StudentQuestionnaireTable.STUDENT_QUESTIONNAIRE.ID, StudentQuestionnaireTable.STUDENT_QUESTIONNAIRE.VERSION }, true);
    public static final ForeignKey<StudentProfileQuestionnaireMapRecord, StudentQuestionnaireRecord> STUDENT_PROFILE_QUESTIONNAIRE_MAP__FK_STUD_PROF_QUET_MAP_STUD_QUET2 = Internal.createForeignKey(StudentProfileQuestionnaireMapTable.STUDENT_PROFILE_QUESTIONNAIRE_MAP, DSL.name("fk_stud_prof_quet_map_stud_quet2"), new TableField[] { StudentProfileQuestionnaireMapTable.STUDENT_PROFILE_QUESTIONNAIRE_MAP.STUDENT_QUESTIONNAIRE_ID, StudentProfileQuestionnaireMapTable.STUDENT_PROFILE_QUESTIONNAIRE_MAP.STUDENT_QUESTIONNAIRE_VERSION_COMPLETED }, Keys.STUDENT_QUESTIONNAIRE_PKEY, new TableField[] { StudentQuestionnaireTable.STUDENT_QUESTIONNAIRE.ID, StudentQuestionnaireTable.STUDENT_QUESTIONNAIRE.VERSION }, true);
    public static final ForeignKey<StudentProfileSchoolReportRecord, StudentProfileRecord> STUDENT_PROFILE_SCHOOL_REPORT__FK_STUD_PROF_SCHL_REPT_PROF = Internal.createForeignKey(StudentProfileSchoolReportTable.STUDENT_PROFILE_SCHOOL_REPORT, DSL.name("fk_stud_prof_schl_rept_prof"), new TableField[] { StudentProfileSchoolReportTable.STUDENT_PROFILE_SCHOOL_REPORT.STUDENT_PROFILE_ID }, Keys.STUDENT_PROFILE_PKEY, new TableField[] { StudentProfileTable.STUDENT_PROFILE.ID }, true);
    public static final ForeignKey<StudentQuestionnaireRecord, I18nRecord> STUDENT_QUESTIONNAIRE__FK_STU_QUET_DESC = Internal.createForeignKey(StudentQuestionnaireTable.STUDENT_QUESTIONNAIRE, DSL.name("fk_stu_quet_desc"), new TableField[] { StudentQuestionnaireTable.STUDENT_QUESTIONNAIRE.DESCRIPTION_I18N_ID }, Keys.I18N_PKEY, new TableField[] { I18nTable.I18N.ID }, true);
    public static final ForeignKey<StudentQuestionnaireRecord, I18nRecord> STUDENT_QUESTIONNAIRE__FK_STU_QUET_SUB_TITL = Internal.createForeignKey(StudentQuestionnaireTable.STUDENT_QUESTIONNAIRE, DSL.name("fk_stu_quet_sub_titl"), new TableField[] { StudentQuestionnaireTable.STUDENT_QUESTIONNAIRE.SUB_TITLE_I18N_ID }, Keys.I18N_PKEY, new TableField[] { I18nTable.I18N.ID }, true);
    public static final ForeignKey<StudentQuestionnaireRecord, I18nRecord> STUDENT_QUESTIONNAIRE__FK_STU_QUET_TITL = Internal.createForeignKey(StudentQuestionnaireTable.STUDENT_QUESTIONNAIRE, DSL.name("fk_stu_quet_titl"), new TableField[] { StudentQuestionnaireTable.STUDENT_QUESTIONNAIRE.TITLE_I18N_ID }, Keys.I18N_PKEY, new TableField[] { I18nTable.I18N.ID }, true);
    public static final ForeignKey<StudentQuestionnaireAnswerRecord, I18nRecord> STUDENT_QUESTIONNAIRE_ANSWER__FK_STU_QUET_ANS_DESC = Internal.createForeignKey(StudentQuestionnaireAnswerTable.STUDENT_QUESTIONNAIRE_ANSWER, DSL.name("fk_stu_quet_ans_desc"), new TableField[] { StudentQuestionnaireAnswerTable.STUDENT_QUESTIONNAIRE_ANSWER.DESCRIPTION_I18N_ID }, Keys.I18N_PKEY, new TableField[] { I18nTable.I18N.ID }, true);
    public static final ForeignKey<StudentQuestionnaireAnswerRecord, StudentQuestionnaireQuestionRecord> STUDENT_QUESTIONNAIRE_ANSWER__FK_STU_QUET_ANS_QUET = Internal.createForeignKey(StudentQuestionnaireAnswerTable.STUDENT_QUESTIONNAIRE_ANSWER, DSL.name("fk_stu_quet_ans_quet"), new TableField[] { StudentQuestionnaireAnswerTable.STUDENT_QUESTIONNAIRE_ANSWER.STUDENT_QUESTIONNAIRE_QUESTION_ID }, Keys.STUDENT_QUESTIONNAIRE_QUESTION_PKEY, new TableField[] { StudentQuestionnaireQuestionTable.STUDENT_QUESTIONNAIRE_QUESTION.ID }, true);
    public static final ForeignKey<StudentQuestionnaireAnswerRecord, TagRecord> STUDENT_QUESTIONNAIRE_ANSWER__FK_STU_QUET_ANS_TAG = Internal.createForeignKey(StudentQuestionnaireAnswerTable.STUDENT_QUESTIONNAIRE_ANSWER, DSL.name("fk_stu_quet_ans_tag"), new TableField[] { StudentQuestionnaireAnswerTable.STUDENT_QUESTIONNAIRE_ANSWER.TAG_ID }, Keys.TAG_PKEY, new TableField[] { TagTable.TAG.ID }, true);
    public static final ForeignKey<StudentQuestionnaireQuestionRecord, I18nRecord> STUDENT_QUESTIONNAIRE_QUESTION__FK_STU_QUET_QUES_DECC = Internal.createForeignKey(StudentQuestionnaireQuestionTable.STUDENT_QUESTIONNAIRE_QUESTION, DSL.name("fk_stu_quet_ques_decc"), new TableField[] { StudentQuestionnaireQuestionTable.STUDENT_QUESTIONNAIRE_QUESTION.DESCRIPTION_I18N_ID }, Keys.I18N_PKEY, new TableField[] { I18nTable.I18N.ID }, true);
    public static final ForeignKey<StudentQuestionnaireQuestionRecord, StudentQuestionnaireSectionRecord> STUDENT_QUESTIONNAIRE_QUESTION__FK_STU_QUET_QUES_SECT = Internal.createForeignKey(StudentQuestionnaireQuestionTable.STUDENT_QUESTIONNAIRE_QUESTION, DSL.name("fk_stu_quet_ques_sect"), new TableField[] { StudentQuestionnaireQuestionTable.STUDENT_QUESTIONNAIRE_QUESTION.STUDENT_QUESTIONNAIRE_SECTION_ID }, Keys.STUDENT_QUESTIONNAIRE_SECTION_PKEY, new TableField[] { StudentQuestionnaireSectionTable.STUDENT_QUESTIONNAIRE_SECTION.ID }, true);
    public static final ForeignKey<StudentQuestionnaireSectionRecord, StudentQuestionnaireRecord> STUDENT_QUESTIONNAIRE_SECTION__FK_STU_QUET_SECT_QUET = Internal.createForeignKey(StudentQuestionnaireSectionTable.STUDENT_QUESTIONNAIRE_SECTION, DSL.name("fk_stu_quet_sect_quet"), new TableField[] { StudentQuestionnaireSectionTable.STUDENT_QUESTIONNAIRE_SECTION.STUDENT_QUESTIONNAIRE_ID, StudentQuestionnaireSectionTable.STUDENT_QUESTIONNAIRE_SECTION.STUDENT_QUESTIONNAIRE_VERSION }, Keys.STUDENT_QUESTIONNAIRE_PKEY, new TableField[] { StudentQuestionnaireTable.STUDENT_QUESTIONNAIRE.ID, StudentQuestionnaireTable.STUDENT_QUESTIONNAIRE.VERSION }, true);
    public static final ForeignKey<StudentQuestionnaireSectionRecord, I18nRecord> STUDENT_QUESTIONNAIRE_SECTION__FK_STU_QUET_SECT_TITL = Internal.createForeignKey(StudentQuestionnaireSectionTable.STUDENT_QUESTIONNAIRE_SECTION, DSL.name("fk_stu_quet_sect_titl"), new TableField[] { StudentQuestionnaireSectionTable.STUDENT_QUESTIONNAIRE_SECTION.TITLE_I18N_ID }, Keys.I18N_PKEY, new TableField[] { I18nTable.I18N.ID }, true);
    public static final ForeignKey<StudentSessionSurveyRecord, I18nRecord> STUDENT_SESSION_SURVEY__FK_STUD_SESS_SURV_DESC = Internal.createForeignKey(StudentSessionSurveyTable.STUDENT_SESSION_SURVEY, DSL.name("fk_stud_sess_surv_desc"), new TableField[] { StudentSessionSurveyTable.STUDENT_SESSION_SURVEY.DESCRIPTION_I18N_ID }, Keys.I18N_PKEY, new TableField[] { I18nTable.I18N.ID }, true);
    public static final ForeignKey<StudentSessionSurveyRecord, I18nRecord> STUDENT_SESSION_SURVEY__FK_STUD_SESS_SURV_SUB_TITL = Internal.createForeignKey(StudentSessionSurveyTable.STUDENT_SESSION_SURVEY, DSL.name("fk_stud_sess_surv_sub_titl"), new TableField[] { StudentSessionSurveyTable.STUDENT_SESSION_SURVEY.SUB_TITLE_I18N_ID }, Keys.I18N_PKEY, new TableField[] { I18nTable.I18N.ID }, true);
    public static final ForeignKey<StudentSessionSurveyRecord, I18nRecord> STUDENT_SESSION_SURVEY__FK_STUD_SESS_SURV_TITL = Internal.createForeignKey(StudentSessionSurveyTable.STUDENT_SESSION_SURVEY, DSL.name("fk_stud_sess_surv_titl"), new TableField[] { StudentSessionSurveyTable.STUDENT_SESSION_SURVEY.TITLE_I18N_ID }, Keys.I18N_PKEY, new TableField[] { I18nTable.I18N.ID }, true);
    public static final ForeignKey<StudentSessionSurveyAnswerRecord, I18nRecord> STUDENT_SESSION_SURVEY_ANSWER__FK_STUD_SESS_SURV_ANS_DESC = Internal.createForeignKey(StudentSessionSurveyAnswerTable.STUDENT_SESSION_SURVEY_ANSWER, DSL.name("fk_stud_sess_surv_ans_desc"), new TableField[] { StudentSessionSurveyAnswerTable.STUDENT_SESSION_SURVEY_ANSWER.DESCRIPTION_I18N_ID }, Keys.I18N_PKEY, new TableField[] { I18nTable.I18N.ID }, true);
    public static final ForeignKey<StudentSessionSurveyAnswerRecord, StudentSessionSurveyQuestionRecord> STUDENT_SESSION_SURVEY_ANSWER__FK_STUD_SESS_SURV_ANS_QUET = Internal.createForeignKey(StudentSessionSurveyAnswerTable.STUDENT_SESSION_SURVEY_ANSWER, DSL.name("fk_stud_sess_surv_ans_quet"), new TableField[] { StudentSessionSurveyAnswerTable.STUDENT_SESSION_SURVEY_ANSWER.STUDENT_SESSION_SURVEY_QUESTION_ID }, Keys.STUDENT_SESSION_SURVEY_QUESTION_PKEY, new TableField[] { StudentSessionSurveyQuestionTable.STUDENT_SESSION_SURVEY_QUESTION.ID }, true);
    public static final ForeignKey<StudentSessionSurveyQuestionRecord, I18nRecord> STUDENT_SESSION_SURVEY_QUESTION__FK_STUD_SESS_SURV_QUES_DESC = Internal.createForeignKey(StudentSessionSurveyQuestionTable.STUDENT_SESSION_SURVEY_QUESTION, DSL.name("fk_stud_sess_surv_ques_desc"), new TableField[] { StudentSessionSurveyQuestionTable.STUDENT_SESSION_SURVEY_QUESTION.DESCRIPTION_I18N_ID }, Keys.I18N_PKEY, new TableField[] { I18nTable.I18N.ID }, true);
    public static final ForeignKey<StudentSessionSurveyQuestionRecord, StudentSessionSurveyRecord> STUDENT_SESSION_SURVEY_QUESTION__FK_STUD_SESS_SURV_QUES_QUET = Internal.createForeignKey(StudentSessionSurveyQuestionTable.STUDENT_SESSION_SURVEY_QUESTION, DSL.name("fk_stud_sess_surv_ques_quet"), new TableField[] { StudentSessionSurveyQuestionTable.STUDENT_SESSION_SURVEY_QUESTION.STUDENT_SESSION_SURVEY_ID, StudentSessionSurveyQuestionTable.STUDENT_SESSION_SURVEY_QUESTION.STUDENT_SESSION_SURVEY_VERSION }, Keys.STUDENT_SESSION_SURVEY_PKEY, new TableField[] { StudentSessionSurveyTable.STUDENT_SESSION_SURVEY.ID, StudentSessionSurveyTable.STUDENT_SESSION_SURVEY.VERSION }, true);
    public static final ForeignKey<StudentUploadedInterviewRecord, StudentUploadedSupervisorReviewRecord> STUDENT_UPLOADED_INTERVIEW__FK_STUD_UPLD_INTV_CHAR_REVI = Internal.createForeignKey(StudentUploadedInterviewTable.STUDENT_UPLOADED_INTERVIEW, DSL.name("fk_stud_upld_intv_char_revi"), new TableField[] { StudentUploadedInterviewTable.STUDENT_UPLOADED_INTERVIEW.CHARISMA_REVIEW_ID }, Keys.STUDENT_UPLOADED_SUPERVISOR_REVIEW_PKEY, new TableField[] { StudentUploadedSupervisorReviewTable.STUDENT_UPLOADED_SUPERVISOR_REVIEW.ID }, true);
    public static final ForeignKey<StudentUploadedInterviewRecord, StudentUploadedSupervisorReviewRecord> STUDENT_UPLOADED_INTERVIEW__FK_STUD_UPLD_INTV_CLAR_REVI = Internal.createForeignKey(StudentUploadedInterviewTable.STUDENT_UPLOADED_INTERVIEW, DSL.name("fk_stud_upld_intv_clar_revi"), new TableField[] { StudentUploadedInterviewTable.STUDENT_UPLOADED_INTERVIEW.CLARITY_REVIEW_ID }, Keys.STUDENT_UPLOADED_SUPERVISOR_REVIEW_PKEY, new TableField[] { StudentUploadedSupervisorReviewTable.STUDENT_UPLOADED_SUPERVISOR_REVIEW.ID }, true);
    public static final ForeignKey<StudentUploadedInterviewRecord, StudentUploadedSupervisorReviewRecord> STUDENT_UPLOADED_INTERVIEW__FK_STUD_UPLD_INTV_CONT_REVI = Internal.createForeignKey(StudentUploadedInterviewTable.STUDENT_UPLOADED_INTERVIEW, DSL.name("fk_stud_upld_intv_cont_revi"), new TableField[] { StudentUploadedInterviewTable.STUDENT_UPLOADED_INTERVIEW.CONTENT_REVIEW_ID }, Keys.STUDENT_UPLOADED_SUPERVISOR_REVIEW_PKEY, new TableField[] { StudentUploadedSupervisorReviewTable.STUDENT_UPLOADED_SUPERVISOR_REVIEW.ID }, true);
    public static final ForeignKey<StudentUploadedInterviewRecord, StudentPaymentTransactionRecord> STUDENT_UPLOADED_INTERVIEW__FK_STUD_UPLD_INTV_PAY_TRAN = Internal.createForeignKey(StudentUploadedInterviewTable.STUDENT_UPLOADED_INTERVIEW, DSL.name("fk_stud_upld_intv_pay_tran"), new TableField[] { StudentUploadedInterviewTable.STUDENT_UPLOADED_INTERVIEW.PAYMENT_TRANSACTION_ID }, Keys.STUDENT_PAYMENT_TRANSACTION_PKEY, new TableField[] { StudentPaymentTransactionTable.STUDENT_PAYMENT_TRANSACTION.ID }, true);
    public static final ForeignKey<StudentUploadedInterviewRecord, StudentProfileRecord> STUDENT_UPLOADED_INTERVIEW__FK_STUD_UPLD_INTV_STUD_PROF = Internal.createForeignKey(StudentUploadedInterviewTable.STUDENT_UPLOADED_INTERVIEW, DSL.name("fk_stud_upld_intv_stud_prof"), new TableField[] { StudentUploadedInterviewTable.STUDENT_UPLOADED_INTERVIEW.STUDENT_PROFILE_ID }, Keys.STUDENT_PROFILE_PKEY, new TableField[] { StudentProfileTable.STUDENT_PROFILE.ID }, true);
    public static final ForeignKey<StudentUploadedWritingRecord, StudentUploadedSupervisorReviewRecord> STUDENT_UPLOADED_WRITING__FK_STUD_UPLD_WRIT_CONT_REVI = Internal.createForeignKey(StudentUploadedWritingTable.STUDENT_UPLOADED_WRITING, DSL.name("fk_stud_upld_writ_cont_revi"), new TableField[] { StudentUploadedWritingTable.STUDENT_UPLOADED_WRITING.CONTENT_REVIEW_ID }, Keys.STUDENT_UPLOADED_SUPERVISOR_REVIEW_PKEY, new TableField[] { StudentUploadedSupervisorReviewTable.STUDENT_UPLOADED_SUPERVISOR_REVIEW.ID }, true);
    public static final ForeignKey<StudentUploadedWritingRecord, StudentUploadedSupervisorReviewRecord> STUDENT_UPLOADED_WRITING__FK_STUD_UPLD_WRIT_GRAM_COMP_REVI = Internal.createForeignKey(StudentUploadedWritingTable.STUDENT_UPLOADED_WRITING, DSL.name("fk_stud_upld_writ_gram_comp_revi"), new TableField[] { StudentUploadedWritingTable.STUDENT_UPLOADED_WRITING.COMPOSITION_REVIEW_ID }, Keys.STUDENT_UPLOADED_SUPERVISOR_REVIEW_PKEY, new TableField[] { StudentUploadedSupervisorReviewTable.STUDENT_UPLOADED_SUPERVISOR_REVIEW.ID }, true);
    public static final ForeignKey<StudentUploadedWritingRecord, StudentUploadedSupervisorReviewRecord> STUDENT_UPLOADED_WRITING__FK_STUD_UPLD_WRIT_GRAM_EXPE_REVI = Internal.createForeignKey(StudentUploadedWritingTable.STUDENT_UPLOADED_WRITING, DSL.name("fk_stud_upld_writ_gram_expe_revi"), new TableField[] { StudentUploadedWritingTable.STUDENT_UPLOADED_WRITING.GRAMMAR_AND_EXPRESSION_REVIEW_ID }, Keys.STUDENT_UPLOADED_SUPERVISOR_REVIEW_PKEY, new TableField[] { StudentUploadedSupervisorReviewTable.STUDENT_UPLOADED_SUPERVISOR_REVIEW.ID }, true);
    public static final ForeignKey<StudentUploadedWritingRecord, StudentPaymentTransactionRecord> STUDENT_UPLOADED_WRITING__FK_STUD_UPLD_WRIT_PAY_TRAN = Internal.createForeignKey(StudentUploadedWritingTable.STUDENT_UPLOADED_WRITING, DSL.name("fk_stud_upld_writ_pay_tran"), new TableField[] { StudentUploadedWritingTable.STUDENT_UPLOADED_WRITING.PAYMENT_TRANSACTION_ID }, Keys.STUDENT_PAYMENT_TRANSACTION_PKEY, new TableField[] { StudentPaymentTransactionTable.STUDENT_PAYMENT_TRANSACTION.ID }, true);
    public static final ForeignKey<StudentUploadedWritingRecord, StudentProfileRecord> STUDENT_UPLOADED_WRITING__FK_STUD_UPLD_WRIT_STUD_PROF = Internal.createForeignKey(StudentUploadedWritingTable.STUDENT_UPLOADED_WRITING, DSL.name("fk_stud_upld_writ_stud_prof"), new TableField[] { StudentUploadedWritingTable.STUDENT_UPLOADED_WRITING.STUDENT_PROFILE_ID }, Keys.STUDENT_PROFILE_PKEY, new TableField[] { StudentProfileTable.STUDENT_PROFILE.ID }, true);
    public static final ForeignKey<TagRecord, I18nRecord> TAG__FK_TAG_DESC = Internal.createForeignKey(TagTable.TAG, DSL.name("fk_tag_desc"), new TableField[] { TagTable.TAG.DESCRIPTION_I18N_ID }, Keys.I18N_PKEY, new TableField[] { I18nTable.I18N.ID }, true);
    public static final ForeignKey<TaggingRecord, TagRecord> TAGGING__FK_TAGI_TAG = Internal.createForeignKey(TaggingTable.TAGGING, DSL.name("fk_tagi_tag"), new TableField[] { TaggingTable.TAGGING.TAG_ID }, Keys.TAG_PKEY, new TableField[] { TagTable.TAG.ID }, true);
    public static final ForeignKey<UserRecord, I18nRecord> USER__FK_USER_FIRST_NAME = Internal.createForeignKey(UserTable.USER, DSL.name("fk_user_first_name"), new TableField[] { UserTable.USER.FIST_NAME_I18N_ID }, Keys.I18N_PKEY, new TableField[] { I18nTable.I18N.ID }, true);
    public static final ForeignKey<UserRecord, I18nRecord> USER__FK_USER_LAST_NAME = Internal.createForeignKey(UserTable.USER, DSL.name("fk_user_last_name"), new TableField[] { UserTable.USER.LAST_NAME_I18N_ID }, Keys.I18N_PKEY, new TableField[] { I18nTable.I18N.ID }, true);
    public static final ForeignKey<UserNotificationRecord, UserRecord> USER_NOTIFICATION__FK_USER_NOTI_OWN_USER = Internal.createForeignKey(UserNotificationTable.USER_NOTIFICATION, DSL.name("fk_user_noti_own_user"), new TableField[] { UserNotificationTable.USER_NOTIFICATION.OWNER_USER_ID }, Keys.USER_PKEY, new TableField[] { UserTable.USER.ID }, true);
    public static final ForeignKey<WritingTopicRecord, I18nRecord> WRITING_TOPIC__FK_WRIT_TOPI_DESC = Internal.createForeignKey(WritingTopicTable.WRITING_TOPIC, DSL.name("fk_writ_topi_desc"), new TableField[] { WritingTopicTable.WRITING_TOPIC.DESCRIPTION_I18N_ID }, Keys.I18N_PKEY, new TableField[] { I18nTable.I18N.ID }, true);
}
