/*
 * This file is generated by jOOQ.
 */
package unid.jooqMono.model.tables.records;


import java.beans.ConstructorProperties;
import java.time.OffsetDateTime;
import java.util.UUID;

import javax.annotation.Nonnull;
import javax.annotation.Nullable;
import javax.annotation.processing.Generated;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record13;
import org.jooq.Row13;
import org.jooq.impl.UpdatableRecordImpl;

import unid.jooqMono.model.tables.EcaCourseTable;
import unid.jooqMono.model.tables.pojos.EcaCoursePojo;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.15.12"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@lombok.experimental.FieldNameConstants(innerTypeName = "Columns")
public class EcaCourseRecord extends UpdatableRecordImpl<EcaCourseRecord> implements Record13<UUID, UUID, UUID, UUID, OffsetDateTime, String, OffsetDateTime, String, String, String, UUID[], UUID[], Integer[]> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.eca_course.id</code>.
     */
    public EcaCourseRecord setId(@Nonnull UUID value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>public.eca_course.id</code>.
     */
    @Nonnull
    public UUID getId() {
        return (UUID) get(0);
    }

    /**
     * Setter for <code>public.eca_course.title_i18n_id</code>.
     */
    public EcaCourseRecord setTitleI18nId(@Nullable UUID value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>public.eca_course.title_i18n_id</code>.
     */
    @Nullable
    public UUID getTitleI18nId() {
        return (UUID) get(1);
    }

    /**
     * Setter for <code>public.eca_course.description_i18n_id</code>.
     */
    public EcaCourseRecord setDescriptionI18nId(@Nullable UUID value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>public.eca_course.description_i18n_id</code>.
     */
    @Nullable
    public UUID getDescriptionI18nId() {
        return (UUID) get(2);
    }

    /**
     * Setter for <code>public.eca_course.eligibility_i18n_id</code>.
     */
    public EcaCourseRecord setEligibilityI18nId(@Nullable UUID value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>public.eca_course.eligibility_i18n_id</code>.
     */
    @Nullable
    public UUID getEligibilityI18nId() {
        return (UUID) get(3);
    }

    /**
     * Setter for <code>public.eca_course.created_on</code>.
     */
    public EcaCourseRecord setCreatedOn(@Nullable OffsetDateTime value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>public.eca_course.created_on</code>.
     */
    @Nullable
    public OffsetDateTime getCreatedOn() {
        return (OffsetDateTime) get(4);
    }

    /**
     * Setter for <code>public.eca_course.created_by</code>.
     */
    public EcaCourseRecord setCreatedBy(@Nullable String value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>public.eca_course.created_by</code>.
     */
    @Nullable
    public String getCreatedBy() {
        return (String) get(5);
    }

    /**
     * Setter for <code>public.eca_course.updated_on</code>.
     */
    public EcaCourseRecord setUpdatedOn(@Nullable OffsetDateTime value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>public.eca_course.updated_on</code>.
     */
    @Nullable
    public OffsetDateTime getUpdatedOn() {
        return (OffsetDateTime) get(6);
    }

    /**
     * Setter for <code>public.eca_course.updated_by</code>.
     */
    public EcaCourseRecord setUpdatedBy(@Nullable String value) {
        set(7, value);
        return this;
    }

    /**
     * Getter for <code>public.eca_course.updated_by</code>.
     */
    @Nullable
    public String getUpdatedBy() {
        return (String) get(7);
    }

    /**
     * Setter for <code>public.eca_course.ref_url</code>.
     */
    public EcaCourseRecord setRefUrl(@Nullable String value) {
        set(8, value);
        return this;
    }

    /**
     * Getter for <code>public.eca_course.ref_url</code>.
     */
    @Size(max = 255)
    @Nullable
    public String getRefUrl() {
        return (String) get(8);
    }

    /**
     * Setter for <code>public.eca_course.cover_image</code>.
     */
    public EcaCourseRecord setCoverImage(@Nullable String value) {
        set(9, value);
        return this;
    }

    /**
     * Getter for <code>public.eca_course.cover_image</code>.
     */
    @Size(max = 255)
    @Nullable
    public String getCoverImage() {
        return (String) get(9);
    }

    /**
     * Setter for <code>public.eca_course.academic_id</code>.
     */
    public EcaCourseRecord setAcademicId(@Nonnull UUID[] value) {
        set(10, value);
        return this;
    }

    /**
     * Getter for <code>public.eca_course.academic_id</code>.
     */
    @NotNull
    @Nonnull
    public UUID[] getAcademicId() {
        return (UUID[]) get(10);
    }

    /**
     * Setter for <code>public.eca_course.opportunity_id</code>.
     */
    public EcaCourseRecord setOpportunityId(@Nonnull UUID[] value) {
        set(11, value);
        return this;
    }

    /**
     * Getter for <code>public.eca_course.opportunity_id</code>.
     */
    @NotNull
    @Nonnull
    public UUID[] getOpportunityId() {
        return (UUID[]) get(11);
    }

    /**
     * Setter for <code>public.eca_course.grade</code>.
     */
    public EcaCourseRecord setGrade(@Nonnull Integer[] value) {
        set(12, value);
        return this;
    }

    /**
     * Getter for <code>public.eca_course.grade</code>.
     */
    @NotNull
    @Nonnull
    public Integer[] getGrade() {
        return (Integer[]) get(12);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    @Nonnull
    public Record1<UUID> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record13 type implementation
    // -------------------------------------------------------------------------

    @Override
    @Nonnull
    public Row13<UUID, UUID, UUID, UUID, OffsetDateTime, String, OffsetDateTime, String, String, String, UUID[], UUID[], Integer[]> fieldsRow() {
        return (Row13) super.fieldsRow();
    }

    @Override
    @Nonnull
    public Row13<UUID, UUID, UUID, UUID, OffsetDateTime, String, OffsetDateTime, String, String, String, UUID[], UUID[], Integer[]> valuesRow() {
        return (Row13) super.valuesRow();
    }

    @Override
    @Nonnull
    public Field<UUID> field1() {
        return EcaCourseTable.ECA_COURSE.ID;
    }

    @Override
    @Nonnull
    public Field<UUID> field2() {
        return EcaCourseTable.ECA_COURSE.TITLE_I18N_ID;
    }

    @Override
    @Nonnull
    public Field<UUID> field3() {
        return EcaCourseTable.ECA_COURSE.DESCRIPTION_I18N_ID;
    }

    @Override
    @Nonnull
    public Field<UUID> field4() {
        return EcaCourseTable.ECA_COURSE.ELIGIBILITY_I18N_ID;
    }

    @Override
    @Nonnull
    public Field<OffsetDateTime> field5() {
        return EcaCourseTable.ECA_COURSE.CREATED_ON;
    }

    @Override
    @Nonnull
    public Field<String> field6() {
        return EcaCourseTable.ECA_COURSE.CREATED_BY;
    }

    @Override
    @Nonnull
    public Field<OffsetDateTime> field7() {
        return EcaCourseTable.ECA_COURSE.UPDATED_ON;
    }

    @Override
    @Nonnull
    public Field<String> field8() {
        return EcaCourseTable.ECA_COURSE.UPDATED_BY;
    }

    @Override
    @Nonnull
    public Field<String> field9() {
        return EcaCourseTable.ECA_COURSE.REF_URL;
    }

    @Override
    @Nonnull
    public Field<String> field10() {
        return EcaCourseTable.ECA_COURSE.COVER_IMAGE;
    }

    @Override
    @Nonnull
    public Field<UUID[]> field11() {
        return EcaCourseTable.ECA_COURSE.ACADEMIC_ID;
    }

    @Override
    @Nonnull
    public Field<UUID[]> field12() {
        return EcaCourseTable.ECA_COURSE.OPPORTUNITY_ID;
    }

    @Override
    @Nonnull
    public Field<Integer[]> field13() {
        return EcaCourseTable.ECA_COURSE.GRADE;
    }

    @Override
    @Nonnull
    public UUID component1() {
        return getId();
    }

    @Override
    @Nullable
    public UUID component2() {
        return getTitleI18nId();
    }

    @Override
    @Nullable
    public UUID component3() {
        return getDescriptionI18nId();
    }

    @Override
    @Nullable
    public UUID component4() {
        return getEligibilityI18nId();
    }

    @Override
    @Nullable
    public OffsetDateTime component5() {
        return getCreatedOn();
    }

    @Override
    @Nullable
    public String component6() {
        return getCreatedBy();
    }

    @Override
    @Nullable
    public OffsetDateTime component7() {
        return getUpdatedOn();
    }

    @Override
    @Nullable
    public String component8() {
        return getUpdatedBy();
    }

    @Override
    @Nullable
    public String component9() {
        return getRefUrl();
    }

    @Override
    @Nullable
    public String component10() {
        return getCoverImage();
    }

    @Override
    @Nonnull
    public UUID[] component11() {
        return getAcademicId();
    }

    @Override
    @Nonnull
    public UUID[] component12() {
        return getOpportunityId();
    }

    @Override
    @Nonnull
    public Integer[] component13() {
        return getGrade();
    }

    @Override
    @Nonnull
    public UUID value1() {
        return getId();
    }

    @Override
    @Nullable
    public UUID value2() {
        return getTitleI18nId();
    }

    @Override
    @Nullable
    public UUID value3() {
        return getDescriptionI18nId();
    }

    @Override
    @Nullable
    public UUID value4() {
        return getEligibilityI18nId();
    }

    @Override
    @Nullable
    public OffsetDateTime value5() {
        return getCreatedOn();
    }

    @Override
    @Nullable
    public String value6() {
        return getCreatedBy();
    }

    @Override
    @Nullable
    public OffsetDateTime value7() {
        return getUpdatedOn();
    }

    @Override
    @Nullable
    public String value8() {
        return getUpdatedBy();
    }

    @Override
    @Nullable
    public String value9() {
        return getRefUrl();
    }

    @Override
    @Nullable
    public String value10() {
        return getCoverImage();
    }

    @Override
    @Nonnull
    public UUID[] value11() {
        return getAcademicId();
    }

    @Override
    @Nonnull
    public UUID[] value12() {
        return getOpportunityId();
    }

    @Override
    @Nonnull
    public Integer[] value13() {
        return getGrade();
    }

    @Override
    @Nonnull
    public EcaCourseRecord value1(@Nonnull UUID value) {
        setId(value);
        return this;
    }

    @Override
    @Nonnull
    public EcaCourseRecord value2(@Nullable UUID value) {
        setTitleI18nId(value);
        return this;
    }

    @Override
    @Nonnull
    public EcaCourseRecord value3(@Nullable UUID value) {
        setDescriptionI18nId(value);
        return this;
    }

    @Override
    @Nonnull
    public EcaCourseRecord value4(@Nullable UUID value) {
        setEligibilityI18nId(value);
        return this;
    }

    @Override
    @Nonnull
    public EcaCourseRecord value5(@Nullable OffsetDateTime value) {
        setCreatedOn(value);
        return this;
    }

    @Override
    @Nonnull
    public EcaCourseRecord value6(@Nullable String value) {
        setCreatedBy(value);
        return this;
    }

    @Override
    @Nonnull
    public EcaCourseRecord value7(@Nullable OffsetDateTime value) {
        setUpdatedOn(value);
        return this;
    }

    @Override
    @Nonnull
    public EcaCourseRecord value8(@Nullable String value) {
        setUpdatedBy(value);
        return this;
    }

    @Override
    @Nonnull
    public EcaCourseRecord value9(@Nullable String value) {
        setRefUrl(value);
        return this;
    }

    @Override
    @Nonnull
    public EcaCourseRecord value10(@Nullable String value) {
        setCoverImage(value);
        return this;
    }

    @Override
    @Nonnull
    public EcaCourseRecord value11(@Nonnull UUID[] value) {
        setAcademicId(value);
        return this;
    }

    @Override
    @Nonnull
    public EcaCourseRecord value12(@Nonnull UUID[] value) {
        setOpportunityId(value);
        return this;
    }

    @Override
    @Nonnull
    public EcaCourseRecord value13(@Nonnull Integer[] value) {
        setGrade(value);
        return this;
    }

    @Override
    @Nonnull
    public EcaCourseRecord values(@Nonnull UUID value1, @Nullable UUID value2, @Nullable UUID value3, @Nullable UUID value4, @Nullable OffsetDateTime value5, @Nullable String value6, @Nullable OffsetDateTime value7, @Nullable String value8, @Nullable String value9, @Nullable String value10, @Nonnull UUID[] value11, @Nonnull UUID[] value12, @Nonnull Integer[] value13) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        value10(value10);
        value11(value11);
        value12(value12);
        value13(value13);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached EcaCourseRecord
     */
    public EcaCourseRecord() {
        super(EcaCourseTable.ECA_COURSE);
    }

    /**
     * Create a detached, initialised EcaCourseRecord
     */
    @ConstructorProperties({ "id", "titleI18nId", "descriptionI18nId", "eligibilityI18nId", "createdOn", "createdBy", "updatedOn", "updatedBy", "refUrl", "coverImage", "academicId", "opportunityId", "grade" })
    public EcaCourseRecord(@Nonnull UUID id, @Nullable UUID titleI18nId, @Nullable UUID descriptionI18nId, @Nullable UUID eligibilityI18nId, @Nullable OffsetDateTime createdOn, @Nullable String createdBy, @Nullable OffsetDateTime updatedOn, @Nullable String updatedBy, @Nullable String refUrl, @Nullable String coverImage, @Nonnull UUID[] academicId, @Nonnull UUID[] opportunityId, @Nonnull Integer[] grade) {
        super(EcaCourseTable.ECA_COURSE);

        setId(id);
        setTitleI18nId(titleI18nId);
        setDescriptionI18nId(descriptionI18nId);
        setEligibilityI18nId(eligibilityI18nId);
        setCreatedOn(createdOn);
        setCreatedBy(createdBy);
        setUpdatedOn(updatedOn);
        setUpdatedBy(updatedBy);
        setRefUrl(refUrl);
        setCoverImage(coverImage);
        setAcademicId(academicId);
        setOpportunityId(opportunityId);
        setGrade(grade);
    }

    /**
     * Create a detached, initialised EcaCourseRecord
     */
    public EcaCourseRecord(EcaCoursePojo value) {
        super(EcaCourseTable.ECA_COURSE);

        if (value != null) {
            setId(value.getId());
            setTitleI18nId(value.getTitleI18nId());
            setDescriptionI18nId(value.getDescriptionI18nId());
            setEligibilityI18nId(value.getEligibilityI18nId());
            setCreatedOn(value.getCreatedOn());
            setCreatedBy(value.getCreatedBy());
            setUpdatedOn(value.getUpdatedOn());
            setUpdatedBy(value.getUpdatedBy());
            setRefUrl(value.getRefUrl());
            setCoverImage(value.getCoverImage());
            setAcademicId(value.getAcademicId());
            setOpportunityId(value.getOpportunityId());
            setGrade(value.getGrade());
        }
    }
}
