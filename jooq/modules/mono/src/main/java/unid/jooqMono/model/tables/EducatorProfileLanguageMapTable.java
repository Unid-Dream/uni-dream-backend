/*
 * This file is generated by jOOQ.
 */
package unid.jooqMono.model.tables;


import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import javax.annotation.Nonnull;
import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import unid.jooqMono.model.Keys;
import unid.jooqMono.model.Public;
import unid.jooqMono.model.tables.records.EducatorProfileLanguageMapRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.15.12"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class EducatorProfileLanguageMapTable extends TableImpl<EducatorProfileLanguageMapRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>public.educator_profile_language_map</code>
     */
    public static final EducatorProfileLanguageMapTable EDUCATOR_PROFILE_LANGUAGE_MAP = new EducatorProfileLanguageMapTable();

    /**
     * The class holding records for this type
     */
    @Override
    @Nonnull
    public Class<EducatorProfileLanguageMapRecord> getRecordType() {
        return EducatorProfileLanguageMapRecord.class;
    }

    /**
     * The column <code>public.educator_profile_language_map.id</code>.
     */
    public final TableField<EducatorProfileLanguageMapRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field("gen_random_uuid()", SQLDataType.UUID)), this, "");

    /**
     * The column
     * <code>public.educator_profile_language_map.educator_profile_id</code>.
     */
    public final TableField<EducatorProfileLanguageMapRecord, UUID> EDUCATOR_PROFILE_ID = createField(DSL.name("educator_profile_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.educator_profile_language_map.language_id</code>.
     */
    public final TableField<EducatorProfileLanguageMapRecord, UUID> LANGUAGE_ID = createField(DSL.name("language_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.educator_profile_language_map.created_on</code>.
     */
    public final TableField<EducatorProfileLanguageMapRecord, OffsetDateTime> CREATED_ON = createField(DSL.name("created_on"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    /**
     * The column <code>public.educator_profile_language_map.created_by</code>.
     */
    public final TableField<EducatorProfileLanguageMapRecord, String> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.educator_profile_language_map.updated_on</code>.
     */
    public final TableField<EducatorProfileLanguageMapRecord, OffsetDateTime> UPDATED_ON = createField(DSL.name("updated_on"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    /**
     * The column <code>public.educator_profile_language_map.updated_by</code>.
     */
    public final TableField<EducatorProfileLanguageMapRecord, String> UPDATED_BY = createField(DSL.name("updated_by"), SQLDataType.CLOB, this, "");

    private EducatorProfileLanguageMapTable(Name alias, Table<EducatorProfileLanguageMapRecord> aliased) {
        this(alias, aliased, null);
    }

    private EducatorProfileLanguageMapTable(Name alias, Table<EducatorProfileLanguageMapRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.educator_profile_language_map</code> table
     * reference
     */
    public EducatorProfileLanguageMapTable(String alias) {
        this(DSL.name(alias), EDUCATOR_PROFILE_LANGUAGE_MAP);
    }

    /**
     * Create an aliased <code>public.educator_profile_language_map</code> table
     * reference
     */
    public EducatorProfileLanguageMapTable(Name alias) {
        this(alias, EDUCATOR_PROFILE_LANGUAGE_MAP);
    }

    /**
     * Create a <code>public.educator_profile_language_map</code> table
     * reference
     */
    public EducatorProfileLanguageMapTable() {
        this(DSL.name("educator_profile_language_map"), null);
    }

    public <O extends Record> EducatorProfileLanguageMapTable(Table<O> child, ForeignKey<O, EducatorProfileLanguageMapRecord> key) {
        super(child, key, EDUCATOR_PROFILE_LANGUAGE_MAP);
    }

    @Override
    @Nonnull
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    @Nonnull
    public UniqueKey<EducatorProfileLanguageMapRecord> getPrimaryKey() {
        return Keys.EDUCATOR_PROFILE_LANGUAGE_MAP_PKEY;
    }

    @Override
    @Nonnull
    public List<UniqueKey<EducatorProfileLanguageMapRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.UQ_EDUC_PROF_LANG_MAP);
    }

    @Override
    @Nonnull
    public List<ForeignKey<EducatorProfileLanguageMapRecord, ?>> getReferences() {
        return Arrays.asList(Keys.EDUCATOR_PROFILE_LANGUAGE_MAP__FK_EDUC_PROF_LANG_MAP_EDUC_PROF, Keys.EDUCATOR_PROFILE_LANGUAGE_MAP__FK_EDUC_PROF_LANG_MAP_LANG);
    }

    private transient EducatorProfileTable _educatorProfile;
    private transient LanguageTable _language;

    public EducatorProfileTable educatorProfile() {
        if (_educatorProfile == null)
            _educatorProfile = new EducatorProfileTable(this, Keys.EDUCATOR_PROFILE_LANGUAGE_MAP__FK_EDUC_PROF_LANG_MAP_EDUC_PROF);

        return _educatorProfile;
    }

    public LanguageTable language() {
        if (_language == null)
            _language = new LanguageTable(this, Keys.EDUCATOR_PROFILE_LANGUAGE_MAP__FK_EDUC_PROF_LANG_MAP_LANG);

        return _language;
    }

    @Override
    @Nonnull
    public EducatorProfileLanguageMapTable as(String alias) {
        return new EducatorProfileLanguageMapTable(DSL.name(alias), this);
    }

    @Override
    @Nonnull
    public EducatorProfileLanguageMapTable as(Name alias) {
        return new EducatorProfileLanguageMapTable(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public EducatorProfileLanguageMapTable rename(String name) {
        return new EducatorProfileLanguageMapTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public EducatorProfileLanguageMapTable rename(Name name) {
        return new EducatorProfileLanguageMapTable(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    @Nonnull
    public Row7<UUID, UUID, UUID, OffsetDateTime, String, OffsetDateTime, String> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
