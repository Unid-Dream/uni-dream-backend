/*
 * This file is generated by jOOQ.
 */
package unid.jooqMono.model.tables.daos;


import java.time.OffsetDateTime;
import java.util.List;
import java.util.UUID;

import javax.annotation.Nonnull;
import javax.annotation.Nullable;
import javax.annotation.processing.Generated;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;

import unid.jooqMono.model.enums.SchoolLevelEnum;
import unid.jooqMono.model.tables.CurriculumTable;
import unid.jooqMono.model.tables.pojos.CurriculumPojo;
import unid.jooqMono.model.tables.records.CurriculumRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.15.12"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CurriculumDao extends DAOImpl<CurriculumRecord, CurriculumPojo, UUID> {

    /**
     * Create a new CurriculumDao without any configuration
     */
    public CurriculumDao() {
        super(CurriculumTable.CURRICULUM, CurriculumPojo.class);
    }

    /**
     * Create a new CurriculumDao with an attached configuration
     */
    public CurriculumDao(Configuration configuration) {
        super(CurriculumTable.CURRICULUM, CurriculumPojo.class, configuration);
    }

    @Override
    @Nonnull
    public UUID getId(CurriculumPojo object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<CurriculumPojo> fetchRangeOfId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(CurriculumTable.CURRICULUM.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    @Nonnull
    public List<CurriculumPojo> fetchById(UUID... values) {
        return fetch(CurriculumTable.CURRICULUM.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    @Nullable
    public CurriculumPojo fetchOneById(UUID value) {
        return fetchOne(CurriculumTable.CURRICULUM.ID, value);
    }

    /**
     * Fetch records that have <code>school_level BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<CurriculumPojo> fetchRangeOfSchoolLevel(SchoolLevelEnum lowerInclusive, SchoolLevelEnum upperInclusive) {
        return fetchRange(CurriculumTable.CURRICULUM.SCHOOL_LEVEL, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>school_level IN (values)</code>
     */
    @Nonnull
    public List<CurriculumPojo> fetchBySchoolLevel(SchoolLevelEnum... values) {
        return fetch(CurriculumTable.CURRICULUM.SCHOOL_LEVEL, values);
    }

    /**
     * Fetch records that have <code>name_i18n_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<CurriculumPojo> fetchRangeOfNameI18nId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(CurriculumTable.CURRICULUM.NAME_I18N_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>name_i18n_id IN (values)</code>
     */
    @Nonnull
    public List<CurriculumPojo> fetchByNameI18nId(UUID... values) {
        return fetch(CurriculumTable.CURRICULUM.NAME_I18N_ID, values);
    }

    /**
     * Fetch a unique record that has <code>name_i18n_id = value</code>
     */
    @Nullable
    public CurriculumPojo fetchOneByNameI18nId(UUID value) {
        return fetchOne(CurriculumTable.CURRICULUM.NAME_I18N_ID, value);
    }

    /**
     * Fetch records that have <code>tag_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<CurriculumPojo> fetchRangeOfTagId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(CurriculumTable.CURRICULUM.TAG_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>tag_id IN (values)</code>
     */
    @Nonnull
    public List<CurriculumPojo> fetchByTagId(UUID... values) {
        return fetch(CurriculumTable.CURRICULUM.TAG_ID, values);
    }

    /**
     * Fetch records that have <code>created_on BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<CurriculumPojo> fetchRangeOfCreatedOn(OffsetDateTime lowerInclusive, OffsetDateTime upperInclusive) {
        return fetchRange(CurriculumTable.CURRICULUM.CREATED_ON, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>created_on IN (values)</code>
     */
    @Nonnull
    public List<CurriculumPojo> fetchByCreatedOn(OffsetDateTime... values) {
        return fetch(CurriculumTable.CURRICULUM.CREATED_ON, values);
    }

    /**
     * Fetch records that have <code>created_by BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<CurriculumPojo> fetchRangeOfCreatedBy(String lowerInclusive, String upperInclusive) {
        return fetchRange(CurriculumTable.CURRICULUM.CREATED_BY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>created_by IN (values)</code>
     */
    @Nonnull
    public List<CurriculumPojo> fetchByCreatedBy(String... values) {
        return fetch(CurriculumTable.CURRICULUM.CREATED_BY, values);
    }

    /**
     * Fetch records that have <code>updated_on BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<CurriculumPojo> fetchRangeOfUpdatedOn(OffsetDateTime lowerInclusive, OffsetDateTime upperInclusive) {
        return fetchRange(CurriculumTable.CURRICULUM.UPDATED_ON, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>updated_on IN (values)</code>
     */
    @Nonnull
    public List<CurriculumPojo> fetchByUpdatedOn(OffsetDateTime... values) {
        return fetch(CurriculumTable.CURRICULUM.UPDATED_ON, values);
    }

    /**
     * Fetch records that have <code>updated_by BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<CurriculumPojo> fetchRangeOfUpdatedBy(String lowerInclusive, String upperInclusive) {
        return fetchRange(CurriculumTable.CURRICULUM.UPDATED_BY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>updated_by IN (values)</code>
     */
    @Nonnull
    public List<CurriculumPojo> fetchByUpdatedBy(String... values) {
        return fetch(CurriculumTable.CURRICULUM.UPDATED_BY, values);
    }
}
