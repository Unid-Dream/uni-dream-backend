/*
 * This file is generated by jOOQ.
 */
package unid.jooqMono.model.tables;


import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import javax.annotation.Nonnull;
import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row16;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import unid.jooqMono.model.Keys;
import unid.jooqMono.model.Public;
import unid.jooqMono.model.enums.ReviewTypeEnum;
import unid.jooqMono.model.tables.records.StudentUploadedInterviewRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.15.12"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class StudentUploadedInterviewTable extends TableImpl<StudentUploadedInterviewRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.student_uploaded_interview</code>
     */
    public static final StudentUploadedInterviewTable STUDENT_UPLOADED_INTERVIEW = new StudentUploadedInterviewTable();

    /**
     * The class holding records for this type
     */
    @Override
    @Nonnull
    public Class<StudentUploadedInterviewRecord> getRecordType() {
        return StudentUploadedInterviewRecord.class;
    }

    /**
     * The column <code>public.student_uploaded_interview.id</code>.
     */
    public final TableField<StudentUploadedInterviewRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field("gen_random_uuid()", SQLDataType.UUID)), this, "");

    /**
     * The column
     * <code>public.student_uploaded_interview.student_profile_id</code>.
     */
    public final TableField<StudentUploadedInterviewRecord, UUID> STUDENT_PROFILE_ID = createField(DSL.name("student_profile_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column
     * <code>public.student_uploaded_interview.interview_topic_id</code>.
     */
    public final TableField<StudentUploadedInterviewRecord, UUID> INTERVIEW_TOPIC_ID = createField(DSL.name("interview_topic_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column
     * <code>public.student_uploaded_interview.payment_transaction_id</code>.
     */
    public final TableField<StudentUploadedInterviewRecord, UUID> PAYMENT_TRANSACTION_ID = createField(DSL.name("payment_transaction_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.student_uploaded_interview.uploaded_file</code>.
     */
    public final TableField<StudentUploadedInterviewRecord, String> UPLOADED_FILE = createField(DSL.name("uploaded_file"), SQLDataType.CLOB, this, "");

    /**
     * The column
     * <code>public.student_uploaded_interview.content_review_id</code>.
     */
    public final TableField<StudentUploadedInterviewRecord, UUID> CONTENT_REVIEW_ID = createField(DSL.name("content_review_id"), SQLDataType.UUID, this, "");

    /**
     * The column
     * <code>public.student_uploaded_interview.clarity_review_id</code>.
     */
    public final TableField<StudentUploadedInterviewRecord, UUID> CLARITY_REVIEW_ID = createField(DSL.name("clarity_review_id"), SQLDataType.UUID, this, "");

    /**
     * The column
     * <code>public.student_uploaded_interview.charisma_review_id</code>.
     */
    public final TableField<StudentUploadedInterviewRecord, UUID> CHARISMA_REVIEW_ID = createField(DSL.name("charisma_review_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.student_uploaded_interview.created_on</code>.
     */
    public final TableField<StudentUploadedInterviewRecord, OffsetDateTime> CREATED_ON = createField(DSL.name("created_on"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    /**
     * The column <code>public.student_uploaded_interview.created_by</code>.
     */
    public final TableField<StudentUploadedInterviewRecord, String> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.student_uploaded_interview.updated_on</code>.
     */
    public final TableField<StudentUploadedInterviewRecord, OffsetDateTime> UPDATED_ON = createField(DSL.name("updated_on"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    /**
     * The column <code>public.student_uploaded_interview.updated_by</code>.
     */
    public final TableField<StudentUploadedInterviewRecord, String> UPDATED_BY = createField(DSL.name("updated_by"), SQLDataType.CLOB, this, "");

    /**
     * The column
     * <code>public.student_uploaded_interview.recommended_activity</code>.
     */
    public final TableField<StudentUploadedInterviewRecord, String[]> RECOMMENDED_ACTIVITY = createField(DSL.name("recommended_activity"), SQLDataType.CLOB.getArrayDataType(), this, "");

    /**
     * The column <code>public.student_uploaded_interview.recommendation</code>.
     */
    public final TableField<StudentUploadedInterviewRecord, String> RECOMMENDATION = createField(DSL.name("recommendation"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.student_uploaded_interview.review_type</code>.
     */
    public final TableField<StudentUploadedInterviewRecord, ReviewTypeEnum> REVIEW_TYPE = createField(DSL.name("review_type"), SQLDataType.VARCHAR.asEnumDataType(unid.jooqMono.model.enums.ReviewTypeEnum.class), this, "");

    /**
     * The column
     * <code>public.student_uploaded_interview.educator_profile_id</code>.
     */
    public final TableField<StudentUploadedInterviewRecord, UUID> EDUCATOR_PROFILE_ID = createField(DSL.name("educator_profile_id"), SQLDataType.UUID, this, "");

    private StudentUploadedInterviewTable(Name alias, Table<StudentUploadedInterviewRecord> aliased) {
        this(alias, aliased, null);
    }

    private StudentUploadedInterviewTable(Name alias, Table<StudentUploadedInterviewRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.student_uploaded_interview</code> table
     * reference
     */
    public StudentUploadedInterviewTable(String alias) {
        this(DSL.name(alias), STUDENT_UPLOADED_INTERVIEW);
    }

    /**
     * Create an aliased <code>public.student_uploaded_interview</code> table
     * reference
     */
    public StudentUploadedInterviewTable(Name alias) {
        this(alias, STUDENT_UPLOADED_INTERVIEW);
    }

    /**
     * Create a <code>public.student_uploaded_interview</code> table reference
     */
    public StudentUploadedInterviewTable() {
        this(DSL.name("student_uploaded_interview"), null);
    }

    public <O extends Record> StudentUploadedInterviewTable(Table<O> child, ForeignKey<O, StudentUploadedInterviewRecord> key) {
        super(child, key, STUDENT_UPLOADED_INTERVIEW);
    }

    @Override
    @Nonnull
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    @Nonnull
    public UniqueKey<StudentUploadedInterviewRecord> getPrimaryKey() {
        return Keys.STUDENT_UPLOADED_INTERVIEW_PKEY;
    }

    @Override
    @Nonnull
    public List<UniqueKey<StudentUploadedInterviewRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.STUDENT_UPLOADED_INTERVIEW_PAYMENT_TRANSACTION_ID_KEY);
    }

    @Override
    @Nonnull
    public List<ForeignKey<StudentUploadedInterviewRecord, ?>> getReferences() {
        return Arrays.asList(Keys.STUDENT_UPLOADED_INTERVIEW__FK_STUD_UPLD_INTV_STUD_PROF, Keys.STUDENT_UPLOADED_INTERVIEW__FK_STUD_UPLD_INTV_PAY_TRAN, Keys.STUDENT_UPLOADED_INTERVIEW__FK_STUD_UPLD_INTV_CONT_REVI, Keys.STUDENT_UPLOADED_INTERVIEW__FK_STUD_UPLD_INTV_CLAR_REVI, Keys.STUDENT_UPLOADED_INTERVIEW__FK_STUD_UPLD_INTV_CHAR_REVI);
    }

    private transient StudentProfileTable _studentProfile;
    private transient StudentPaymentTransactionTable _studentPaymentTransaction;
    private transient StudentUploadedSupervisorReviewTable _fkStudUpldIntvContRevi;
    private transient StudentUploadedSupervisorReviewTable _fkStudUpldIntvClarRevi;
    private transient StudentUploadedSupervisorReviewTable _fkStudUpldIntvCharRevi;

    public StudentProfileTable studentProfile() {
        if (_studentProfile == null)
            _studentProfile = new StudentProfileTable(this, Keys.STUDENT_UPLOADED_INTERVIEW__FK_STUD_UPLD_INTV_STUD_PROF);

        return _studentProfile;
    }

    public StudentPaymentTransactionTable studentPaymentTransaction() {
        if (_studentPaymentTransaction == null)
            _studentPaymentTransaction = new StudentPaymentTransactionTable(this, Keys.STUDENT_UPLOADED_INTERVIEW__FK_STUD_UPLD_INTV_PAY_TRAN);

        return _studentPaymentTransaction;
    }

    public StudentUploadedSupervisorReviewTable fkStudUpldIntvContRevi() {
        if (_fkStudUpldIntvContRevi == null)
            _fkStudUpldIntvContRevi = new StudentUploadedSupervisorReviewTable(this, Keys.STUDENT_UPLOADED_INTERVIEW__FK_STUD_UPLD_INTV_CONT_REVI);

        return _fkStudUpldIntvContRevi;
    }

    public StudentUploadedSupervisorReviewTable fkStudUpldIntvClarRevi() {
        if (_fkStudUpldIntvClarRevi == null)
            _fkStudUpldIntvClarRevi = new StudentUploadedSupervisorReviewTable(this, Keys.STUDENT_UPLOADED_INTERVIEW__FK_STUD_UPLD_INTV_CLAR_REVI);

        return _fkStudUpldIntvClarRevi;
    }

    public StudentUploadedSupervisorReviewTable fkStudUpldIntvCharRevi() {
        if (_fkStudUpldIntvCharRevi == null)
            _fkStudUpldIntvCharRevi = new StudentUploadedSupervisorReviewTable(this, Keys.STUDENT_UPLOADED_INTERVIEW__FK_STUD_UPLD_INTV_CHAR_REVI);

        return _fkStudUpldIntvCharRevi;
    }

    @Override
    @Nonnull
    public StudentUploadedInterviewTable as(String alias) {
        return new StudentUploadedInterviewTable(DSL.name(alias), this);
    }

    @Override
    @Nonnull
    public StudentUploadedInterviewTable as(Name alias) {
        return new StudentUploadedInterviewTable(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public StudentUploadedInterviewTable rename(String name) {
        return new StudentUploadedInterviewTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public StudentUploadedInterviewTable rename(Name name) {
        return new StudentUploadedInterviewTable(name, null);
    }

    // -------------------------------------------------------------------------
    // Row16 type methods
    // -------------------------------------------------------------------------

    @Override
    @Nonnull
    public Row16<UUID, UUID, UUID, UUID, String, UUID, UUID, UUID, OffsetDateTime, String, OffsetDateTime, String, String[], String, ReviewTypeEnum, UUID> fieldsRow() {
        return (Row16) super.fieldsRow();
    }
}
