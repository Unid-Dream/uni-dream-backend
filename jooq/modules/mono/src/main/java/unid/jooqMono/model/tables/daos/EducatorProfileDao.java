/*
 * This file is generated by jOOQ.
 */
package unid.jooqMono.model.tables.daos;


import java.time.OffsetDateTime;
import java.util.List;
import java.util.UUID;

import javax.annotation.Nonnull;
import javax.annotation.Nullable;
import javax.annotation.processing.Generated;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;

import unid.jooqMono.model.enums.ApplicationApprovalEnum;
import unid.jooqMono.model.tables.EducatorProfileTable;
import unid.jooqMono.model.tables.pojos.EducatorProfilePojo;
import unid.jooqMono.model.tables.records.EducatorProfileRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.15.12"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class EducatorProfileDao extends DAOImpl<EducatorProfileRecord, EducatorProfilePojo, UUID> {

    /**
     * Create a new EducatorProfileDao without any configuration
     */
    public EducatorProfileDao() {
        super(EducatorProfileTable.EDUCATOR_PROFILE, EducatorProfilePojo.class);
    }

    /**
     * Create a new EducatorProfileDao with an attached configuration
     */
    public EducatorProfileDao(Configuration configuration) {
        super(EducatorProfileTable.EDUCATOR_PROFILE, EducatorProfilePojo.class, configuration);
    }

    @Override
    @Nonnull
    public UUID getId(EducatorProfilePojo object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<EducatorProfilePojo> fetchRangeOfId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(EducatorProfileTable.EDUCATOR_PROFILE.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    @Nonnull
    public List<EducatorProfilePojo> fetchById(UUID... values) {
        return fetch(EducatorProfileTable.EDUCATOR_PROFILE.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    @Nullable
    public EducatorProfilePojo fetchOneById(UUID value) {
        return fetchOne(EducatorProfileTable.EDUCATOR_PROFILE.ID, value);
    }

    /**
     * Fetch records that have <code>user_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<EducatorProfilePojo> fetchRangeOfUserId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(EducatorProfileTable.EDUCATOR_PROFILE.USER_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>user_id IN (values)</code>
     */
    @Nonnull
    public List<EducatorProfilePojo> fetchByUserId(UUID... values) {
        return fetch(EducatorProfileTable.EDUCATOR_PROFILE.USER_ID, values);
    }

    /**
     * Fetch a unique record that has <code>user_id = value</code>
     */
    @Nullable
    public EducatorProfilePojo fetchOneByUserId(UUID value) {
        return fetchOne(EducatorProfileTable.EDUCATOR_PROFILE.USER_ID, value);
    }

    /**
     * Fetch records that have <code>application_approval BETWEEN lowerInclusive
     * AND upperInclusive</code>
     */
    @Nonnull
    public List<EducatorProfilePojo> fetchRangeOfApplicationApproval(ApplicationApprovalEnum lowerInclusive, ApplicationApprovalEnum upperInclusive) {
        return fetchRange(EducatorProfileTable.EDUCATOR_PROFILE.APPLICATION_APPROVAL, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>application_approval IN (values)</code>
     */
    @Nonnull
    public List<EducatorProfilePojo> fetchByApplicationApproval(ApplicationApprovalEnum... values) {
        return fetch(EducatorProfileTable.EDUCATOR_PROFILE.APPLICATION_APPROVAL, values);
    }

    /**
     * Fetch records that have <code>microsoft_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<EducatorProfilePojo> fetchRangeOfMicrosoftId(String lowerInclusive, String upperInclusive) {
        return fetchRange(EducatorProfileTable.EDUCATOR_PROFILE.MICROSOFT_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>microsoft_id IN (values)</code>
     */
    @Nonnull
    public List<EducatorProfilePojo> fetchByMicrosoftId(String... values) {
        return fetch(EducatorProfileTable.EDUCATOR_PROFILE.MICROSOFT_ID, values);
    }

    /**
     * Fetch records that have <code>microsoft_email BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<EducatorProfilePojo> fetchRangeOfMicrosoftEmail(String lowerInclusive, String upperInclusive) {
        return fetchRange(EducatorProfileTable.EDUCATOR_PROFILE.MICROSOFT_EMAIL, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>microsoft_email IN (values)</code>
     */
    @Nonnull
    public List<EducatorProfilePojo> fetchByMicrosoftEmail(String... values) {
        return fetch(EducatorProfileTable.EDUCATOR_PROFILE.MICROSOFT_EMAIL, values);
    }

    /**
     * Fetch records that have <code>country_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<EducatorProfilePojo> fetchRangeOfCountryId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(EducatorProfileTable.EDUCATOR_PROFILE.COUNTRY_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>country_id IN (values)</code>
     */
    @Nonnull
    public List<EducatorProfilePojo> fetchByCountryId(UUID... values) {
        return fetch(EducatorProfileTable.EDUCATOR_PROFILE.COUNTRY_ID, values);
    }

    /**
     * Fetch records that have <code>profile_picture BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<EducatorProfilePojo> fetchRangeOfProfilePicture(String lowerInclusive, String upperInclusive) {
        return fetchRange(EducatorProfileTable.EDUCATOR_PROFILE.PROFILE_PICTURE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>profile_picture IN (values)</code>
     */
    @Nonnull
    public List<EducatorProfilePojo> fetchByProfilePicture(String... values) {
        return fetch(EducatorProfileTable.EDUCATOR_PROFILE.PROFILE_PICTURE, values);
    }

    /**
     * Fetch records that have <code>phone_country_code BETWEEN lowerInclusive
     * AND upperInclusive</code>
     */
    @Nonnull
    public List<EducatorProfilePojo> fetchRangeOfPhoneCountryCode(String lowerInclusive, String upperInclusive) {
        return fetchRange(EducatorProfileTable.EDUCATOR_PROFILE.PHONE_COUNTRY_CODE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>phone_country_code IN (values)</code>
     */
    @Nonnull
    public List<EducatorProfilePojo> fetchByPhoneCountryCode(String... values) {
        return fetch(EducatorProfileTable.EDUCATOR_PROFILE.PHONE_COUNTRY_CODE, values);
    }

    /**
     * Fetch records that have <code>phone BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<EducatorProfilePojo> fetchRangeOfPhone(String lowerInclusive, String upperInclusive) {
        return fetchRange(EducatorProfileTable.EDUCATOR_PROFILE.PHONE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>phone IN (values)</code>
     */
    @Nonnull
    public List<EducatorProfilePojo> fetchByPhone(String... values) {
        return fetch(EducatorProfileTable.EDUCATOR_PROFILE.PHONE, values);
    }

    /**
     * Fetch records that have <code>hourly_rate BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<EducatorProfilePojo> fetchRangeOfHourlyRate(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(EducatorProfileTable.EDUCATOR_PROFILE.HOURLY_RATE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>hourly_rate IN (values)</code>
     */
    @Nonnull
    public List<EducatorProfilePojo> fetchByHourlyRate(Integer... values) {
        return fetch(EducatorProfileTable.EDUCATOR_PROFILE.HOURLY_RATE, values);
    }

    /**
     * Fetch records that have <code>university_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<EducatorProfilePojo> fetchRangeOfUniversityId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(EducatorProfileTable.EDUCATOR_PROFILE.UNIVERSITY_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>university_id IN (values)</code>
     */
    @Nonnull
    public List<EducatorProfilePojo> fetchByUniversityId(UUID... values) {
        return fetch(EducatorProfileTable.EDUCATOR_PROFILE.UNIVERSITY_ID, values);
    }

    /**
     * Fetch records that have <code>university_education_level_id BETWEEN
     * lowerInclusive AND upperInclusive</code>
     */
    @Nonnull
    public List<EducatorProfilePojo> fetchRangeOfUniversityEducationLevelId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(EducatorProfileTable.EDUCATOR_PROFILE.UNIVERSITY_EDUCATION_LEVEL_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>university_education_level_id IN
     * (values)</code>
     */
    @Nonnull
    public List<EducatorProfilePojo> fetchByUniversityEducationLevelId(UUID... values) {
        return fetch(EducatorProfileTable.EDUCATOR_PROFILE.UNIVERSITY_EDUCATION_LEVEL_ID, values);
    }

    /**
     * Fetch records that have <code>university_identity_id BETWEEN
     * lowerInclusive AND upperInclusive</code>
     */
    @Nonnull
    public List<EducatorProfilePojo> fetchRangeOfUniversityIdentityId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(EducatorProfileTable.EDUCATOR_PROFILE.UNIVERSITY_IDENTITY_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>university_identity_id IN (values)</code>
     */
    @Nonnull
    public List<EducatorProfilePojo> fetchByUniversityIdentityId(UUID... values) {
        return fetch(EducatorProfileTable.EDUCATOR_PROFILE.UNIVERSITY_IDENTITY_ID, values);
    }

    /**
     * Fetch records that have <code>created_on BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<EducatorProfilePojo> fetchRangeOfCreatedOn(OffsetDateTime lowerInclusive, OffsetDateTime upperInclusive) {
        return fetchRange(EducatorProfileTable.EDUCATOR_PROFILE.CREATED_ON, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>created_on IN (values)</code>
     */
    @Nonnull
    public List<EducatorProfilePojo> fetchByCreatedOn(OffsetDateTime... values) {
        return fetch(EducatorProfileTable.EDUCATOR_PROFILE.CREATED_ON, values);
    }

    /**
     * Fetch records that have <code>created_by BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<EducatorProfilePojo> fetchRangeOfCreatedBy(String lowerInclusive, String upperInclusive) {
        return fetchRange(EducatorProfileTable.EDUCATOR_PROFILE.CREATED_BY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>created_by IN (values)</code>
     */
    @Nonnull
    public List<EducatorProfilePojo> fetchByCreatedBy(String... values) {
        return fetch(EducatorProfileTable.EDUCATOR_PROFILE.CREATED_BY, values);
    }

    /**
     * Fetch records that have <code>updated_on BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<EducatorProfilePojo> fetchRangeOfUpdatedOn(OffsetDateTime lowerInclusive, OffsetDateTime upperInclusive) {
        return fetchRange(EducatorProfileTable.EDUCATOR_PROFILE.UPDATED_ON, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>updated_on IN (values)</code>
     */
    @Nonnull
    public List<EducatorProfilePojo> fetchByUpdatedOn(OffsetDateTime... values) {
        return fetch(EducatorProfileTable.EDUCATOR_PROFILE.UPDATED_ON, values);
    }

    /**
     * Fetch records that have <code>updated_by BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<EducatorProfilePojo> fetchRangeOfUpdatedBy(String lowerInclusive, String upperInclusive) {
        return fetchRange(EducatorProfileTable.EDUCATOR_PROFILE.UPDATED_BY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>updated_by IN (values)</code>
     */
    @Nonnull
    public List<EducatorProfilePojo> fetchByUpdatedBy(String... values) {
        return fetch(EducatorProfileTable.EDUCATOR_PROFILE.UPDATED_BY, values);
    }

    /**
     * Fetch records that have <code>expertise_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<EducatorProfilePojo> fetchRangeOfExpertiseId(UUID[] lowerInclusive, UUID[] upperInclusive) {
        return fetchRange(EducatorProfileTable.EDUCATOR_PROFILE.EXPERTISE_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>expertise_id IN (values)</code>
     */
    @Nonnull
    public List<EducatorProfilePojo> fetchByExpertiseId(UUID[]... values) {
        return fetch(EducatorProfileTable.EDUCATOR_PROFILE.EXPERTISE_ID, values);
    }

    /**
     * Fetch records that have <code>description BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<EducatorProfilePojo> fetchRangeOfDescription(String lowerInclusive, String upperInclusive) {
        return fetchRange(EducatorProfileTable.EDUCATOR_PROFILE.DESCRIPTION, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>description IN (values)</code>
     */
    @Nonnull
    public List<EducatorProfilePojo> fetchByDescription(String... values) {
        return fetch(EducatorProfileTable.EDUCATOR_PROFILE.DESCRIPTION, values);
    }

    /**
     * Fetch records that have <code>language_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<EducatorProfilePojo> fetchRangeOfLanguageId(UUID[] lowerInclusive, UUID[] upperInclusive) {
        return fetchRange(EducatorProfileTable.EDUCATOR_PROFILE.LANGUAGE_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>language_id IN (values)</code>
     */
    @Nonnull
    public List<EducatorProfilePojo> fetchByLanguageId(UUID[]... values) {
        return fetch(EducatorProfileTable.EDUCATOR_PROFILE.LANGUAGE_ID, values);
    }

    /**
     * Fetch records that have <code>city_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<EducatorProfilePojo> fetchRangeOfCityId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(EducatorProfileTable.EDUCATOR_PROFILE.CITY_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>city_id IN (values)</code>
     */
    @Nonnull
    public List<EducatorProfilePojo> fetchByCityId(UUID... values) {
        return fetch(EducatorProfileTable.EDUCATOR_PROFILE.CITY_ID, values);
    }

    /**
     * Fetch records that have <code>education_school_id BETWEEN lowerInclusive
     * AND upperInclusive</code>
     */
    @Nonnull
    public List<EducatorProfilePojo> fetchRangeOfEducationSchoolId(UUID[] lowerInclusive, UUID[] upperInclusive) {
        return fetchRange(EducatorProfileTable.EDUCATOR_PROFILE.EDUCATION_SCHOOL_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>education_school_id IN (values)</code>
     */
    @Nonnull
    public List<EducatorProfilePojo> fetchByEducationSchoolId(UUID[]... values) {
        return fetch(EducatorProfileTable.EDUCATOR_PROFILE.EDUCATION_SCHOOL_ID, values);
    }

    /**
     * Fetch records that have <code>academic_major_id BETWEEN lowerInclusive
     * AND upperInclusive</code>
     */
    @Nonnull
    public List<EducatorProfilePojo> fetchRangeOfAcademicMajorId(UUID[] lowerInclusive, UUID[] upperInclusive) {
        return fetchRange(EducatorProfileTable.EDUCATOR_PROFILE.ACADEMIC_MAJOR_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>academic_major_id IN (values)</code>
     */
    @Nonnull
    public List<EducatorProfilePojo> fetchByAcademicMajorId(UUID[]... values) {
        return fetch(EducatorProfileTable.EDUCATOR_PROFILE.ACADEMIC_MAJOR_ID, values);
    }

    /**
     * Fetch records that have <code>education_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<EducatorProfilePojo> fetchRangeOfEducationId(UUID[] lowerInclusive, UUID[] upperInclusive) {
        return fetchRange(EducatorProfileTable.EDUCATOR_PROFILE.EDUCATION_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>education_id IN (values)</code>
     */
    @Nonnull
    public List<EducatorProfilePojo> fetchByEducationId(UUID[]... values) {
        return fetch(EducatorProfileTable.EDUCATOR_PROFILE.EDUCATION_ID, values);
    }

    /**
     * Fetch records that have <code>expertise_description_id BETWEEN
     * lowerInclusive AND upperInclusive</code>
     */
    @Nonnull
    public List<EducatorProfilePojo> fetchRangeOfExpertiseDescriptionId(UUID[] lowerInclusive, UUID[] upperInclusive) {
        return fetchRange(EducatorProfileTable.EDUCATOR_PROFILE.EXPERTISE_DESCRIPTION_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>expertise_description_id IN (values)</code>
     */
    @Nonnull
    public List<EducatorProfilePojo> fetchByExpertiseDescriptionId(UUID[]... values) {
        return fetch(EducatorProfileTable.EDUCATOR_PROFILE.EXPERTISE_DESCRIPTION_ID, values);
    }

    /**
     * Fetch records that have <code>timezone BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<EducatorProfilePojo> fetchRangeOfTimezone(String lowerInclusive, String upperInclusive) {
        return fetchRange(EducatorProfileTable.EDUCATOR_PROFILE.TIMEZONE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>timezone IN (values)</code>
     */
    @Nonnull
    public List<EducatorProfilePojo> fetchByTimezone(String... values) {
        return fetch(EducatorProfileTable.EDUCATOR_PROFILE.TIMEZONE, values);
    }
}
