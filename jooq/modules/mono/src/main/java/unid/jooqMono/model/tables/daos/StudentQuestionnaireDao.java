/*
 * This file is generated by jOOQ.
 */
package unid.jooqMono.model.tables.daos;


import java.time.OffsetDateTime;
import java.util.List;
import java.util.UUID;

import javax.annotation.Nonnull;
import javax.annotation.Nullable;
import javax.annotation.processing.Generated;

import org.jooq.Configuration;
import org.jooq.Record2;
import org.jooq.impl.DAOImpl;

import unid.jooqMono.model.tables.StudentQuestionnaireTable;
import unid.jooqMono.model.tables.pojos.StudentQuestionnairePojo;
import unid.jooqMono.model.tables.records.StudentQuestionnaireRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.15.12"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class StudentQuestionnaireDao extends DAOImpl<StudentQuestionnaireRecord, StudentQuestionnairePojo, Record2<UUID, OffsetDateTime>> {

    /**
     * Create a new StudentQuestionnaireDao without any configuration
     */
    public StudentQuestionnaireDao() {
        super(StudentQuestionnaireTable.STUDENT_QUESTIONNAIRE, StudentQuestionnairePojo.class);
    }

    /**
     * Create a new StudentQuestionnaireDao with an attached configuration
     */
    public StudentQuestionnaireDao(Configuration configuration) {
        super(StudentQuestionnaireTable.STUDENT_QUESTIONNAIRE, StudentQuestionnairePojo.class, configuration);
    }

    @Override
    @Nonnull
    public Record2<UUID, OffsetDateTime> getId(StudentQuestionnairePojo object) {
        return compositeKeyRecord(object.getId(), object.getVersion());
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<StudentQuestionnairePojo> fetchRangeOfId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(StudentQuestionnaireTable.STUDENT_QUESTIONNAIRE.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    @Nonnull
    public List<StudentQuestionnairePojo> fetchById(UUID... values) {
        return fetch(StudentQuestionnaireTable.STUDENT_QUESTIONNAIRE.ID, values);
    }

    /**
     * Fetch records that have <code>version BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<StudentQuestionnairePojo> fetchRangeOfVersion(OffsetDateTime lowerInclusive, OffsetDateTime upperInclusive) {
        return fetchRange(StudentQuestionnaireTable.STUDENT_QUESTIONNAIRE.VERSION, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>version IN (values)</code>
     */
    @Nonnull
    public List<StudentQuestionnairePojo> fetchByVersion(OffsetDateTime... values) {
        return fetch(StudentQuestionnaireTable.STUDENT_QUESTIONNAIRE.VERSION, values);
    }

    /**
     * Fetch records that have <code>title_i18n_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<StudentQuestionnairePojo> fetchRangeOfTitleI18nId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(StudentQuestionnaireTable.STUDENT_QUESTIONNAIRE.TITLE_I18N_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>title_i18n_id IN (values)</code>
     */
    @Nonnull
    public List<StudentQuestionnairePojo> fetchByTitleI18nId(UUID... values) {
        return fetch(StudentQuestionnaireTable.STUDENT_QUESTIONNAIRE.TITLE_I18N_ID, values);
    }

    /**
     * Fetch a unique record that has <code>title_i18n_id = value</code>
     */
    @Nullable
    public StudentQuestionnairePojo fetchOneByTitleI18nId(UUID value) {
        return fetchOne(StudentQuestionnaireTable.STUDENT_QUESTIONNAIRE.TITLE_I18N_ID, value);
    }

    /**
     * Fetch records that have <code>sub_title_i18n_id BETWEEN lowerInclusive
     * AND upperInclusive</code>
     */
    @Nonnull
    public List<StudentQuestionnairePojo> fetchRangeOfSubTitleI18nId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(StudentQuestionnaireTable.STUDENT_QUESTIONNAIRE.SUB_TITLE_I18N_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>sub_title_i18n_id IN (values)</code>
     */
    @Nonnull
    public List<StudentQuestionnairePojo> fetchBySubTitleI18nId(UUID... values) {
        return fetch(StudentQuestionnaireTable.STUDENT_QUESTIONNAIRE.SUB_TITLE_I18N_ID, values);
    }

    /**
     * Fetch a unique record that has <code>sub_title_i18n_id = value</code>
     */
    @Nullable
    public StudentQuestionnairePojo fetchOneBySubTitleI18nId(UUID value) {
        return fetchOne(StudentQuestionnaireTable.STUDENT_QUESTIONNAIRE.SUB_TITLE_I18N_ID, value);
    }

    /**
     * Fetch records that have <code>description_i18n_id BETWEEN lowerInclusive
     * AND upperInclusive</code>
     */
    @Nonnull
    public List<StudentQuestionnairePojo> fetchRangeOfDescriptionI18nId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(StudentQuestionnaireTable.STUDENT_QUESTIONNAIRE.DESCRIPTION_I18N_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>description_i18n_id IN (values)</code>
     */
    @Nonnull
    public List<StudentQuestionnairePojo> fetchByDescriptionI18nId(UUID... values) {
        return fetch(StudentQuestionnaireTable.STUDENT_QUESTIONNAIRE.DESCRIPTION_I18N_ID, values);
    }

    /**
     * Fetch a unique record that has <code>description_i18n_id = value</code>
     */
    @Nullable
    public StudentQuestionnairePojo fetchOneByDescriptionI18nId(UUID value) {
        return fetchOne(StudentQuestionnaireTable.STUDENT_QUESTIONNAIRE.DESCRIPTION_I18N_ID, value);
    }

    /**
     * Fetch records that have <code>sections BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<StudentQuestionnairePojo> fetchRangeOfSections(String[] lowerInclusive, String[] upperInclusive) {
        return fetchRange(StudentQuestionnaireTable.STUDENT_QUESTIONNAIRE.SECTIONS, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>sections IN (values)</code>
     */
    @Nonnull
    public List<StudentQuestionnairePojo> fetchBySections(String[]... values) {
        return fetch(StudentQuestionnaireTable.STUDENT_QUESTIONNAIRE.SECTIONS, values);
    }

    /**
     * Fetch records that have <code>mandatory_on_new_join_student BETWEEN
     * lowerInclusive AND upperInclusive</code>
     */
    @Nonnull
    public List<StudentQuestionnairePojo> fetchRangeOfMandatoryOnNewJoinStudent(Boolean lowerInclusive, Boolean upperInclusive) {
        return fetchRange(StudentQuestionnaireTable.STUDENT_QUESTIONNAIRE.MANDATORY_ON_NEW_JOIN_STUDENT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>mandatory_on_new_join_student IN
     * (values)</code>
     */
    @Nonnull
    public List<StudentQuestionnairePojo> fetchByMandatoryOnNewJoinStudent(Boolean... values) {
        return fetch(StudentQuestionnaireTable.STUDENT_QUESTIONNAIRE.MANDATORY_ON_NEW_JOIN_STUDENT, values);
    }

    /**
     * Fetch records that have <code>created_on BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<StudentQuestionnairePojo> fetchRangeOfCreatedOn(OffsetDateTime lowerInclusive, OffsetDateTime upperInclusive) {
        return fetchRange(StudentQuestionnaireTable.STUDENT_QUESTIONNAIRE.CREATED_ON, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>created_on IN (values)</code>
     */
    @Nonnull
    public List<StudentQuestionnairePojo> fetchByCreatedOn(OffsetDateTime... values) {
        return fetch(StudentQuestionnaireTable.STUDENT_QUESTIONNAIRE.CREATED_ON, values);
    }

    /**
     * Fetch records that have <code>created_by BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<StudentQuestionnairePojo> fetchRangeOfCreatedBy(String lowerInclusive, String upperInclusive) {
        return fetchRange(StudentQuestionnaireTable.STUDENT_QUESTIONNAIRE.CREATED_BY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>created_by IN (values)</code>
     */
    @Nonnull
    public List<StudentQuestionnairePojo> fetchByCreatedBy(String... values) {
        return fetch(StudentQuestionnaireTable.STUDENT_QUESTIONNAIRE.CREATED_BY, values);
    }

    /**
     * Fetch records that have <code>updated_on BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<StudentQuestionnairePojo> fetchRangeOfUpdatedOn(OffsetDateTime lowerInclusive, OffsetDateTime upperInclusive) {
        return fetchRange(StudentQuestionnaireTable.STUDENT_QUESTIONNAIRE.UPDATED_ON, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>updated_on IN (values)</code>
     */
    @Nonnull
    public List<StudentQuestionnairePojo> fetchByUpdatedOn(OffsetDateTime... values) {
        return fetch(StudentQuestionnaireTable.STUDENT_QUESTIONNAIRE.UPDATED_ON, values);
    }

    /**
     * Fetch records that have <code>updated_by BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<StudentQuestionnairePojo> fetchRangeOfUpdatedBy(String lowerInclusive, String upperInclusive) {
        return fetchRange(StudentQuestionnaireTable.STUDENT_QUESTIONNAIRE.UPDATED_BY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>updated_by IN (values)</code>
     */
    @Nonnull
    public List<StudentQuestionnairePojo> fetchByUpdatedBy(String... values) {
        return fetch(StudentQuestionnaireTable.STUDENT_QUESTIONNAIRE.UPDATED_BY, values);
    }
}
