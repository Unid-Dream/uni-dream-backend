/*
 * This file is generated by jOOQ.
 */
package unid.jooqMono.model.tables.daos;


import java.time.OffsetDateTime;
import java.util.List;
import java.util.UUID;

import javax.annotation.Nonnull;
import javax.annotation.Nullable;
import javax.annotation.processing.Generated;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;

import unid.jooqMono.model.tables.AcademicSubjectTable;
import unid.jooqMono.model.tables.pojos.AcademicSubjectPojo;
import unid.jooqMono.model.tables.records.AcademicSubjectRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.15.12"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AcademicSubjectDao extends DAOImpl<AcademicSubjectRecord, AcademicSubjectPojo, UUID> {

    /**
     * Create a new AcademicSubjectDao without any configuration
     */
    public AcademicSubjectDao() {
        super(AcademicSubjectTable.ACADEMIC_SUBJECT, AcademicSubjectPojo.class);
    }

    /**
     * Create a new AcademicSubjectDao with an attached configuration
     */
    public AcademicSubjectDao(Configuration configuration) {
        super(AcademicSubjectTable.ACADEMIC_SUBJECT, AcademicSubjectPojo.class, configuration);
    }

    @Override
    @Nonnull
    public UUID getId(AcademicSubjectPojo object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<AcademicSubjectPojo> fetchRangeOfId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(AcademicSubjectTable.ACADEMIC_SUBJECT.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    @Nonnull
    public List<AcademicSubjectPojo> fetchById(UUID... values) {
        return fetch(AcademicSubjectTable.ACADEMIC_SUBJECT.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    @Nullable
    public AcademicSubjectPojo fetchOneById(UUID value) {
        return fetchOne(AcademicSubjectTable.ACADEMIC_SUBJECT.ID, value);
    }

    /**
     * Fetch records that have <code>title_i18n_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<AcademicSubjectPojo> fetchRangeOfTitleI18nId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(AcademicSubjectTable.ACADEMIC_SUBJECT.TITLE_I18N_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>title_i18n_id IN (values)</code>
     */
    @Nonnull
    public List<AcademicSubjectPojo> fetchByTitleI18nId(UUID... values) {
        return fetch(AcademicSubjectTable.ACADEMIC_SUBJECT.TITLE_I18N_ID, values);
    }

    /**
     * Fetch a unique record that has <code>title_i18n_id = value</code>
     */
    @Nullable
    public AcademicSubjectPojo fetchOneByTitleI18nId(UUID value) {
        return fetchOne(AcademicSubjectTable.ACADEMIC_SUBJECT.TITLE_I18N_ID, value);
    }

    /**
     * Fetch records that have <code>description_i18n_id BETWEEN lowerInclusive
     * AND upperInclusive</code>
     */
    @Nonnull
    public List<AcademicSubjectPojo> fetchRangeOfDescriptionI18nId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(AcademicSubjectTable.ACADEMIC_SUBJECT.DESCRIPTION_I18N_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>description_i18n_id IN (values)</code>
     */
    @Nonnull
    public List<AcademicSubjectPojo> fetchByDescriptionI18nId(UUID... values) {
        return fetch(AcademicSubjectTable.ACADEMIC_SUBJECT.DESCRIPTION_I18N_ID, values);
    }

    /**
     * Fetch a unique record that has <code>description_i18n_id = value</code>
     */
    @Nullable
    public AcademicSubjectPojo fetchOneByDescriptionI18nId(UUID value) {
        return fetchOne(AcademicSubjectTable.ACADEMIC_SUBJECT.DESCRIPTION_I18N_ID, value);
    }

    /**
     * Fetch records that have <code>description_master_degree_i18n_id BETWEEN
     * lowerInclusive AND upperInclusive</code>
     */
    @Nonnull
    public List<AcademicSubjectPojo> fetchRangeOfDescriptionMasterDegreeI18nId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(AcademicSubjectTable.ACADEMIC_SUBJECT.DESCRIPTION_MASTER_DEGREE_I18N_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>description_master_degree_i18n_id IN
     * (values)</code>
     */
    @Nonnull
    public List<AcademicSubjectPojo> fetchByDescriptionMasterDegreeI18nId(UUID... values) {
        return fetch(AcademicSubjectTable.ACADEMIC_SUBJECT.DESCRIPTION_MASTER_DEGREE_I18N_ID, values);
    }

    /**
     * Fetch a unique record that has <code>description_master_degree_i18n_id =
     * value</code>
     */
    @Nullable
    public AcademicSubjectPojo fetchOneByDescriptionMasterDegreeI18nId(UUID value) {
        return fetchOne(AcademicSubjectTable.ACADEMIC_SUBJECT.DESCRIPTION_MASTER_DEGREE_I18N_ID, value);
    }

    /**
     * Fetch records that have <code>description_phd_i18n_id BETWEEN
     * lowerInclusive AND upperInclusive</code>
     */
    @Nonnull
    public List<AcademicSubjectPojo> fetchRangeOfDescriptionPhdI18nId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(AcademicSubjectTable.ACADEMIC_SUBJECT.DESCRIPTION_PHD_I18N_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>description_phd_i18n_id IN (values)</code>
     */
    @Nonnull
    public List<AcademicSubjectPojo> fetchByDescriptionPhdI18nId(UUID... values) {
        return fetch(AcademicSubjectTable.ACADEMIC_SUBJECT.DESCRIPTION_PHD_I18N_ID, values);
    }

    /**
     * Fetch a unique record that has <code>description_phd_i18n_id =
     * value</code>
     */
    @Nullable
    public AcademicSubjectPojo fetchOneByDescriptionPhdI18nId(UUID value) {
        return fetchOne(AcademicSubjectTable.ACADEMIC_SUBJECT.DESCRIPTION_PHD_I18N_ID, value);
    }

    /**
     * Fetch records that have <code>tag_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<AcademicSubjectPojo> fetchRangeOfTagId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(AcademicSubjectTable.ACADEMIC_SUBJECT.TAG_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>tag_id IN (values)</code>
     */
    @Nonnull
    public List<AcademicSubjectPojo> fetchByTagId(UUID... values) {
        return fetch(AcademicSubjectTable.ACADEMIC_SUBJECT.TAG_ID, values);
    }

    /**
     * Fetch records that have <code>created_on BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<AcademicSubjectPojo> fetchRangeOfCreatedOn(OffsetDateTime lowerInclusive, OffsetDateTime upperInclusive) {
        return fetchRange(AcademicSubjectTable.ACADEMIC_SUBJECT.CREATED_ON, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>created_on IN (values)</code>
     */
    @Nonnull
    public List<AcademicSubjectPojo> fetchByCreatedOn(OffsetDateTime... values) {
        return fetch(AcademicSubjectTable.ACADEMIC_SUBJECT.CREATED_ON, values);
    }

    /**
     * Fetch records that have <code>created_by BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<AcademicSubjectPojo> fetchRangeOfCreatedBy(String lowerInclusive, String upperInclusive) {
        return fetchRange(AcademicSubjectTable.ACADEMIC_SUBJECT.CREATED_BY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>created_by IN (values)</code>
     */
    @Nonnull
    public List<AcademicSubjectPojo> fetchByCreatedBy(String... values) {
        return fetch(AcademicSubjectTable.ACADEMIC_SUBJECT.CREATED_BY, values);
    }

    /**
     * Fetch records that have <code>updated_on BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<AcademicSubjectPojo> fetchRangeOfUpdatedOn(OffsetDateTime lowerInclusive, OffsetDateTime upperInclusive) {
        return fetchRange(AcademicSubjectTable.ACADEMIC_SUBJECT.UPDATED_ON, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>updated_on IN (values)</code>
     */
    @Nonnull
    public List<AcademicSubjectPojo> fetchByUpdatedOn(OffsetDateTime... values) {
        return fetch(AcademicSubjectTable.ACADEMIC_SUBJECT.UPDATED_ON, values);
    }

    /**
     * Fetch records that have <code>updated_by BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<AcademicSubjectPojo> fetchRangeOfUpdatedBy(String lowerInclusive, String upperInclusive) {
        return fetchRange(AcademicSubjectTable.ACADEMIC_SUBJECT.UPDATED_BY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>updated_by IN (values)</code>
     */
    @Nonnull
    public List<AcademicSubjectPojo> fetchByUpdatedBy(String... values) {
        return fetch(AcademicSubjectTable.ACADEMIC_SUBJECT.UPDATED_BY, values);
    }
}
