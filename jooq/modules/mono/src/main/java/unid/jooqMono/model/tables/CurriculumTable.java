/*
 * This file is generated by jOOQ.
 */
package unid.jooqMono.model.tables;


import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import javax.annotation.Nonnull;
import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import unid.jooqMono.model.Keys;
import unid.jooqMono.model.Public;
import unid.jooqMono.model.enums.SchoolLevelEnum;
import unid.jooqMono.model.tables.records.CurriculumRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.15.12"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CurriculumTable extends TableImpl<CurriculumRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.curriculum</code>
     */
    public static final CurriculumTable CURRICULUM = new CurriculumTable();

    /**
     * The class holding records for this type
     */
    @Override
    @Nonnull
    public Class<CurriculumRecord> getRecordType() {
        return CurriculumRecord.class;
    }

    /**
     * The column <code>public.curriculum.id</code>.
     */
    public final TableField<CurriculumRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field("gen_random_uuid()", SQLDataType.UUID)), this, "");

    /**
     * The column <code>public.curriculum.school_level</code>.
     */
    public final TableField<CurriculumRecord, SchoolLevelEnum> SCHOOL_LEVEL = createField(DSL.name("school_level"), SQLDataType.VARCHAR.asEnumDataType(unid.jooqMono.model.enums.SchoolLevelEnum.class), this, "");

    /**
     * The column <code>public.curriculum.name_i18n_id</code>.
     */
    public final TableField<CurriculumRecord, UUID> NAME_I18N_ID = createField(DSL.name("name_i18n_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.curriculum.tag_id</code>.
     */
    public final TableField<CurriculumRecord, UUID> TAG_ID = createField(DSL.name("tag_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.curriculum.created_on</code>.
     */
    public final TableField<CurriculumRecord, OffsetDateTime> CREATED_ON = createField(DSL.name("created_on"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    /**
     * The column <code>public.curriculum.created_by</code>.
     */
    public final TableField<CurriculumRecord, String> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.curriculum.updated_on</code>.
     */
    public final TableField<CurriculumRecord, OffsetDateTime> UPDATED_ON = createField(DSL.name("updated_on"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    /**
     * The column <code>public.curriculum.updated_by</code>.
     */
    public final TableField<CurriculumRecord, String> UPDATED_BY = createField(DSL.name("updated_by"), SQLDataType.CLOB, this, "");

    private CurriculumTable(Name alias, Table<CurriculumRecord> aliased) {
        this(alias, aliased, null);
    }

    private CurriculumTable(Name alias, Table<CurriculumRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.curriculum</code> table reference
     */
    public CurriculumTable(String alias) {
        this(DSL.name(alias), CURRICULUM);
    }

    /**
     * Create an aliased <code>public.curriculum</code> table reference
     */
    public CurriculumTable(Name alias) {
        this(alias, CURRICULUM);
    }

    /**
     * Create a <code>public.curriculum</code> table reference
     */
    public CurriculumTable() {
        this(DSL.name("curriculum"), null);
    }

    public <O extends Record> CurriculumTable(Table<O> child, ForeignKey<O, CurriculumRecord> key) {
        super(child, key, CURRICULUM);
    }

    @Override
    @Nonnull
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    @Nonnull
    public UniqueKey<CurriculumRecord> getPrimaryKey() {
        return Keys.CURRICULUM_PKEY;
    }

    @Override
    @Nonnull
    public List<UniqueKey<CurriculumRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.CURRICULUM_NAME_I18N_ID_KEY);
    }

    @Override
    @Nonnull
    public List<ForeignKey<CurriculumRecord, ?>> getReferences() {
        return Arrays.asList(Keys.CURRICULUM__FK_CRCU_NAME, Keys.CURRICULUM__FK_CRCU_TAG);
    }

    private transient I18nTable _i18n;
    private transient TagTable _tag;

    public I18nTable i18n() {
        if (_i18n == null)
            _i18n = new I18nTable(this, Keys.CURRICULUM__FK_CRCU_NAME);

        return _i18n;
    }

    public TagTable tag() {
        if (_tag == null)
            _tag = new TagTable(this, Keys.CURRICULUM__FK_CRCU_TAG);

        return _tag;
    }

    @Override
    @Nonnull
    public CurriculumTable as(String alias) {
        return new CurriculumTable(DSL.name(alias), this);
    }

    @Override
    @Nonnull
    public CurriculumTable as(Name alias) {
        return new CurriculumTable(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public CurriculumTable rename(String name) {
        return new CurriculumTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public CurriculumTable rename(Name name) {
        return new CurriculumTable(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    @Nonnull
    public Row8<UUID, SchoolLevelEnum, UUID, UUID, OffsetDateTime, String, OffsetDateTime, String> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
}
