/*
 * This file is generated by jOOQ.
 */
package unid.jooqMono.model.tables;


import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import javax.annotation.Nonnull;
import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row11;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import unid.jooqMono.model.Keys;
import unid.jooqMono.model.Public;
import unid.jooqMono.model.tables.records.StudentQuestionnaireRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.15.12"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class StudentQuestionnaireTable extends TableImpl<StudentQuestionnaireRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.student_questionnaire</code>
     */
    public static final StudentQuestionnaireTable STUDENT_QUESTIONNAIRE = new StudentQuestionnaireTable();

    /**
     * The class holding records for this type
     */
    @Override
    @Nonnull
    public Class<StudentQuestionnaireRecord> getRecordType() {
        return StudentQuestionnaireRecord.class;
    }

    /**
     * The column <code>public.student_questionnaire.id</code>.
     */
    public final TableField<StudentQuestionnaireRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field("gen_random_uuid()", SQLDataType.UUID)), this, "");

    /**
     * The column <code>public.student_questionnaire.version</code>.
     */
    public final TableField<StudentQuestionnaireRecord, OffsetDateTime> VERSION = createField(DSL.name("version"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field("now()", SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    /**
     * The column <code>public.student_questionnaire.title_i18n_id</code>.
     */
    public final TableField<StudentQuestionnaireRecord, UUID> TITLE_I18N_ID = createField(DSL.name("title_i18n_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.student_questionnaire.sub_title_i18n_id</code>.
     */
    public final TableField<StudentQuestionnaireRecord, UUID> SUB_TITLE_I18N_ID = createField(DSL.name("sub_title_i18n_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.student_questionnaire.description_i18n_id</code>.
     */
    public final TableField<StudentQuestionnaireRecord, UUID> DESCRIPTION_I18N_ID = createField(DSL.name("description_i18n_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.student_questionnaire.sections</code>.
     */
    public final TableField<StudentQuestionnaireRecord, String[]> SECTIONS = createField(DSL.name("sections"), SQLDataType.CLOB.getArrayDataType(), this, "");

    /**
     * The column
     * <code>public.student_questionnaire.mandatory_on_new_join_student</code>.
     */
    public final TableField<StudentQuestionnaireRecord, Boolean> MANDATORY_ON_NEW_JOIN_STUDENT = createField(DSL.name("mandatory_on_new_join_student"), SQLDataType.BOOLEAN.defaultValue(DSL.field("false", SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.student_questionnaire.created_on</code>.
     */
    public final TableField<StudentQuestionnaireRecord, OffsetDateTime> CREATED_ON = createField(DSL.name("created_on"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    /**
     * The column <code>public.student_questionnaire.created_by</code>.
     */
    public final TableField<StudentQuestionnaireRecord, String> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.student_questionnaire.updated_on</code>.
     */
    public final TableField<StudentQuestionnaireRecord, OffsetDateTime> UPDATED_ON = createField(DSL.name("updated_on"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    /**
     * The column <code>public.student_questionnaire.updated_by</code>.
     */
    public final TableField<StudentQuestionnaireRecord, String> UPDATED_BY = createField(DSL.name("updated_by"), SQLDataType.CLOB, this, "");

    private StudentQuestionnaireTable(Name alias, Table<StudentQuestionnaireRecord> aliased) {
        this(alias, aliased, null);
    }

    private StudentQuestionnaireTable(Name alias, Table<StudentQuestionnaireRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.student_questionnaire</code> table
     * reference
     */
    public StudentQuestionnaireTable(String alias) {
        this(DSL.name(alias), STUDENT_QUESTIONNAIRE);
    }

    /**
     * Create an aliased <code>public.student_questionnaire</code> table
     * reference
     */
    public StudentQuestionnaireTable(Name alias) {
        this(alias, STUDENT_QUESTIONNAIRE);
    }

    /**
     * Create a <code>public.student_questionnaire</code> table reference
     */
    public StudentQuestionnaireTable() {
        this(DSL.name("student_questionnaire"), null);
    }

    public <O extends Record> StudentQuestionnaireTable(Table<O> child, ForeignKey<O, StudentQuestionnaireRecord> key) {
        super(child, key, STUDENT_QUESTIONNAIRE);
    }

    @Override
    @Nonnull
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    @Nonnull
    public UniqueKey<StudentQuestionnaireRecord> getPrimaryKey() {
        return Keys.STUDENT_QUESTIONNAIRE_PKEY;
    }

    @Override
    @Nonnull
    public List<UniqueKey<StudentQuestionnaireRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.STUDENT_QUESTIONNAIRE_TITLE_I18N_ID_KEY, Keys.STUDENT_QUESTIONNAIRE_SUB_TITLE_I18N_ID_KEY, Keys.STUDENT_QUESTIONNAIRE_DESCRIPTION_I18N_ID_KEY);
    }

    @Override
    @Nonnull
    public List<ForeignKey<StudentQuestionnaireRecord, ?>> getReferences() {
        return Arrays.asList(Keys.STUDENT_QUESTIONNAIRE__FK_STU_QUET_TITL, Keys.STUDENT_QUESTIONNAIRE__FK_STU_QUET_SUB_TITL, Keys.STUDENT_QUESTIONNAIRE__FK_STU_QUET_DESC);
    }

    private transient I18nTable _fkStuQuetTitl;
    private transient I18nTable _fkStuQuetSubTitl;
    private transient I18nTable _fkStuQuetDesc;

    public I18nTable fkStuQuetTitl() {
        if (_fkStuQuetTitl == null)
            _fkStuQuetTitl = new I18nTable(this, Keys.STUDENT_QUESTIONNAIRE__FK_STU_QUET_TITL);

        return _fkStuQuetTitl;
    }

    public I18nTable fkStuQuetSubTitl() {
        if (_fkStuQuetSubTitl == null)
            _fkStuQuetSubTitl = new I18nTable(this, Keys.STUDENT_QUESTIONNAIRE__FK_STU_QUET_SUB_TITL);

        return _fkStuQuetSubTitl;
    }

    public I18nTable fkStuQuetDesc() {
        if (_fkStuQuetDesc == null)
            _fkStuQuetDesc = new I18nTable(this, Keys.STUDENT_QUESTIONNAIRE__FK_STU_QUET_DESC);

        return _fkStuQuetDesc;
    }

    @Override
    @Nonnull
    public StudentQuestionnaireTable as(String alias) {
        return new StudentQuestionnaireTable(DSL.name(alias), this);
    }

    @Override
    @Nonnull
    public StudentQuestionnaireTable as(Name alias) {
        return new StudentQuestionnaireTable(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public StudentQuestionnaireTable rename(String name) {
        return new StudentQuestionnaireTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public StudentQuestionnaireTable rename(Name name) {
        return new StudentQuestionnaireTable(name, null);
    }

    // -------------------------------------------------------------------------
    // Row11 type methods
    // -------------------------------------------------------------------------

    @Override
    @Nonnull
    public Row11<UUID, OffsetDateTime, UUID, UUID, UUID, String[], Boolean, OffsetDateTime, String, OffsetDateTime, String> fieldsRow() {
        return (Row11) super.fieldsRow();
    }
}
