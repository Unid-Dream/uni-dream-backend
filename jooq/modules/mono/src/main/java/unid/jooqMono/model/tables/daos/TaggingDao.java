/*
 * This file is generated by jOOQ.
 */
package unid.jooqMono.model.tables.daos;


import java.time.OffsetDateTime;
import java.util.List;
import java.util.UUID;

import javax.annotation.Nonnull;
import javax.annotation.Nullable;
import javax.annotation.processing.Generated;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;

import unid.jooqMono.model.enums.TagTargetEnum;
import unid.jooqMono.model.tables.TaggingTable;
import unid.jooqMono.model.tables.pojos.TaggingPojo;
import unid.jooqMono.model.tables.records.TaggingRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.15.12"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TaggingDao extends DAOImpl<TaggingRecord, TaggingPojo, UUID> {

    /**
     * Create a new TaggingDao without any configuration
     */
    public TaggingDao() {
        super(TaggingTable.TAGGING, TaggingPojo.class);
    }

    /**
     * Create a new TaggingDao with an attached configuration
     */
    public TaggingDao(Configuration configuration) {
        super(TaggingTable.TAGGING, TaggingPojo.class, configuration);
    }

    @Override
    @Nonnull
    public UUID getId(TaggingPojo object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<TaggingPojo> fetchRangeOfId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(TaggingTable.TAGGING.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    @Nonnull
    public List<TaggingPojo> fetchById(UUID... values) {
        return fetch(TaggingTable.TAGGING.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    @Nullable
    public TaggingPojo fetchOneById(UUID value) {
        return fetchOne(TaggingTable.TAGGING.ID, value);
    }

    /**
     * Fetch records that have <code>target BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<TaggingPojo> fetchRangeOfTarget(TagTargetEnum lowerInclusive, TagTargetEnum upperInclusive) {
        return fetchRange(TaggingTable.TAGGING.TARGET, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>target IN (values)</code>
     */
    @Nonnull
    public List<TaggingPojo> fetchByTarget(TagTargetEnum... values) {
        return fetch(TaggingTable.TAGGING.TARGET, values);
    }

    /**
     * Fetch records that have <code>target_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<TaggingPojo> fetchRangeOfTargetId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(TaggingTable.TAGGING.TARGET_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>target_id IN (values)</code>
     */
    @Nonnull
    public List<TaggingPojo> fetchByTargetId(UUID... values) {
        return fetch(TaggingTable.TAGGING.TARGET_ID, values);
    }

    /**
     * Fetch records that have <code>tag_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<TaggingPojo> fetchRangeOfTagId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(TaggingTable.TAGGING.TAG_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>tag_id IN (values)</code>
     */
    @Nonnull
    public List<TaggingPojo> fetchByTagId(UUID... values) {
        return fetch(TaggingTable.TAGGING.TAG_ID, values);
    }

    /**
     * Fetch records that have <code>created_on BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<TaggingPojo> fetchRangeOfCreatedOn(OffsetDateTime lowerInclusive, OffsetDateTime upperInclusive) {
        return fetchRange(TaggingTable.TAGGING.CREATED_ON, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>created_on IN (values)</code>
     */
    @Nonnull
    public List<TaggingPojo> fetchByCreatedOn(OffsetDateTime... values) {
        return fetch(TaggingTable.TAGGING.CREATED_ON, values);
    }

    /**
     * Fetch records that have <code>created_by BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<TaggingPojo> fetchRangeOfCreatedBy(String lowerInclusive, String upperInclusive) {
        return fetchRange(TaggingTable.TAGGING.CREATED_BY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>created_by IN (values)</code>
     */
    @Nonnull
    public List<TaggingPojo> fetchByCreatedBy(String... values) {
        return fetch(TaggingTable.TAGGING.CREATED_BY, values);
    }

    /**
     * Fetch records that have <code>updated_on BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<TaggingPojo> fetchRangeOfUpdatedOn(OffsetDateTime lowerInclusive, OffsetDateTime upperInclusive) {
        return fetchRange(TaggingTable.TAGGING.UPDATED_ON, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>updated_on IN (values)</code>
     */
    @Nonnull
    public List<TaggingPojo> fetchByUpdatedOn(OffsetDateTime... values) {
        return fetch(TaggingTable.TAGGING.UPDATED_ON, values);
    }

    /**
     * Fetch records that have <code>updated_by BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<TaggingPojo> fetchRangeOfUpdatedBy(String lowerInclusive, String upperInclusive) {
        return fetchRange(TaggingTable.TAGGING.UPDATED_BY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>updated_by IN (values)</code>
     */
    @Nonnull
    public List<TaggingPojo> fetchByUpdatedBy(String... values) {
        return fetch(TaggingTable.TAGGING.UPDATED_BY, values);
    }
}
