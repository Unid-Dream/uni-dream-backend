/*
 * This file is generated by jOOQ.
 */
package unid.jooqMono.model.tables;


import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import javax.annotation.Nonnull;
import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import unid.jooqMono.model.Keys;
import unid.jooqMono.model.Public;
import unid.jooqMono.model.tables.records.AcademicMajorRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.15.12"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AcademicMajorTable extends TableImpl<AcademicMajorRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.academic_major</code>
     */
    public static final AcademicMajorTable ACADEMIC_MAJOR = new AcademicMajorTable();

    /**
     * The class holding records for this type
     */
    @Override
    @Nonnull
    public Class<AcademicMajorRecord> getRecordType() {
        return AcademicMajorRecord.class;
    }

    /**
     * The column <code>public.academic_major.id</code>.
     */
    public final TableField<AcademicMajorRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field("gen_random_uuid()", SQLDataType.UUID)), this, "");

    /**
     * The column <code>public.academic_major.title_i18n_id</code>.
     */
    public final TableField<AcademicMajorRecord, UUID> TITLE_I18N_ID = createField(DSL.name("title_i18n_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.academic_major.description_i18n_id</code>.
     */
    public final TableField<AcademicMajorRecord, UUID> DESCRIPTION_I18N_ID = createField(DSL.name("description_i18n_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.academic_major.tag_id</code>.
     */
    public final TableField<AcademicMajorRecord, UUID> TAG_ID = createField(DSL.name("tag_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.academic_major.created_on</code>.
     */
    public final TableField<AcademicMajorRecord, OffsetDateTime> CREATED_ON = createField(DSL.name("created_on"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    /**
     * The column <code>public.academic_major.created_by</code>.
     */
    public final TableField<AcademicMajorRecord, String> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.academic_major.updated_on</code>.
     */
    public final TableField<AcademicMajorRecord, OffsetDateTime> UPDATED_ON = createField(DSL.name("updated_on"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    /**
     * The column <code>public.academic_major.updated_by</code>.
     */
    public final TableField<AcademicMajorRecord, String> UPDATED_BY = createField(DSL.name("updated_by"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.academic_major.icon_path</code>.
     */
    public final TableField<AcademicMajorRecord, String> ICON_PATH = createField(DSL.name("icon_path"), SQLDataType.VARCHAR(225), this, "");

    private AcademicMajorTable(Name alias, Table<AcademicMajorRecord> aliased) {
        this(alias, aliased, null);
    }

    private AcademicMajorTable(Name alias, Table<AcademicMajorRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.academic_major</code> table reference
     */
    public AcademicMajorTable(String alias) {
        this(DSL.name(alias), ACADEMIC_MAJOR);
    }

    /**
     * Create an aliased <code>public.academic_major</code> table reference
     */
    public AcademicMajorTable(Name alias) {
        this(alias, ACADEMIC_MAJOR);
    }

    /**
     * Create a <code>public.academic_major</code> table reference
     */
    public AcademicMajorTable() {
        this(DSL.name("academic_major"), null);
    }

    public <O extends Record> AcademicMajorTable(Table<O> child, ForeignKey<O, AcademicMajorRecord> key) {
        super(child, key, ACADEMIC_MAJOR);
    }

    @Override
    @Nonnull
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    @Nonnull
    public UniqueKey<AcademicMajorRecord> getPrimaryKey() {
        return Keys.ACADEMIC_MAJOR_PKEY;
    }

    @Override
    @Nonnull
    public List<UniqueKey<AcademicMajorRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.ACADEMIC_MAJOR_TITLE_I18N_ID_KEY, Keys.ACADEMIC_MAJOR_DESCRIPTION_I18N_ID_KEY);
    }

    @Override
    @Nonnull
    public List<ForeignKey<AcademicMajorRecord, ?>> getReferences() {
        return Arrays.asList(Keys.ACADEMIC_MAJOR__FK_ACAD_MAJ_TITL, Keys.ACADEMIC_MAJOR__FK_ACAD_MAJ_DESC, Keys.ACADEMIC_MAJOR__FK_ACAD_MAJ_TAG);
    }

    private transient I18nTable _fkAcadMajTitl;
    private transient I18nTable _fkAcadMajDesc;
    private transient TagTable _tag;

    public I18nTable fkAcadMajTitl() {
        if (_fkAcadMajTitl == null)
            _fkAcadMajTitl = new I18nTable(this, Keys.ACADEMIC_MAJOR__FK_ACAD_MAJ_TITL);

        return _fkAcadMajTitl;
    }

    public I18nTable fkAcadMajDesc() {
        if (_fkAcadMajDesc == null)
            _fkAcadMajDesc = new I18nTable(this, Keys.ACADEMIC_MAJOR__FK_ACAD_MAJ_DESC);

        return _fkAcadMajDesc;
    }

    public TagTable tag() {
        if (_tag == null)
            _tag = new TagTable(this, Keys.ACADEMIC_MAJOR__FK_ACAD_MAJ_TAG);

        return _tag;
    }

    @Override
    @Nonnull
    public AcademicMajorTable as(String alias) {
        return new AcademicMajorTable(DSL.name(alias), this);
    }

    @Override
    @Nonnull
    public AcademicMajorTable as(Name alias) {
        return new AcademicMajorTable(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public AcademicMajorTable rename(String name) {
        return new AcademicMajorTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public AcademicMajorTable rename(Name name) {
        return new AcademicMajorTable(name, null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    @Nonnull
    public Row9<UUID, UUID, UUID, UUID, OffsetDateTime, String, OffsetDateTime, String, String> fieldsRow() {
        return (Row9) super.fieldsRow();
    }
}
