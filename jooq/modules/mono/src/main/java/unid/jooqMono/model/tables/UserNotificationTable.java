/*
 * This file is generated by jOOQ.
 */
package unid.jooqMono.model.tables;


import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import javax.annotation.Nonnull;
import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import unid.jooqMono.model.Keys;
import unid.jooqMono.model.Public;
import unid.jooqMono.model.enums.UserNotificationTypeEnum;
import unid.jooqMono.model.tables.records.UserNotificationRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.15.12"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserNotificationTable extends TableImpl<UserNotificationRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.user_notification</code>
     */
    public static final UserNotificationTable USER_NOTIFICATION = new UserNotificationTable();

    /**
     * The class holding records for this type
     */
    @Override
    @Nonnull
    public Class<UserNotificationRecord> getRecordType() {
        return UserNotificationRecord.class;
    }

    /**
     * The column <code>public.user_notification.id</code>.
     */
    public final TableField<UserNotificationRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field("gen_random_uuid()", SQLDataType.UUID)), this, "");

    /**
     * The column <code>public.user_notification.owner_user_id</code>.
     */
    public final TableField<UserNotificationRecord, UUID> OWNER_USER_ID = createField(DSL.name("owner_user_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.user_notification.notification_type</code>.
     */
    public final TableField<UserNotificationRecord, UserNotificationTypeEnum> NOTIFICATION_TYPE = createField(DSL.name("notification_type"), SQLDataType.VARCHAR.nullable(false).asEnumDataType(unid.jooqMono.model.enums.UserNotificationTypeEnum.class), this, "");

    /**
     * The column <code>public.user_notification.notification_ref_id</code>.
     */
    public final TableField<UserNotificationRecord, UUID> NOTIFICATION_REF_ID = createField(DSL.name("notification_ref_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.user_notification.read</code>.
     */
    public final TableField<UserNotificationRecord, Boolean> READ = createField(DSL.name("read"), SQLDataType.BOOLEAN.defaultValue(DSL.field("false", SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.user_notification.created_on</code>.
     */
    public final TableField<UserNotificationRecord, OffsetDateTime> CREATED_ON = createField(DSL.name("created_on"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    /**
     * The column <code>public.user_notification.created_by</code>.
     */
    public final TableField<UserNotificationRecord, String> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.user_notification.updated_on</code>.
     */
    public final TableField<UserNotificationRecord, OffsetDateTime> UPDATED_ON = createField(DSL.name("updated_on"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    /**
     * The column <code>public.user_notification.updated_by</code>.
     */
    public final TableField<UserNotificationRecord, String> UPDATED_BY = createField(DSL.name("updated_by"), SQLDataType.CLOB, this, "");

    private UserNotificationTable(Name alias, Table<UserNotificationRecord> aliased) {
        this(alias, aliased, null);
    }

    private UserNotificationTable(Name alias, Table<UserNotificationRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.user_notification</code> table reference
     */
    public UserNotificationTable(String alias) {
        this(DSL.name(alias), USER_NOTIFICATION);
    }

    /**
     * Create an aliased <code>public.user_notification</code> table reference
     */
    public UserNotificationTable(Name alias) {
        this(alias, USER_NOTIFICATION);
    }

    /**
     * Create a <code>public.user_notification</code> table reference
     */
    public UserNotificationTable() {
        this(DSL.name("user_notification"), null);
    }

    public <O extends Record> UserNotificationTable(Table<O> child, ForeignKey<O, UserNotificationRecord> key) {
        super(child, key, USER_NOTIFICATION);
    }

    @Override
    @Nonnull
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    @Nonnull
    public UniqueKey<UserNotificationRecord> getPrimaryKey() {
        return Keys.USER_NOTIFICATION_PKEY;
    }

    @Override
    @Nonnull
    public List<ForeignKey<UserNotificationRecord, ?>> getReferences() {
        return Arrays.asList(Keys.USER_NOTIFICATION__FK_USER_NOTI_OWN_USER);
    }

    private transient UserTable _user;

    public UserTable user() {
        if (_user == null)
            _user = new UserTable(this, Keys.USER_NOTIFICATION__FK_USER_NOTI_OWN_USER);

        return _user;
    }

    @Override
    @Nonnull
    public UserNotificationTable as(String alias) {
        return new UserNotificationTable(DSL.name(alias), this);
    }

    @Override
    @Nonnull
    public UserNotificationTable as(Name alias) {
        return new UserNotificationTable(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public UserNotificationTable rename(String name) {
        return new UserNotificationTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public UserNotificationTable rename(Name name) {
        return new UserNotificationTable(name, null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    @Nonnull
    public Row9<UUID, UUID, UserNotificationTypeEnum, UUID, Boolean, OffsetDateTime, String, OffsetDateTime, String> fieldsRow() {
        return (Row9) super.fieldsRow();
    }
}
