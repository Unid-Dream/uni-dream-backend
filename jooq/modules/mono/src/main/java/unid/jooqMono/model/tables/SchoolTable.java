/*
 * This file is generated by jOOQ.
 */
package unid.jooqMono.model.tables;


import java.math.BigDecimal;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import javax.annotation.Nonnull;
import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row18;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import unid.jooqMono.model.Keys;
import unid.jooqMono.model.Public;
import unid.jooqMono.model.enums.SchoolLevelEnum;
import unid.jooqMono.model.tables.records.SchoolRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.15.12"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SchoolTable extends TableImpl<SchoolRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.school</code>
     */
    public static final SchoolTable SCHOOL = new SchoolTable();

    /**
     * The class holding records for this type
     */
    @Override
    @Nonnull
    public Class<SchoolRecord> getRecordType() {
        return SchoolRecord.class;
    }

    /**
     * The column <code>public.school.id</code>.
     */
    public final TableField<SchoolRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field("gen_random_uuid()", SQLDataType.UUID)), this, "");

    /**
     * The column <code>public.school.school_level</code>.
     */
    public final TableField<SchoolRecord, SchoolLevelEnum> SCHOOL_LEVEL = createField(DSL.name("school_level"), SQLDataType.VARCHAR.asEnumDataType(unid.jooqMono.model.enums.SchoolLevelEnum.class), this, "");

    /**
     * The column <code>public.school.name_i18n_id</code>.
     */
    public final TableField<SchoolRecord, UUID> NAME_I18N_ID = createField(DSL.name("name_i18n_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.school.country_id</code>.
     */
    public final TableField<SchoolRecord, UUID> COUNTRY_ID = createField(DSL.name("country_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.school.city_id</code>.
     */
    public final TableField<SchoolRecord, UUID> CITY_ID = createField(DSL.name("city_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.school.longitude</code>.
     */
    public final TableField<SchoolRecord, String> LONGITUDE = createField(DSL.name("longitude"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.school.latitude</code>.
     */
    public final TableField<SchoolRecord, String> LATITUDE = createField(DSL.name("latitude"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.school.detailed_address_i18n_id</code>.
     */
    public final TableField<SchoolRecord, UUID> DETAILED_ADDRESS_I18N_ID = createField(DSL.name("detailed_address_i18n_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.school.tag_id</code>.
     */
    public final TableField<SchoolRecord, UUID> TAG_ID = createField(DSL.name("tag_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.school.created_on</code>.
     */
    public final TableField<SchoolRecord, OffsetDateTime> CREATED_ON = createField(DSL.name("created_on"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    /**
     * The column <code>public.school.created_by</code>.
     */
    public final TableField<SchoolRecord, String> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.school.updated_on</code>.
     */
    public final TableField<SchoolRecord, OffsetDateTime> UPDATED_ON = createField(DSL.name("updated_on"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    /**
     * The column <code>public.school.updated_by</code>.
     */
    public final TableField<SchoolRecord, String> UPDATED_BY = createField(DSL.name("updated_by"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.school.rate</code>.
     */
    public final TableField<SchoolRecord, BigDecimal> RATE = createField(DSL.name("rate"), SQLDataType.NUMERIC, this, "");

    /**
     * The column <code>public.school.population</code>.
     */
    public final TableField<SchoolRecord, BigDecimal> POPULATION = createField(DSL.name("population"), SQLDataType.NUMERIC, this, "");

    /**
     * The column <code>public.school.tuition</code>.
     */
    public final TableField<SchoolRecord, BigDecimal> TUITION = createField(DSL.name("tuition"), SQLDataType.NUMERIC, this, "");

    /**
     * The column <code>public.school.factor</code>.
     */
    public final TableField<SchoolRecord, String> FACTOR = createField(DSL.name("factor"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.school.description</code>.
     */
    public final TableField<SchoolRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.CLOB, this, "");

    private SchoolTable(Name alias, Table<SchoolRecord> aliased) {
        this(alias, aliased, null);
    }

    private SchoolTable(Name alias, Table<SchoolRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.school</code> table reference
     */
    public SchoolTable(String alias) {
        this(DSL.name(alias), SCHOOL);
    }

    /**
     * Create an aliased <code>public.school</code> table reference
     */
    public SchoolTable(Name alias) {
        this(alias, SCHOOL);
    }

    /**
     * Create a <code>public.school</code> table reference
     */
    public SchoolTable() {
        this(DSL.name("school"), null);
    }

    public <O extends Record> SchoolTable(Table<O> child, ForeignKey<O, SchoolRecord> key) {
        super(child, key, SCHOOL);
    }

    @Override
    @Nonnull
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    @Nonnull
    public UniqueKey<SchoolRecord> getPrimaryKey() {
        return Keys.SCHOOL_PKEY;
    }

    @Override
    @Nonnull
    public List<UniqueKey<SchoolRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.SCHOOL_NAME_I18N_ID_KEY);
    }

    @Override
    @Nonnull
    public List<ForeignKey<SchoolRecord, ?>> getReferences() {
        return Arrays.asList(Keys.SCHOOL__FK_SCHL_NAME, Keys.SCHOOL__FK_SCHL_COUT, Keys.SCHOOL__FK_SCHL_CITY, Keys.SCHOOL__FK_SCHL_ADDR, Keys.SCHOOL__FK_SCHL_TAG);
    }

    private transient I18nTable _fkSchlName;
    private transient CountryTable _country;
    private transient CityTable _city;
    private transient I18nTable _fkSchlAddr;
    private transient TagTable _tag;

    public I18nTable fkSchlName() {
        if (_fkSchlName == null)
            _fkSchlName = new I18nTable(this, Keys.SCHOOL__FK_SCHL_NAME);

        return _fkSchlName;
    }

    public CountryTable country() {
        if (_country == null)
            _country = new CountryTable(this, Keys.SCHOOL__FK_SCHL_COUT);

        return _country;
    }

    public CityTable city() {
        if (_city == null)
            _city = new CityTable(this, Keys.SCHOOL__FK_SCHL_CITY);

        return _city;
    }

    public I18nTable fkSchlAddr() {
        if (_fkSchlAddr == null)
            _fkSchlAddr = new I18nTable(this, Keys.SCHOOL__FK_SCHL_ADDR);

        return _fkSchlAddr;
    }

    public TagTable tag() {
        if (_tag == null)
            _tag = new TagTable(this, Keys.SCHOOL__FK_SCHL_TAG);

        return _tag;
    }

    @Override
    @Nonnull
    public SchoolTable as(String alias) {
        return new SchoolTable(DSL.name(alias), this);
    }

    @Override
    @Nonnull
    public SchoolTable as(Name alias) {
        return new SchoolTable(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public SchoolTable rename(String name) {
        return new SchoolTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public SchoolTable rename(Name name) {
        return new SchoolTable(name, null);
    }

    // -------------------------------------------------------------------------
    // Row18 type methods
    // -------------------------------------------------------------------------

    @Override
    @Nonnull
    public Row18<UUID, SchoolLevelEnum, UUID, UUID, UUID, String, String, UUID, UUID, OffsetDateTime, String, OffsetDateTime, String, BigDecimal, BigDecimal, BigDecimal, String, String> fieldsRow() {
        return (Row18) super.fieldsRow();
    }
}
