/*
 * This file is generated by jOOQ.
 */
package unid.jooqMono.model.tables;


import java.time.OffsetDateTime;
import java.util.UUID;

import javax.annotation.Nonnull;
import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row18;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import unid.jooqMono.model.Public;
import unid.jooqMono.model.tables.records._AuditLogEcaCourseRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.15.12"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class _AuditLogEcaCourseTable extends TableImpl<_AuditLogEcaCourseRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public._audit_log_eca_course</code>
     */
    public static final _AuditLogEcaCourseTable _AUDIT_LOG_ECA_COURSE = new _AuditLogEcaCourseTable();

    /**
     * The class holding records for this type
     */
    @Override
    @Nonnull
    public Class<_AuditLogEcaCourseRecord> getRecordType() {
        return _AuditLogEcaCourseRecord.class;
    }

    /**
     * The column <code>public._audit_log_eca_course.audit_seq</code>.
     */
    public final TableField<_AuditLogEcaCourseRecord, Long> AUDIT_SEQ = createField(DSL.name("audit_seq"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public._audit_log_eca_course.audit_createdon</code>.
     */
    public final TableField<_AuditLogEcaCourseRecord, OffsetDateTime> AUDIT_CREATEDON = createField(DSL.name("audit_createdon"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    /**
     * The column <code>public._audit_log_eca_course.audit_createdby</code>.
     */
    public final TableField<_AuditLogEcaCourseRecord, String> AUDIT_CREATEDBY = createField(DSL.name("audit_createdby"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public._audit_log_eca_course.audit_operation</code>.
     */
    public final TableField<_AuditLogEcaCourseRecord, String> AUDIT_OPERATION = createField(DSL.name("audit_operation"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public._audit_log_eca_course.audit_type</code>.
     */
    public final TableField<_AuditLogEcaCourseRecord, String> AUDIT_TYPE = createField(DSL.name("audit_type"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public._audit_log_eca_course.id</code>.
     */
    public final TableField<_AuditLogEcaCourseRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public._audit_log_eca_course.title_i18n_id</code>.
     */
    public final TableField<_AuditLogEcaCourseRecord, UUID> TITLE_I18N_ID = createField(DSL.name("title_i18n_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public._audit_log_eca_course.description_i18n_id</code>.
     */
    public final TableField<_AuditLogEcaCourseRecord, UUID> DESCRIPTION_I18N_ID = createField(DSL.name("description_i18n_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public._audit_log_eca_course.eligibility_i18n_id</code>.
     */
    public final TableField<_AuditLogEcaCourseRecord, UUID> ELIGIBILITY_I18N_ID = createField(DSL.name("eligibility_i18n_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public._audit_log_eca_course.created_on</code>.
     */
    public final TableField<_AuditLogEcaCourseRecord, OffsetDateTime> CREATED_ON = createField(DSL.name("created_on"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    /**
     * The column <code>public._audit_log_eca_course.created_by</code>.
     */
    public final TableField<_AuditLogEcaCourseRecord, String> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public._audit_log_eca_course.updated_on</code>.
     */
    public final TableField<_AuditLogEcaCourseRecord, OffsetDateTime> UPDATED_ON = createField(DSL.name("updated_on"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    /**
     * The column <code>public._audit_log_eca_course.updated_by</code>.
     */
    public final TableField<_AuditLogEcaCourseRecord, String> UPDATED_BY = createField(DSL.name("updated_by"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public._audit_log_eca_course.ref_url</code>.
     */
    public final TableField<_AuditLogEcaCourseRecord, String> REF_URL = createField(DSL.name("ref_url"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public._audit_log_eca_course.cover_image</code>.
     */
    public final TableField<_AuditLogEcaCourseRecord, String> COVER_IMAGE = createField(DSL.name("cover_image"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public._audit_log_eca_course.academic_id</code>.
     */
    public final TableField<_AuditLogEcaCourseRecord, UUID[]> ACADEMIC_ID = createField(DSL.name("academic_id"), SQLDataType.UUID.getArrayDataType(), this, "");

    /**
     * The column <code>public._audit_log_eca_course.opportunity_id</code>.
     */
    public final TableField<_AuditLogEcaCourseRecord, UUID[]> OPPORTUNITY_ID = createField(DSL.name("opportunity_id"), SQLDataType.UUID.getArrayDataType(), this, "");

    /**
     * The column <code>public._audit_log_eca_course.grade</code>.
     */
    public final TableField<_AuditLogEcaCourseRecord, Integer[]> GRADE = createField(DSL.name("grade"), SQLDataType.INTEGER.getArrayDataType(), this, "");

    private _AuditLogEcaCourseTable(Name alias, Table<_AuditLogEcaCourseRecord> aliased) {
        this(alias, aliased, null);
    }

    private _AuditLogEcaCourseTable(Name alias, Table<_AuditLogEcaCourseRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public._audit_log_eca_course</code> table
     * reference
     */
    public _AuditLogEcaCourseTable(String alias) {
        this(DSL.name(alias), _AUDIT_LOG_ECA_COURSE);
    }

    /**
     * Create an aliased <code>public._audit_log_eca_course</code> table
     * reference
     */
    public _AuditLogEcaCourseTable(Name alias) {
        this(alias, _AUDIT_LOG_ECA_COURSE);
    }

    /**
     * Create a <code>public._audit_log_eca_course</code> table reference
     */
    public _AuditLogEcaCourseTable() {
        this(DSL.name("_audit_log_eca_course"), null);
    }

    public <O extends Record> _AuditLogEcaCourseTable(Table<O> child, ForeignKey<O, _AuditLogEcaCourseRecord> key) {
        super(child, key, _AUDIT_LOG_ECA_COURSE);
    }

    @Override
    @Nonnull
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    @Nonnull
    public Identity<_AuditLogEcaCourseRecord, Long> getIdentity() {
        return (Identity<_AuditLogEcaCourseRecord, Long>) super.getIdentity();
    }

    @Override
    @Nonnull
    public _AuditLogEcaCourseTable as(String alias) {
        return new _AuditLogEcaCourseTable(DSL.name(alias), this);
    }

    @Override
    @Nonnull
    public _AuditLogEcaCourseTable as(Name alias) {
        return new _AuditLogEcaCourseTable(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public _AuditLogEcaCourseTable rename(String name) {
        return new _AuditLogEcaCourseTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public _AuditLogEcaCourseTable rename(Name name) {
        return new _AuditLogEcaCourseTable(name, null);
    }

    // -------------------------------------------------------------------------
    // Row18 type methods
    // -------------------------------------------------------------------------

    @Override
    @Nonnull
    public Row18<Long, OffsetDateTime, String, String, String, UUID, UUID, UUID, UUID, OffsetDateTime, String, OffsetDateTime, String, String, String, UUID[], UUID[], Integer[]> fieldsRow() {
        return (Row18) super.fieldsRow();
    }
}
