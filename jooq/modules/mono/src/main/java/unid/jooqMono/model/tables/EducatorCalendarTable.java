/*
 * This file is generated by jOOQ.
 */
package unid.jooqMono.model.tables;


import java.time.LocalDate;
import java.time.LocalTime;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import javax.annotation.Nonnull;
import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row15;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import unid.jooqMono.model.Keys;
import unid.jooqMono.model.Public;
import unid.jooqMono.model.enums.BookingStatusEnum;
import unid.jooqMono.model.tables.records.EducatorCalendarRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.15.12"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class EducatorCalendarTable extends TableImpl<EducatorCalendarRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.educator_calendar</code>
     */
    public static final EducatorCalendarTable EDUCATOR_CALENDAR = new EducatorCalendarTable();

    /**
     * The class holding records for this type
     */
    @Override
    @Nonnull
    public Class<EducatorCalendarRecord> getRecordType() {
        return EducatorCalendarRecord.class;
    }

    /**
     * The column <code>public.educator_calendar.id</code>.
     */
    public final TableField<EducatorCalendarRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field("gen_random_uuid()", SQLDataType.UUID)), this, "");

    /**
     * The column <code>public.educator_calendar.educator_profile_id</code>.
     */
    public final TableField<EducatorCalendarRecord, UUID> EDUCATOR_PROFILE_ID = createField(DSL.name("educator_profile_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.educator_calendar.date</code>.
     */
    public final TableField<EducatorCalendarRecord, LocalDate> DATE = createField(DSL.name("date"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>public.educator_calendar.hour_start</code>.
     */
    public final TableField<EducatorCalendarRecord, LocalTime> HOUR_START = createField(DSL.name("hour_start"), SQLDataType.LOCALTIME(6), this, "");

    /**
     * The column <code>public.educator_calendar.hour_end</code>.
     */
    public final TableField<EducatorCalendarRecord, LocalTime> HOUR_END = createField(DSL.name("hour_end"), SQLDataType.LOCALTIME(6), this, "");

    /**
     * The column <code>public.educator_calendar.booking_status</code>.
     */
    public final TableField<EducatorCalendarRecord, BookingStatusEnum> BOOKING_STATUS = createField(DSL.name("booking_status"), SQLDataType.VARCHAR.defaultValue(DSL.field("'AVAILABLE'::booking_status", SQLDataType.VARCHAR)).asEnumDataType(unid.jooqMono.model.enums.BookingStatusEnum.class), this, "");

    /**
     * The column <code>public.educator_calendar.payment_transaction_id</code>.
     */
    public final TableField<EducatorCalendarRecord, UUID> PAYMENT_TRANSACTION_ID = createField(DSL.name("payment_transaction_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.educator_calendar.meeting_url</code>.
     */
    public final TableField<EducatorCalendarRecord, String> MEETING_URL = createField(DSL.name("meeting_url"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.educator_calendar.meeting_id</code>.
     */
    public final TableField<EducatorCalendarRecord, String> MEETING_ID = createField(DSL.name("meeting_id"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.educator_calendar.created_on</code>.
     */
    public final TableField<EducatorCalendarRecord, OffsetDateTime> CREATED_ON = createField(DSL.name("created_on"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    /**
     * The column <code>public.educator_calendar.created_by</code>.
     */
    public final TableField<EducatorCalendarRecord, String> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.educator_calendar.updated_on</code>.
     */
    public final TableField<EducatorCalendarRecord, OffsetDateTime> UPDATED_ON = createField(DSL.name("updated_on"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    /**
     * The column <code>public.educator_calendar.updated_by</code>.
     */
    public final TableField<EducatorCalendarRecord, String> UPDATED_BY = createField(DSL.name("updated_by"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.educator_calendar.start_time_utc</code>.
     */
    public final TableField<EducatorCalendarRecord, OffsetDateTime> START_TIME_UTC = createField(DSL.name("start_time_utc"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    /**
     * The column <code>public.educator_calendar.end_time_utc</code>.
     */
    public final TableField<EducatorCalendarRecord, OffsetDateTime> END_TIME_UTC = createField(DSL.name("end_time_utc"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    private EducatorCalendarTable(Name alias, Table<EducatorCalendarRecord> aliased) {
        this(alias, aliased, null);
    }

    private EducatorCalendarTable(Name alias, Table<EducatorCalendarRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.educator_calendar</code> table reference
     */
    public EducatorCalendarTable(String alias) {
        this(DSL.name(alias), EDUCATOR_CALENDAR);
    }

    /**
     * Create an aliased <code>public.educator_calendar</code> table reference
     */
    public EducatorCalendarTable(Name alias) {
        this(alias, EDUCATOR_CALENDAR);
    }

    /**
     * Create a <code>public.educator_calendar</code> table reference
     */
    public EducatorCalendarTable() {
        this(DSL.name("educator_calendar"), null);
    }

    public <O extends Record> EducatorCalendarTable(Table<O> child, ForeignKey<O, EducatorCalendarRecord> key) {
        super(child, key, EDUCATOR_CALENDAR);
    }

    @Override
    @Nonnull
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    @Nonnull
    public UniqueKey<EducatorCalendarRecord> getPrimaryKey() {
        return Keys.EDUCATOR_CALENDAR_PKEY;
    }

    @Override
    @Nonnull
    public List<UniqueKey<EducatorCalendarRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.EDUCATOR_CALENDAR_PAYMENT_TRANSACTION_ID_KEY);
    }

    @Override
    @Nonnull
    public List<ForeignKey<EducatorCalendarRecord, ?>> getReferences() {
        return Arrays.asList(Keys.EDUCATOR_CALENDAR__FK_EDUC_CALD_EDUC_PROF, Keys.EDUCATOR_CALENDAR__FK_EDUC_CALD_STUD_TRAN);
    }

    private transient EducatorProfileTable _educatorProfile;
    private transient StudentPaymentTransactionTable _studentPaymentTransaction;

    public EducatorProfileTable educatorProfile() {
        if (_educatorProfile == null)
            _educatorProfile = new EducatorProfileTable(this, Keys.EDUCATOR_CALENDAR__FK_EDUC_CALD_EDUC_PROF);

        return _educatorProfile;
    }

    public StudentPaymentTransactionTable studentPaymentTransaction() {
        if (_studentPaymentTransaction == null)
            _studentPaymentTransaction = new StudentPaymentTransactionTable(this, Keys.EDUCATOR_CALENDAR__FK_EDUC_CALD_STUD_TRAN);

        return _studentPaymentTransaction;
    }

    @Override
    @Nonnull
    public EducatorCalendarTable as(String alias) {
        return new EducatorCalendarTable(DSL.name(alias), this);
    }

    @Override
    @Nonnull
    public EducatorCalendarTable as(Name alias) {
        return new EducatorCalendarTable(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public EducatorCalendarTable rename(String name) {
        return new EducatorCalendarTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public EducatorCalendarTable rename(Name name) {
        return new EducatorCalendarTable(name, null);
    }

    // -------------------------------------------------------------------------
    // Row15 type methods
    // -------------------------------------------------------------------------

    @Override
    @Nonnull
    public Row15<UUID, UUID, LocalDate, LocalTime, LocalTime, BookingStatusEnum, UUID, String, String, OffsetDateTime, String, OffsetDateTime, String, OffsetDateTime, OffsetDateTime> fieldsRow() {
        return (Row15) super.fieldsRow();
    }
}
