/*
 * This file is generated by jOOQ.
 */
package unid.jooqMono.model.tables.records;


import java.beans.ConstructorProperties;
import java.time.OffsetDateTime;
import java.util.UUID;

import javax.annotation.Nonnull;
import javax.annotation.Nullable;
import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record7;
import org.jooq.Row7;
import org.jooq.impl.UpdatableRecordImpl;

import unid.jooqMono.model.tables.CityTable;
import unid.jooqMono.model.tables.pojos.CityPojo;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.15.12"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@lombok.experimental.FieldNameConstants(innerTypeName = "Columns")
public class CityRecord extends UpdatableRecordImpl<CityRecord> implements Record7<UUID, UUID, UUID, OffsetDateTime, String, OffsetDateTime, String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.city.id</code>.
     */
    public CityRecord setId(@Nonnull UUID value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>public.city.id</code>.
     */
    @Nonnull
    public UUID getId() {
        return (UUID) get(0);
    }

    /**
     * Setter for <code>public.city.country_id</code>.
     */
    public CityRecord setCountryId(@Nullable UUID value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>public.city.country_id</code>.
     */
    @Nullable
    public UUID getCountryId() {
        return (UUID) get(1);
    }

    /**
     * Setter for <code>public.city.name_i18n_id</code>.
     */
    public CityRecord setNameI18nId(@Nullable UUID value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>public.city.name_i18n_id</code>.
     */
    @Nullable
    public UUID getNameI18nId() {
        return (UUID) get(2);
    }

    /**
     * Setter for <code>public.city.created_on</code>.
     */
    public CityRecord setCreatedOn(@Nullable OffsetDateTime value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>public.city.created_on</code>.
     */
    @Nullable
    public OffsetDateTime getCreatedOn() {
        return (OffsetDateTime) get(3);
    }

    /**
     * Setter for <code>public.city.created_by</code>.
     */
    public CityRecord setCreatedBy(@Nullable String value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>public.city.created_by</code>.
     */
    @Nullable
    public String getCreatedBy() {
        return (String) get(4);
    }

    /**
     * Setter for <code>public.city.updated_on</code>.
     */
    public CityRecord setUpdatedOn(@Nullable OffsetDateTime value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>public.city.updated_on</code>.
     */
    @Nullable
    public OffsetDateTime getUpdatedOn() {
        return (OffsetDateTime) get(5);
    }

    /**
     * Setter for <code>public.city.updated_by</code>.
     */
    public CityRecord setUpdatedBy(@Nullable String value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>public.city.updated_by</code>.
     */
    @Nullable
    public String getUpdatedBy() {
        return (String) get(6);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    @Nonnull
    public Record1<UUID> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record7 type implementation
    // -------------------------------------------------------------------------

    @Override
    @Nonnull
    public Row7<UUID, UUID, UUID, OffsetDateTime, String, OffsetDateTime, String> fieldsRow() {
        return (Row7) super.fieldsRow();
    }

    @Override
    @Nonnull
    public Row7<UUID, UUID, UUID, OffsetDateTime, String, OffsetDateTime, String> valuesRow() {
        return (Row7) super.valuesRow();
    }

    @Override
    @Nonnull
    public Field<UUID> field1() {
        return CityTable.CITY.ID;
    }

    @Override
    @Nonnull
    public Field<UUID> field2() {
        return CityTable.CITY.COUNTRY_ID;
    }

    @Override
    @Nonnull
    public Field<UUID> field3() {
        return CityTable.CITY.NAME_I18N_ID;
    }

    @Override
    @Nonnull
    public Field<OffsetDateTime> field4() {
        return CityTable.CITY.CREATED_ON;
    }

    @Override
    @Nonnull
    public Field<String> field5() {
        return CityTable.CITY.CREATED_BY;
    }

    @Override
    @Nonnull
    public Field<OffsetDateTime> field6() {
        return CityTable.CITY.UPDATED_ON;
    }

    @Override
    @Nonnull
    public Field<String> field7() {
        return CityTable.CITY.UPDATED_BY;
    }

    @Override
    @Nonnull
    public UUID component1() {
        return getId();
    }

    @Override
    @Nullable
    public UUID component2() {
        return getCountryId();
    }

    @Override
    @Nullable
    public UUID component3() {
        return getNameI18nId();
    }

    @Override
    @Nullable
    public OffsetDateTime component4() {
        return getCreatedOn();
    }

    @Override
    @Nullable
    public String component5() {
        return getCreatedBy();
    }

    @Override
    @Nullable
    public OffsetDateTime component6() {
        return getUpdatedOn();
    }

    @Override
    @Nullable
    public String component7() {
        return getUpdatedBy();
    }

    @Override
    @Nonnull
    public UUID value1() {
        return getId();
    }

    @Override
    @Nullable
    public UUID value2() {
        return getCountryId();
    }

    @Override
    @Nullable
    public UUID value3() {
        return getNameI18nId();
    }

    @Override
    @Nullable
    public OffsetDateTime value4() {
        return getCreatedOn();
    }

    @Override
    @Nullable
    public String value5() {
        return getCreatedBy();
    }

    @Override
    @Nullable
    public OffsetDateTime value6() {
        return getUpdatedOn();
    }

    @Override
    @Nullable
    public String value7() {
        return getUpdatedBy();
    }

    @Override
    @Nonnull
    public CityRecord value1(@Nonnull UUID value) {
        setId(value);
        return this;
    }

    @Override
    @Nonnull
    public CityRecord value2(@Nullable UUID value) {
        setCountryId(value);
        return this;
    }

    @Override
    @Nonnull
    public CityRecord value3(@Nullable UUID value) {
        setNameI18nId(value);
        return this;
    }

    @Override
    @Nonnull
    public CityRecord value4(@Nullable OffsetDateTime value) {
        setCreatedOn(value);
        return this;
    }

    @Override
    @Nonnull
    public CityRecord value5(@Nullable String value) {
        setCreatedBy(value);
        return this;
    }

    @Override
    @Nonnull
    public CityRecord value6(@Nullable OffsetDateTime value) {
        setUpdatedOn(value);
        return this;
    }

    @Override
    @Nonnull
    public CityRecord value7(@Nullable String value) {
        setUpdatedBy(value);
        return this;
    }

    @Override
    @Nonnull
    public CityRecord values(@Nonnull UUID value1, @Nullable UUID value2, @Nullable UUID value3, @Nullable OffsetDateTime value4, @Nullable String value5, @Nullable OffsetDateTime value6, @Nullable String value7) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached CityRecord
     */
    public CityRecord() {
        super(CityTable.CITY);
    }

    /**
     * Create a detached, initialised CityRecord
     */
    @ConstructorProperties({ "id", "countryId", "nameI18nId", "createdOn", "createdBy", "updatedOn", "updatedBy" })
    public CityRecord(@Nonnull UUID id, @Nullable UUID countryId, @Nullable UUID nameI18nId, @Nullable OffsetDateTime createdOn, @Nullable String createdBy, @Nullable OffsetDateTime updatedOn, @Nullable String updatedBy) {
        super(CityTable.CITY);

        setId(id);
        setCountryId(countryId);
        setNameI18nId(nameI18nId);
        setCreatedOn(createdOn);
        setCreatedBy(createdBy);
        setUpdatedOn(updatedOn);
        setUpdatedBy(updatedBy);
    }

    /**
     * Create a detached, initialised CityRecord
     */
    public CityRecord(CityPojo value) {
        super(CityTable.CITY);

        if (value != null) {
            setId(value.getId());
            setCountryId(value.getCountryId());
            setNameI18nId(value.getNameI18nId());
            setCreatedOn(value.getCreatedOn());
            setCreatedBy(value.getCreatedBy());
            setUpdatedOn(value.getUpdatedOn());
            setUpdatedBy(value.getUpdatedBy());
        }
    }
}
