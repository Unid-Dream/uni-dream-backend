/*
 * This file is generated by jOOQ.
 */
package unid.jooqMono.model.tables.daos;


import java.time.LocalDateTime;
import java.util.List;
import java.util.UUID;

import javax.annotation.Nonnull;
import javax.annotation.Nullable;
import javax.annotation.processing.Generated;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;

import unid.jooqMono.model.enums.ScheduleEventTypeEnum;
import unid.jooqMono.model.tables.EventScheduleTimeTable;
import unid.jooqMono.model.tables.pojos.EventScheduleTimePojo;
import unid.jooqMono.model.tables.records.EventScheduleTimeRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.15.12"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class EventScheduleTimeDao extends DAOImpl<EventScheduleTimeRecord, EventScheduleTimePojo, UUID> {

    /**
     * Create a new EventScheduleTimeDao without any configuration
     */
    public EventScheduleTimeDao() {
        super(EventScheduleTimeTable.EVENT_SCHEDULE_TIME, EventScheduleTimePojo.class);
    }

    /**
     * Create a new EventScheduleTimeDao with an attached configuration
     */
    public EventScheduleTimeDao(Configuration configuration) {
        super(EventScheduleTimeTable.EVENT_SCHEDULE_TIME, EventScheduleTimePojo.class, configuration);
    }

    @Override
    @Nonnull
    public UUID getId(EventScheduleTimePojo object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<EventScheduleTimePojo> fetchRangeOfId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(EventScheduleTimeTable.EVENT_SCHEDULE_TIME.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    @Nonnull
    public List<EventScheduleTimePojo> fetchById(UUID... values) {
        return fetch(EventScheduleTimeTable.EVENT_SCHEDULE_TIME.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    @Nullable
    public EventScheduleTimePojo fetchOneById(UUID value) {
        return fetchOne(EventScheduleTimeTable.EVENT_SCHEDULE_TIME.ID, value);
    }

    /**
     * Fetch records that have <code>start_time BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<EventScheduleTimePojo> fetchRangeOfStartTime(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(EventScheduleTimeTable.EVENT_SCHEDULE_TIME.START_TIME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>start_time IN (values)</code>
     */
    @Nonnull
    public List<EventScheduleTimePojo> fetchByStartTime(LocalDateTime... values) {
        return fetch(EventScheduleTimeTable.EVENT_SCHEDULE_TIME.START_TIME, values);
    }

    /**
     * Fetch records that have <code>end_time BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<EventScheduleTimePojo> fetchRangeOfEndTime(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(EventScheduleTimeTable.EVENT_SCHEDULE_TIME.END_TIME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>end_time IN (values)</code>
     */
    @Nonnull
    public List<EventScheduleTimePojo> fetchByEndTime(LocalDateTime... values) {
        return fetch(EventScheduleTimeTable.EVENT_SCHEDULE_TIME.END_TIME, values);
    }

    /**
     * Fetch records that have <code>ref_event_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<EventScheduleTimePojo> fetchRangeOfRefEventId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(EventScheduleTimeTable.EVENT_SCHEDULE_TIME.REF_EVENT_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>ref_event_id IN (values)</code>
     */
    @Nonnull
    public List<EventScheduleTimePojo> fetchByRefEventId(UUID... values) {
        return fetch(EventScheduleTimeTable.EVENT_SCHEDULE_TIME.REF_EVENT_ID, values);
    }

    /**
     * Fetch records that have <code>event_type BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<EventScheduleTimePojo> fetchRangeOfEventType(ScheduleEventTypeEnum lowerInclusive, ScheduleEventTypeEnum upperInclusive) {
        return fetchRange(EventScheduleTimeTable.EVENT_SCHEDULE_TIME.EVENT_TYPE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>event_type IN (values)</code>
     */
    @Nonnull
    public List<EventScheduleTimePojo> fetchByEventType(ScheduleEventTypeEnum... values) {
        return fetch(EventScheduleTimeTable.EVENT_SCHEDULE_TIME.EVENT_TYPE, values);
    }
}
