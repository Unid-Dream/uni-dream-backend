/*
 * This file is generated by jOOQ.
 */
package unid.jooqMono.model.tables;


import java.math.BigDecimal;
import java.time.OffsetDateTime;
import java.util.UUID;

import javax.annotation.Nonnull;
import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import unid.jooqMono.model.Keys;
import unid.jooqMono.model.Public;
import unid.jooqMono.model.enums.CurrencyEnum;
import unid.jooqMono.model.tables.records.PricingRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.15.12"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PricingTable extends TableImpl<PricingRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.pricing</code>
     */
    public static final PricingTable PRICING = new PricingTable();

    /**
     * The class holding records for this type
     */
    @Override
    @Nonnull
    public Class<PricingRecord> getRecordType() {
        return PricingRecord.class;
    }

    /**
     * The column <code>public.pricing.id</code>.
     */
    public final TableField<PricingRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field("gen_random_uuid()", SQLDataType.UUID)), this, "");

    /**
     * The column <code>public.pricing.price</code>.
     */
    public final TableField<PricingRecord, BigDecimal> PRICE = createField(DSL.name("price"), SQLDataType.NUMERIC, this, "");

    /**
     * The column <code>public.pricing.currency</code>.
     */
    public final TableField<PricingRecord, CurrencyEnum> CURRENCY = createField(DSL.name("currency"), SQLDataType.VARCHAR.nullable(false).asEnumDataType(unid.jooqMono.model.enums.CurrencyEnum.class), this, "");

    /**
     * The column <code>public.pricing.created_on</code>.
     */
    public final TableField<PricingRecord, OffsetDateTime> CREATED_ON = createField(DSL.name("created_on"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    /**
     * The column <code>public.pricing.created_by</code>.
     */
    public final TableField<PricingRecord, String> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.pricing.updated_on</code>.
     */
    public final TableField<PricingRecord, OffsetDateTime> UPDATED_ON = createField(DSL.name("updated_on"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    /**
     * The column <code>public.pricing.updated_by</code>.
     */
    public final TableField<PricingRecord, String> UPDATED_BY = createField(DSL.name("updated_by"), SQLDataType.CLOB, this, "");

    private PricingTable(Name alias, Table<PricingRecord> aliased) {
        this(alias, aliased, null);
    }

    private PricingTable(Name alias, Table<PricingRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.pricing</code> table reference
     */
    public PricingTable(String alias) {
        this(DSL.name(alias), PRICING);
    }

    /**
     * Create an aliased <code>public.pricing</code> table reference
     */
    public PricingTable(Name alias) {
        this(alias, PRICING);
    }

    /**
     * Create a <code>public.pricing</code> table reference
     */
    public PricingTable() {
        this(DSL.name("pricing"), null);
    }

    public <O extends Record> PricingTable(Table<O> child, ForeignKey<O, PricingRecord> key) {
        super(child, key, PRICING);
    }

    @Override
    @Nonnull
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    @Nonnull
    public UniqueKey<PricingRecord> getPrimaryKey() {
        return Keys.PRICING_PKEY;
    }

    @Override
    @Nonnull
    public PricingTable as(String alias) {
        return new PricingTable(DSL.name(alias), this);
    }

    @Override
    @Nonnull
    public PricingTable as(Name alias) {
        return new PricingTable(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public PricingTable rename(String name) {
        return new PricingTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public PricingTable rename(Name name) {
        return new PricingTable(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    @Nonnull
    public Row7<UUID, BigDecimal, CurrencyEnum, OffsetDateTime, String, OffsetDateTime, String> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
