/*
 * This file is generated by jOOQ.
 */
package unid.jooqMono.model.tables;


import java.math.BigDecimal;
import java.time.LocalDate;
import java.time.LocalTime;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import javax.annotation.Nonnull;
import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row20;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import unid.jooqMono.model.Keys;
import unid.jooqMono.model.Public;
import unid.jooqMono.model.enums.EventStatusEnum;
import unid.jooqMono.model.enums.EventTypeEnum;
import unid.jooqMono.model.tables.records.EventRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.15.12"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class EventTable extends TableImpl<EventRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.event</code>
     */
    public static final EventTable EVENT = new EventTable();

    /**
     * The class holding records for this type
     */
    @Override
    @Nonnull
    public Class<EventRecord> getRecordType() {
        return EventRecord.class;
    }

    /**
     * The column <code>public.event.id</code>.
     */
    public final TableField<EventRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field("gen_random_uuid()", SQLDataType.UUID)), this, "");

    /**
     * The column <code>public.event.title_i18n_id</code>.
     */
    public final TableField<EventRecord, UUID> TITLE_I18N_ID = createField(DSL.name("title_i18n_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.event.description_i18n_id</code>.
     */
    public final TableField<EventRecord, UUID> DESCRIPTION_I18N_ID = createField(DSL.name("description_i18n_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.event.event_type</code>.
     */
    public final TableField<EventRecord, EventTypeEnum> EVENT_TYPE = createField(DSL.name("event_type"), SQLDataType.VARCHAR.nullable(false).asEnumDataType(unid.jooqMono.model.enums.EventTypeEnum.class), this, "");

    /**
     * The column <code>public.event.start_date</code>.
     */
    public final TableField<EventRecord, LocalDate> START_DATE = createField(DSL.name("start_date"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>public.event.end_date</code>.
     */
    public final TableField<EventRecord, LocalDate> END_DATE = createField(DSL.name("end_date"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>public.event.start_time</code>.
     */
    public final TableField<EventRecord, LocalTime> START_TIME = createField(DSL.name("start_time"), SQLDataType.LOCALTIME(6), this, "");

    /**
     * The column <code>public.event.end_time</code>.
     */
    public final TableField<EventRecord, LocalTime> END_TIME = createField(DSL.name("end_time"), SQLDataType.LOCALTIME(6), this, "");

    /**
     * The column <code>public.event.max_number_of_student</code>.
     */
    public final TableField<EventRecord, BigDecimal> MAX_NUMBER_OF_STUDENT = createField(DSL.name("max_number_of_student"), SQLDataType.NUMERIC, this, "");

    /**
     * The column <code>public.event.fee</code>.
     */
    public final TableField<EventRecord, BigDecimal> FEE = createField(DSL.name("fee"), SQLDataType.NUMERIC, this, "");

    /**
     * The column <code>public.event.poster_image</code>.
     */
    public final TableField<EventRecord, String> POSTER_IMAGE = createField(DSL.name("poster_image"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.event.price</code>.
     */
    public final TableField<EventRecord, BigDecimal> PRICE = createField(DSL.name("price"), SQLDataType.NUMERIC, this, "");

    /**
     * The column <code>public.event.created_on</code>.
     */
    public final TableField<EventRecord, OffsetDateTime> CREATED_ON = createField(DSL.name("created_on"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    /**
     * The column <code>public.event.created_by</code>.
     */
    public final TableField<EventRecord, String> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.event.updated_on</code>.
     */
    public final TableField<EventRecord, OffsetDateTime> UPDATED_ON = createField(DSL.name("updated_on"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    /**
     * The column <code>public.event.updated_by</code>.
     */
    public final TableField<EventRecord, String> UPDATED_BY = createField(DSL.name("updated_by"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.event.educator_profile_id</code>.
     */
    public final TableField<EventRecord, UUID> EDUCATOR_PROFILE_ID = createField(DSL.name("educator_profile_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.event.agenda_i18n_id</code>.
     */
    public final TableField<EventRecord, UUID> AGENDA_I18N_ID = createField(DSL.name("agenda_i18n_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.event.event_status</code>.
     */
    public final TableField<EventRecord, EventStatusEnum> EVENT_STATUS = createField(DSL.name("event_status"), SQLDataType.VARCHAR.asEnumDataType(unid.jooqMono.model.enums.EventStatusEnum.class), this, "");

    /**
     * The column <code>public.event.academic_major_id</code>.
     */
    public final TableField<EventRecord, UUID> ACADEMIC_MAJOR_ID = createField(DSL.name("academic_major_id"), SQLDataType.UUID, this, "");

    private EventTable(Name alias, Table<EventRecord> aliased) {
        this(alias, aliased, null);
    }

    private EventTable(Name alias, Table<EventRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.event</code> table reference
     */
    public EventTable(String alias) {
        this(DSL.name(alias), EVENT);
    }

    /**
     * Create an aliased <code>public.event</code> table reference
     */
    public EventTable(Name alias) {
        this(alias, EVENT);
    }

    /**
     * Create a <code>public.event</code> table reference
     */
    public EventTable() {
        this(DSL.name("event"), null);
    }

    public <O extends Record> EventTable(Table<O> child, ForeignKey<O, EventRecord> key) {
        super(child, key, EVENT);
    }

    @Override
    @Nonnull
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    @Nonnull
    public UniqueKey<EventRecord> getPrimaryKey() {
        return Keys.EVENT_PKEY;
    }

    @Override
    @Nonnull
    public List<UniqueKey<EventRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.EVENT_TITLE_I18N_ID_KEY, Keys.EVENT_DESCRIPTION_I18N_ID_KEY);
    }

    @Override
    @Nonnull
    public List<ForeignKey<EventRecord, ?>> getReferences() {
        return Arrays.asList(Keys.EVENT__FK_EVET_TITL, Keys.EVENT__FK_EVET_DESC);
    }

    private transient I18nTable _fkEvetTitl;
    private transient I18nTable _fkEvetDesc;

    public I18nTable fkEvetTitl() {
        if (_fkEvetTitl == null)
            _fkEvetTitl = new I18nTable(this, Keys.EVENT__FK_EVET_TITL);

        return _fkEvetTitl;
    }

    public I18nTable fkEvetDesc() {
        if (_fkEvetDesc == null)
            _fkEvetDesc = new I18nTable(this, Keys.EVENT__FK_EVET_DESC);

        return _fkEvetDesc;
    }

    @Override
    @Nonnull
    public EventTable as(String alias) {
        return new EventTable(DSL.name(alias), this);
    }

    @Override
    @Nonnull
    public EventTable as(Name alias) {
        return new EventTable(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public EventTable rename(String name) {
        return new EventTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public EventTable rename(Name name) {
        return new EventTable(name, null);
    }

    // -------------------------------------------------------------------------
    // Row20 type methods
    // -------------------------------------------------------------------------

    @Override
    @Nonnull
    public Row20<UUID, UUID, UUID, EventTypeEnum, LocalDate, LocalDate, LocalTime, LocalTime, BigDecimal, BigDecimal, String, BigDecimal, OffsetDateTime, String, OffsetDateTime, String, UUID, UUID, EventStatusEnum, UUID> fieldsRow() {
        return (Row20) super.fieldsRow();
    }
}
