/*
 * This file is generated by jOOQ.
 */
package unid.jooqMono.model.tables;


import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import javax.annotation.Nonnull;
import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import unid.jooqMono.model.Keys;
import unid.jooqMono.model.Public;
import unid.jooqMono.model.tables.records.EcaCourseAcademicMapRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.15.12"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class EcaCourseAcademicMapTable extends TableImpl<EcaCourseAcademicMapRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.eca_course_academic_map</code>
     */
    public static final EcaCourseAcademicMapTable ECA_COURSE_ACADEMIC_MAP = new EcaCourseAcademicMapTable();

    /**
     * The class holding records for this type
     */
    @Override
    @Nonnull
    public Class<EcaCourseAcademicMapRecord> getRecordType() {
        return EcaCourseAcademicMapRecord.class;
    }

    /**
     * The column <code>public.eca_course_academic_map.id</code>.
     */
    public final TableField<EcaCourseAcademicMapRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field("gen_random_uuid()", SQLDataType.UUID)), this, "");

    /**
     * The column <code>public.eca_course_academic_map.eca_course_id</code>.
     */
    public final TableField<EcaCourseAcademicMapRecord, UUID> ECA_COURSE_ID = createField(DSL.name("eca_course_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.eca_course_academic_map.academic_major_id</code>.
     */
    public final TableField<EcaCourseAcademicMapRecord, UUID> ACADEMIC_MAJOR_ID = createField(DSL.name("academic_major_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column
     * <code>public.eca_course_academic_map.academic_subject_id</code>.
     */
    public final TableField<EcaCourseAcademicMapRecord, UUID> ACADEMIC_SUBJECT_ID = createField(DSL.name("academic_subject_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.eca_course_academic_map.created_on</code>.
     */
    public final TableField<EcaCourseAcademicMapRecord, OffsetDateTime> CREATED_ON = createField(DSL.name("created_on"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    /**
     * The column <code>public.eca_course_academic_map.created_by</code>.
     */
    public final TableField<EcaCourseAcademicMapRecord, String> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.eca_course_academic_map.updated_on</code>.
     */
    public final TableField<EcaCourseAcademicMapRecord, OffsetDateTime> UPDATED_ON = createField(DSL.name("updated_on"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    /**
     * The column <code>public.eca_course_academic_map.updated_by</code>.
     */
    public final TableField<EcaCourseAcademicMapRecord, String> UPDATED_BY = createField(DSL.name("updated_by"), SQLDataType.CLOB, this, "");

    private EcaCourseAcademicMapTable(Name alias, Table<EcaCourseAcademicMapRecord> aliased) {
        this(alias, aliased, null);
    }

    private EcaCourseAcademicMapTable(Name alias, Table<EcaCourseAcademicMapRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.eca_course_academic_map</code> table
     * reference
     */
    public EcaCourseAcademicMapTable(String alias) {
        this(DSL.name(alias), ECA_COURSE_ACADEMIC_MAP);
    }

    /**
     * Create an aliased <code>public.eca_course_academic_map</code> table
     * reference
     */
    public EcaCourseAcademicMapTable(Name alias) {
        this(alias, ECA_COURSE_ACADEMIC_MAP);
    }

    /**
     * Create a <code>public.eca_course_academic_map</code> table reference
     */
    public EcaCourseAcademicMapTable() {
        this(DSL.name("eca_course_academic_map"), null);
    }

    public <O extends Record> EcaCourseAcademicMapTable(Table<O> child, ForeignKey<O, EcaCourseAcademicMapRecord> key) {
        super(child, key, ECA_COURSE_ACADEMIC_MAP);
    }

    @Override
    @Nonnull
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    @Nonnull
    public UniqueKey<EcaCourseAcademicMapRecord> getPrimaryKey() {
        return Keys.ECA_COURSE_ACADEMIC_MAP_PKEY;
    }

    @Override
    @Nonnull
    public List<UniqueKey<EcaCourseAcademicMapRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.UQ_ECA_COUR_ACAD_MAP_ACAD);
    }

    @Override
    @Nonnull
    public List<ForeignKey<EcaCourseAcademicMapRecord, ?>> getReferences() {
        return Arrays.asList(Keys.ECA_COURSE_ACADEMIC_MAP__FK_ECA_COUR_ACAD_MAP_ECA_COUR, Keys.ECA_COURSE_ACADEMIC_MAP__FK_ECA_COUR_ACAD_MAP_ACAD_MAJ, Keys.ECA_COURSE_ACADEMIC_MAP__FK_ECA_COUR_ACAD_MAP_ACAD_MAJ_SUB);
    }

    private transient EcaCourseTable _ecaCourse;
    private transient AcademicMajorTable _academicMajor;
    private transient AcademicMajorSubjectMapTable _academicMajorSubjectMap;

    public EcaCourseTable ecaCourse() {
        if (_ecaCourse == null)
            _ecaCourse = new EcaCourseTable(this, Keys.ECA_COURSE_ACADEMIC_MAP__FK_ECA_COUR_ACAD_MAP_ECA_COUR);

        return _ecaCourse;
    }

    public AcademicMajorTable academicMajor() {
        if (_academicMajor == null)
            _academicMajor = new AcademicMajorTable(this, Keys.ECA_COURSE_ACADEMIC_MAP__FK_ECA_COUR_ACAD_MAP_ACAD_MAJ);

        return _academicMajor;
    }

    public AcademicMajorSubjectMapTable academicMajorSubjectMap() {
        if (_academicMajorSubjectMap == null)
            _academicMajorSubjectMap = new AcademicMajorSubjectMapTable(this, Keys.ECA_COURSE_ACADEMIC_MAP__FK_ECA_COUR_ACAD_MAP_ACAD_MAJ_SUB);

        return _academicMajorSubjectMap;
    }

    @Override
    @Nonnull
    public EcaCourseAcademicMapTable as(String alias) {
        return new EcaCourseAcademicMapTable(DSL.name(alias), this);
    }

    @Override
    @Nonnull
    public EcaCourseAcademicMapTable as(Name alias) {
        return new EcaCourseAcademicMapTable(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public EcaCourseAcademicMapTable rename(String name) {
        return new EcaCourseAcademicMapTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public EcaCourseAcademicMapTable rename(Name name) {
        return new EcaCourseAcademicMapTable(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    @Nonnull
    public Row8<UUID, UUID, UUID, UUID, OffsetDateTime, String, OffsetDateTime, String> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
}
