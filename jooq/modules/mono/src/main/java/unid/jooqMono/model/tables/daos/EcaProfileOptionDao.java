/*
 * This file is generated by jOOQ.
 */
package unid.jooqMono.model.tables.daos;


import java.util.List;
import java.util.UUID;

import javax.annotation.Nonnull;
import javax.annotation.Nullable;
import javax.annotation.processing.Generated;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;

import unid.jooqMono.model.tables.EcaProfileOptionTable;
import unid.jooqMono.model.tables.pojos.EcaProfileOptionPojo;
import unid.jooqMono.model.tables.records.EcaProfileOptionRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.15.12"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class EcaProfileOptionDao extends DAOImpl<EcaProfileOptionRecord, EcaProfileOptionPojo, UUID> {

    /**
     * Create a new EcaProfileOptionDao without any configuration
     */
    public EcaProfileOptionDao() {
        super(EcaProfileOptionTable.ECA_PROFILE_OPTION, EcaProfileOptionPojo.class);
    }

    /**
     * Create a new EcaProfileOptionDao with an attached configuration
     */
    public EcaProfileOptionDao(Configuration configuration) {
        super(EcaProfileOptionTable.ECA_PROFILE_OPTION, EcaProfileOptionPojo.class, configuration);
    }

    @Override
    @Nonnull
    public UUID getId(EcaProfileOptionPojo object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<EcaProfileOptionPojo> fetchRangeOfId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(EcaProfileOptionTable.ECA_PROFILE_OPTION.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    @Nonnull
    public List<EcaProfileOptionPojo> fetchById(UUID... values) {
        return fetch(EcaProfileOptionTable.ECA_PROFILE_OPTION.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    @Nullable
    public EcaProfileOptionPojo fetchOneById(UUID value) {
        return fetchOne(EcaProfileOptionTable.ECA_PROFILE_OPTION.ID, value);
    }

    /**
     * Fetch records that have <code>option_i18n_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<EcaProfileOptionPojo> fetchRangeOfOptionI18nId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(EcaProfileOptionTable.ECA_PROFILE_OPTION.OPTION_I18N_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>option_i18n_id IN (values)</code>
     */
    @Nonnull
    public List<EcaProfileOptionPojo> fetchByOptionI18nId(UUID... values) {
        return fetch(EcaProfileOptionTable.ECA_PROFILE_OPTION.OPTION_I18N_ID, values);
    }

    /**
     * Fetch records that have <code>section_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<EcaProfileOptionPojo> fetchRangeOfSectionId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(EcaProfileOptionTable.ECA_PROFILE_OPTION.SECTION_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>section_id IN (values)</code>
     */
    @Nonnull
    public List<EcaProfileOptionPojo> fetchBySectionId(UUID... values) {
        return fetch(EcaProfileOptionTable.ECA_PROFILE_OPTION.SECTION_ID, values);
    }

    /**
     * Fetch records that have <code>score BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<EcaProfileOptionPojo> fetchRangeOfScore(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(EcaProfileOptionTable.ECA_PROFILE_OPTION.SCORE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>score IN (values)</code>
     */
    @Nonnull
    public List<EcaProfileOptionPojo> fetchByScore(Integer... values) {
        return fetch(EcaProfileOptionTable.ECA_PROFILE_OPTION.SCORE, values);
    }
}
