/*
 * This file is generated by jOOQ.
 */
package unid.jooqMono.model.tables.daos;


import java.time.OffsetDateTime;
import java.util.List;
import java.util.UUID;

import javax.annotation.Nonnull;
import javax.annotation.Nullable;
import javax.annotation.processing.Generated;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;

import unid.jooqMono.model.enums.AcademicSubjectResourceTypeEnum;
import unid.jooqMono.model.tables.AcademicSubjectResourceTable;
import unid.jooqMono.model.tables.pojos.AcademicSubjectResourcePojo;
import unid.jooqMono.model.tables.records.AcademicSubjectResourceRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.15.12"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AcademicSubjectResourceDao extends DAOImpl<AcademicSubjectResourceRecord, AcademicSubjectResourcePojo, UUID> {

    /**
     * Create a new AcademicSubjectResourceDao without any configuration
     */
    public AcademicSubjectResourceDao() {
        super(AcademicSubjectResourceTable.ACADEMIC_SUBJECT_RESOURCE, AcademicSubjectResourcePojo.class);
    }

    /**
     * Create a new AcademicSubjectResourceDao with an attached configuration
     */
    public AcademicSubjectResourceDao(Configuration configuration) {
        super(AcademicSubjectResourceTable.ACADEMIC_SUBJECT_RESOURCE, AcademicSubjectResourcePojo.class, configuration);
    }

    @Override
    @Nonnull
    public UUID getId(AcademicSubjectResourcePojo object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<AcademicSubjectResourcePojo> fetchRangeOfId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(AcademicSubjectResourceTable.ACADEMIC_SUBJECT_RESOURCE.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    @Nonnull
    public List<AcademicSubjectResourcePojo> fetchById(UUID... values) {
        return fetch(AcademicSubjectResourceTable.ACADEMIC_SUBJECT_RESOURCE.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    @Nullable
    public AcademicSubjectResourcePojo fetchOneById(UUID value) {
        return fetchOne(AcademicSubjectResourceTable.ACADEMIC_SUBJECT_RESOURCE.ID, value);
    }

    /**
     * Fetch records that have <code>academic_subject_id BETWEEN lowerInclusive
     * AND upperInclusive</code>
     */
    @Nonnull
    public List<AcademicSubjectResourcePojo> fetchRangeOfAcademicSubjectId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(AcademicSubjectResourceTable.ACADEMIC_SUBJECT_RESOURCE.ACADEMIC_SUBJECT_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>academic_subject_id IN (values)</code>
     */
    @Nonnull
    public List<AcademicSubjectResourcePojo> fetchByAcademicSubjectId(UUID... values) {
        return fetch(AcademicSubjectResourceTable.ACADEMIC_SUBJECT_RESOURCE.ACADEMIC_SUBJECT_ID, values);
    }

    /**
     * Fetch records that have <code>type BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<AcademicSubjectResourcePojo> fetchRangeOfType(AcademicSubjectResourceTypeEnum lowerInclusive, AcademicSubjectResourceTypeEnum upperInclusive) {
        return fetchRange(AcademicSubjectResourceTable.ACADEMIC_SUBJECT_RESOURCE.TYPE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>type IN (values)</code>
     */
    @Nonnull
    public List<AcademicSubjectResourcePojo> fetchByType(AcademicSubjectResourceTypeEnum... values) {
        return fetch(AcademicSubjectResourceTable.ACADEMIC_SUBJECT_RESOURCE.TYPE, values);
    }

    /**
     * Fetch records that have <code>title_i18n_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<AcademicSubjectResourcePojo> fetchRangeOfTitleI18nId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(AcademicSubjectResourceTable.ACADEMIC_SUBJECT_RESOURCE.TITLE_I18N_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>title_i18n_id IN (values)</code>
     */
    @Nonnull
    public List<AcademicSubjectResourcePojo> fetchByTitleI18nId(UUID... values) {
        return fetch(AcademicSubjectResourceTable.ACADEMIC_SUBJECT_RESOURCE.TITLE_I18N_ID, values);
    }

    /**
     * Fetch a unique record that has <code>title_i18n_id = value</code>
     */
    @Nullable
    public AcademicSubjectResourcePojo fetchOneByTitleI18nId(UUID value) {
        return fetchOne(AcademicSubjectResourceTable.ACADEMIC_SUBJECT_RESOURCE.TITLE_I18N_ID, value);
    }

    /**
     * Fetch records that have <code>author BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<AcademicSubjectResourcePojo> fetchRangeOfAuthor(String lowerInclusive, String upperInclusive) {
        return fetchRange(AcademicSubjectResourceTable.ACADEMIC_SUBJECT_RESOURCE.AUTHOR, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>author IN (values)</code>
     */
    @Nonnull
    public List<AcademicSubjectResourcePojo> fetchByAuthor(String... values) {
        return fetch(AcademicSubjectResourceTable.ACADEMIC_SUBJECT_RESOURCE.AUTHOR, values);
    }

    /**
     * Fetch records that have <code>url BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<AcademicSubjectResourcePojo> fetchRangeOfUrl(String lowerInclusive, String upperInclusive) {
        return fetchRange(AcademicSubjectResourceTable.ACADEMIC_SUBJECT_RESOURCE.URL, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>url IN (values)</code>
     */
    @Nonnull
    public List<AcademicSubjectResourcePojo> fetchByUrl(String... values) {
        return fetch(AcademicSubjectResourceTable.ACADEMIC_SUBJECT_RESOURCE.URL, values);
    }

    /**
     * Fetch records that have <code>thumbnail BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<AcademicSubjectResourcePojo> fetchRangeOfThumbnail(String lowerInclusive, String upperInclusive) {
        return fetchRange(AcademicSubjectResourceTable.ACADEMIC_SUBJECT_RESOURCE.THUMBNAIL, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>thumbnail IN (values)</code>
     */
    @Nonnull
    public List<AcademicSubjectResourcePojo> fetchByThumbnail(String... values) {
        return fetch(AcademicSubjectResourceTable.ACADEMIC_SUBJECT_RESOURCE.THUMBNAIL, values);
    }

    /**
     * Fetch records that have <code>created_on BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<AcademicSubjectResourcePojo> fetchRangeOfCreatedOn(OffsetDateTime lowerInclusive, OffsetDateTime upperInclusive) {
        return fetchRange(AcademicSubjectResourceTable.ACADEMIC_SUBJECT_RESOURCE.CREATED_ON, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>created_on IN (values)</code>
     */
    @Nonnull
    public List<AcademicSubjectResourcePojo> fetchByCreatedOn(OffsetDateTime... values) {
        return fetch(AcademicSubjectResourceTable.ACADEMIC_SUBJECT_RESOURCE.CREATED_ON, values);
    }

    /**
     * Fetch records that have <code>created_by BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<AcademicSubjectResourcePojo> fetchRangeOfCreatedBy(String lowerInclusive, String upperInclusive) {
        return fetchRange(AcademicSubjectResourceTable.ACADEMIC_SUBJECT_RESOURCE.CREATED_BY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>created_by IN (values)</code>
     */
    @Nonnull
    public List<AcademicSubjectResourcePojo> fetchByCreatedBy(String... values) {
        return fetch(AcademicSubjectResourceTable.ACADEMIC_SUBJECT_RESOURCE.CREATED_BY, values);
    }

    /**
     * Fetch records that have <code>updated_on BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<AcademicSubjectResourcePojo> fetchRangeOfUpdatedOn(OffsetDateTime lowerInclusive, OffsetDateTime upperInclusive) {
        return fetchRange(AcademicSubjectResourceTable.ACADEMIC_SUBJECT_RESOURCE.UPDATED_ON, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>updated_on IN (values)</code>
     */
    @Nonnull
    public List<AcademicSubjectResourcePojo> fetchByUpdatedOn(OffsetDateTime... values) {
        return fetch(AcademicSubjectResourceTable.ACADEMIC_SUBJECT_RESOURCE.UPDATED_ON, values);
    }

    /**
     * Fetch records that have <code>updated_by BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<AcademicSubjectResourcePojo> fetchRangeOfUpdatedBy(String lowerInclusive, String upperInclusive) {
        return fetchRange(AcademicSubjectResourceTable.ACADEMIC_SUBJECT_RESOURCE.UPDATED_BY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>updated_by IN (values)</code>
     */
    @Nonnull
    public List<AcademicSubjectResourcePojo> fetchByUpdatedBy(String... values) {
        return fetch(AcademicSubjectResourceTable.ACADEMIC_SUBJECT_RESOURCE.UPDATED_BY, values);
    }
}
