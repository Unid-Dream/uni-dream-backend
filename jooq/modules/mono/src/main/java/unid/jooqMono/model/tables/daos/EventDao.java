/*
 * This file is generated by jOOQ.
 */
package unid.jooqMono.model.tables.daos;


import java.math.BigDecimal;
import java.time.LocalDate;
import java.time.LocalTime;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.UUID;

import javax.annotation.Nonnull;
import javax.annotation.Nullable;
import javax.annotation.processing.Generated;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;

import unid.jooqMono.model.enums.EventTypeEnum;
import unid.jooqMono.model.tables.EventTable;
import unid.jooqMono.model.tables.pojos.EventPojo;
import unid.jooqMono.model.tables.records.EventRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.15.12"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class EventDao extends DAOImpl<EventRecord, EventPojo, UUID> {

    /**
     * Create a new EventDao without any configuration
     */
    public EventDao() {
        super(EventTable.EVENT, EventPojo.class);
    }

    /**
     * Create a new EventDao with an attached configuration
     */
    public EventDao(Configuration configuration) {
        super(EventTable.EVENT, EventPojo.class, configuration);
    }

    @Override
    @Nonnull
    public UUID getId(EventPojo object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<EventPojo> fetchRangeOfId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(EventTable.EVENT.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    @Nonnull
    public List<EventPojo> fetchById(UUID... values) {
        return fetch(EventTable.EVENT.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    @Nullable
    public EventPojo fetchOneById(UUID value) {
        return fetchOne(EventTable.EVENT.ID, value);
    }

    /**
     * Fetch records that have <code>title_i18n_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<EventPojo> fetchRangeOfTitleI18nId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(EventTable.EVENT.TITLE_I18N_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>title_i18n_id IN (values)</code>
     */
    @Nonnull
    public List<EventPojo> fetchByTitleI18nId(UUID... values) {
        return fetch(EventTable.EVENT.TITLE_I18N_ID, values);
    }

    /**
     * Fetch a unique record that has <code>title_i18n_id = value</code>
     */
    @Nullable
    public EventPojo fetchOneByTitleI18nId(UUID value) {
        return fetchOne(EventTable.EVENT.TITLE_I18N_ID, value);
    }

    /**
     * Fetch records that have <code>description_i18n_id BETWEEN lowerInclusive
     * AND upperInclusive</code>
     */
    @Nonnull
    public List<EventPojo> fetchRangeOfDescriptionI18nId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(EventTable.EVENT.DESCRIPTION_I18N_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>description_i18n_id IN (values)</code>
     */
    @Nonnull
    public List<EventPojo> fetchByDescriptionI18nId(UUID... values) {
        return fetch(EventTable.EVENT.DESCRIPTION_I18N_ID, values);
    }

    /**
     * Fetch a unique record that has <code>description_i18n_id = value</code>
     */
    @Nullable
    public EventPojo fetchOneByDescriptionI18nId(UUID value) {
        return fetchOne(EventTable.EVENT.DESCRIPTION_I18N_ID, value);
    }

    /**
     * Fetch records that have <code>event_type BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<EventPojo> fetchRangeOfEventType(EventTypeEnum lowerInclusive, EventTypeEnum upperInclusive) {
        return fetchRange(EventTable.EVENT.EVENT_TYPE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>event_type IN (values)</code>
     */
    @Nonnull
    public List<EventPojo> fetchByEventType(EventTypeEnum... values) {
        return fetch(EventTable.EVENT.EVENT_TYPE, values);
    }

    /**
     * Fetch records that have <code>start_date BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<EventPojo> fetchRangeOfStartDate(LocalDate lowerInclusive, LocalDate upperInclusive) {
        return fetchRange(EventTable.EVENT.START_DATE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>start_date IN (values)</code>
     */
    @Nonnull
    public List<EventPojo> fetchByStartDate(LocalDate... values) {
        return fetch(EventTable.EVENT.START_DATE, values);
    }

    /**
     * Fetch records that have <code>end_date BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<EventPojo> fetchRangeOfEndDate(LocalDate lowerInclusive, LocalDate upperInclusive) {
        return fetchRange(EventTable.EVENT.END_DATE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>end_date IN (values)</code>
     */
    @Nonnull
    public List<EventPojo> fetchByEndDate(LocalDate... values) {
        return fetch(EventTable.EVENT.END_DATE, values);
    }

    /**
     * Fetch records that have <code>start_time BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<EventPojo> fetchRangeOfStartTime(LocalTime lowerInclusive, LocalTime upperInclusive) {
        return fetchRange(EventTable.EVENT.START_TIME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>start_time IN (values)</code>
     */
    @Nonnull
    public List<EventPojo> fetchByStartTime(LocalTime... values) {
        return fetch(EventTable.EVENT.START_TIME, values);
    }

    /**
     * Fetch records that have <code>end_time BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<EventPojo> fetchRangeOfEndTime(LocalTime lowerInclusive, LocalTime upperInclusive) {
        return fetchRange(EventTable.EVENT.END_TIME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>end_time IN (values)</code>
     */
    @Nonnull
    public List<EventPojo> fetchByEndTime(LocalTime... values) {
        return fetch(EventTable.EVENT.END_TIME, values);
    }

    /**
     * Fetch records that have <code>max_number_of_student BETWEEN
     * lowerInclusive AND upperInclusive</code>
     */
    @Nonnull
    public List<EventPojo> fetchRangeOfMaxNumberOfStudent(BigDecimal lowerInclusive, BigDecimal upperInclusive) {
        return fetchRange(EventTable.EVENT.MAX_NUMBER_OF_STUDENT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>max_number_of_student IN (values)</code>
     */
    @Nonnull
    public List<EventPojo> fetchByMaxNumberOfStudent(BigDecimal... values) {
        return fetch(EventTable.EVENT.MAX_NUMBER_OF_STUDENT, values);
    }

    /**
     * Fetch records that have <code>fee BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<EventPojo> fetchRangeOfFee(BigDecimal lowerInclusive, BigDecimal upperInclusive) {
        return fetchRange(EventTable.EVENT.FEE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>fee IN (values)</code>
     */
    @Nonnull
    public List<EventPojo> fetchByFee(BigDecimal... values) {
        return fetch(EventTable.EVENT.FEE, values);
    }

    /**
     * Fetch records that have <code>poster_image BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<EventPojo> fetchRangeOfPosterImage(String lowerInclusive, String upperInclusive) {
        return fetchRange(EventTable.EVENT.POSTER_IMAGE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>poster_image IN (values)</code>
     */
    @Nonnull
    public List<EventPojo> fetchByPosterImage(String... values) {
        return fetch(EventTable.EVENT.POSTER_IMAGE, values);
    }

    /**
     * Fetch records that have <code>price BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<EventPojo> fetchRangeOfPrice(BigDecimal lowerInclusive, BigDecimal upperInclusive) {
        return fetchRange(EventTable.EVENT.PRICE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>price IN (values)</code>
     */
    @Nonnull
    public List<EventPojo> fetchByPrice(BigDecimal... values) {
        return fetch(EventTable.EVENT.PRICE, values);
    }

    /**
     * Fetch records that have <code>created_on BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<EventPojo> fetchRangeOfCreatedOn(OffsetDateTime lowerInclusive, OffsetDateTime upperInclusive) {
        return fetchRange(EventTable.EVENT.CREATED_ON, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>created_on IN (values)</code>
     */
    @Nonnull
    public List<EventPojo> fetchByCreatedOn(OffsetDateTime... values) {
        return fetch(EventTable.EVENT.CREATED_ON, values);
    }

    /**
     * Fetch records that have <code>created_by BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<EventPojo> fetchRangeOfCreatedBy(String lowerInclusive, String upperInclusive) {
        return fetchRange(EventTable.EVENT.CREATED_BY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>created_by IN (values)</code>
     */
    @Nonnull
    public List<EventPojo> fetchByCreatedBy(String... values) {
        return fetch(EventTable.EVENT.CREATED_BY, values);
    }

    /**
     * Fetch records that have <code>updated_on BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<EventPojo> fetchRangeOfUpdatedOn(OffsetDateTime lowerInclusive, OffsetDateTime upperInclusive) {
        return fetchRange(EventTable.EVENT.UPDATED_ON, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>updated_on IN (values)</code>
     */
    @Nonnull
    public List<EventPojo> fetchByUpdatedOn(OffsetDateTime... values) {
        return fetch(EventTable.EVENT.UPDATED_ON, values);
    }

    /**
     * Fetch records that have <code>updated_by BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<EventPojo> fetchRangeOfUpdatedBy(String lowerInclusive, String upperInclusive) {
        return fetchRange(EventTable.EVENT.UPDATED_BY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>updated_by IN (values)</code>
     */
    @Nonnull
    public List<EventPojo> fetchByUpdatedBy(String... values) {
        return fetch(EventTable.EVENT.UPDATED_BY, values);
    }
}
