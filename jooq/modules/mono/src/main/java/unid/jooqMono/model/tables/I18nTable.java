/*
 * This file is generated by jOOQ.
 */
package unid.jooqMono.model.tables;


import java.time.OffsetDateTime;
import java.util.UUID;

import javax.annotation.Nonnull;
import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import unid.jooqMono.model.Keys;
import unid.jooqMono.model.Public;
import unid.jooqMono.model.tables.records.I18nRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.15.12"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class I18nTable extends TableImpl<I18nRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.i18n</code>
     */
    public static final I18nTable I18N = new I18nTable();

    /**
     * The class holding records for this type
     */
    @Override
    @Nonnull
    public Class<I18nRecord> getRecordType() {
        return I18nRecord.class;
    }

    /**
     * The column <code>public.i18n.id</code>.
     */
    public final TableField<I18nRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field("gen_random_uuid()", SQLDataType.UUID)), this, "");

    /**
     * The column <code>public.i18n.english</code>.
     */
    public final TableField<I18nRecord, String> ENGLISH = createField(DSL.name("english"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.i18n.chinese_traditional</code>.
     */
    public final TableField<I18nRecord, String> CHINESE_TRADITIONAL = createField(DSL.name("chinese_traditional"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.i18n.chinese_simplified</code>.
     */
    public final TableField<I18nRecord, String> CHINESE_SIMPLIFIED = createField(DSL.name("chinese_simplified"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.i18n.created_on</code>.
     */
    public final TableField<I18nRecord, OffsetDateTime> CREATED_ON = createField(DSL.name("created_on"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    /**
     * The column <code>public.i18n.created_by</code>.
     */
    public final TableField<I18nRecord, String> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.i18n.updated_on</code>.
     */
    public final TableField<I18nRecord, OffsetDateTime> UPDATED_ON = createField(DSL.name("updated_on"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    /**
     * The column <code>public.i18n.updated_by</code>.
     */
    public final TableField<I18nRecord, String> UPDATED_BY = createField(DSL.name("updated_by"), SQLDataType.CLOB, this, "");

    private I18nTable(Name alias, Table<I18nRecord> aliased) {
        this(alias, aliased, null);
    }

    private I18nTable(Name alias, Table<I18nRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.i18n</code> table reference
     */
    public I18nTable(String alias) {
        this(DSL.name(alias), I18N);
    }

    /**
     * Create an aliased <code>public.i18n</code> table reference
     */
    public I18nTable(Name alias) {
        this(alias, I18N);
    }

    /**
     * Create a <code>public.i18n</code> table reference
     */
    public I18nTable() {
        this(DSL.name("i18n"), null);
    }

    public <O extends Record> I18nTable(Table<O> child, ForeignKey<O, I18nRecord> key) {
        super(child, key, I18N);
    }

    @Override
    @Nonnull
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    @Nonnull
    public UniqueKey<I18nRecord> getPrimaryKey() {
        return Keys.I18N_PKEY;
    }

    @Override
    @Nonnull
    public I18nTable as(String alias) {
        return new I18nTable(DSL.name(alias), this);
    }

    @Override
    @Nonnull
    public I18nTable as(Name alias) {
        return new I18nTable(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public I18nTable rename(String name) {
        return new I18nTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public I18nTable rename(Name name) {
        return new I18nTable(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    @Nonnull
    public Row8<UUID, String, String, String, OffsetDateTime, String, OffsetDateTime, String> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
}
