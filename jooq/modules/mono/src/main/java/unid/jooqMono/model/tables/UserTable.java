/*
 * This file is generated by jOOQ.
 */
package unid.jooqMono.model.tables;


import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import javax.annotation.Nonnull;
import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row15;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import pwh.coreJooqLibs.converter.HashingConverter;
import pwh.coreJooqLibs.converter.IgnoreCaseConverter;

import unid.jooqMono.model.Keys;
import unid.jooqMono.model.Public;
import unid.jooqMono.model.enums.UserRoleEnum;
import unid.jooqMono.model.tables.records.UserRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.15.12"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserTable extends TableImpl<UserRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.user</code>
     */
    public static final UserTable USER = new UserTable();

    /**
     * The class holding records for this type
     */
    @Override
    @Nonnull
    public Class<UserRecord> getRecordType() {
        return UserRecord.class;
    }

    /**
     * The column <code>public.user.id</code>.
     */
    public final TableField<UserRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field("gen_random_uuid()", SQLDataType.UUID)), this, "");

    /**
     * The column <code>public.user.last_name_i18n_id</code>.
     */
    public final TableField<UserRecord, UUID> LAST_NAME_I18N_ID = createField(DSL.name("last_name_i18n_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.user.fist_name_i18n_id</code>.
     */
    public final TableField<UserRecord, UUID> FIST_NAME_I18N_ID = createField(DSL.name("fist_name_i18n_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.user.user_role</code>.
     */
    public final TableField<UserRecord, UserRoleEnum> USER_ROLE = createField(DSL.name("user_role"), SQLDataType.VARCHAR.nullable(false).asEnumDataType(unid.jooqMono.model.enums.UserRoleEnum.class), this, "");

    /**
     * The column <code>public.user.login_id</code>.
     */
    public final TableField<UserRecord, String> LOGIN_ID = createField(DSL.name("login_id"), SQLDataType.CLOB, this, "", new IgnoreCaseConverter());

    /**
     * The column <code>public.user.login_password</code>.
     */
    public final TableField<UserRecord, String> LOGIN_PASSWORD = createField(DSL.name("login_password"), SQLDataType.CLOB, this, "", new HashingConverter());

    /**
     * The column <code>public.user.email</code>.
     */
    public final TableField<UserRecord, String> EMAIL = createField(DSL.name("email"), SQLDataType.CLOB, this, "", new IgnoreCaseConverter());

    /**
     * The column <code>public.user.email_verified</code>.
     */
    public final TableField<UserRecord, Boolean> EMAIL_VERIFIED = createField(DSL.name("email_verified"), SQLDataType.BOOLEAN.defaultValue(DSL.field("false", SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.user.google_client_id</code>.
     */
    public final TableField<UserRecord, String> GOOGLE_CLIENT_ID = createField(DSL.name("google_client_id"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.user.tencent_wechat_client_id</code>.
     */
    public final TableField<UserRecord, String> TENCENT_WECHAT_CLIENT_ID = createField(DSL.name("tencent_wechat_client_id"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.user.deleted</code>.
     */
    public final TableField<UserRecord, Boolean> DELETED = createField(DSL.name("deleted"), SQLDataType.BOOLEAN.defaultValue(DSL.field("false", SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.user.created_on</code>.
     */
    public final TableField<UserRecord, OffsetDateTime> CREATED_ON = createField(DSL.name("created_on"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    /**
     * The column <code>public.user.created_by</code>.
     */
    public final TableField<UserRecord, String> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.user.updated_on</code>.
     */
    public final TableField<UserRecord, OffsetDateTime> UPDATED_ON = createField(DSL.name("updated_on"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    /**
     * The column <code>public.user.updated_by</code>.
     */
    public final TableField<UserRecord, String> UPDATED_BY = createField(DSL.name("updated_by"), SQLDataType.CLOB, this, "");

    private UserTable(Name alias, Table<UserRecord> aliased) {
        this(alias, aliased, null);
    }

    private UserTable(Name alias, Table<UserRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.user</code> table reference
     */
    public UserTable(String alias) {
        this(DSL.name(alias), USER);
    }

    /**
     * Create an aliased <code>public.user</code> table reference
     */
    public UserTable(Name alias) {
        this(alias, USER);
    }

    /**
     * Create a <code>public.user</code> table reference
     */
    public UserTable() {
        this(DSL.name("user"), null);
    }

    public <O extends Record> UserTable(Table<O> child, ForeignKey<O, UserRecord> key) {
        super(child, key, USER);
    }

    @Override
    @Nonnull
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    @Nonnull
    public UniqueKey<UserRecord> getPrimaryKey() {
        return Keys.USER_PKEY;
    }

    @Override
    @Nonnull
    public List<UniqueKey<UserRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.USER_LAST_NAME_I18N_ID_KEY, Keys.USER_FIST_NAME_I18N_ID_KEY, Keys.USER_LOGIN_ID_KEY, Keys.USER_EMAIL_KEY, Keys.USER_GOOGLE_CLIENT_ID_KEY, Keys.USER_TENCENT_WECHAT_CLIENT_ID_KEY);
    }

    @Override
    @Nonnull
    public List<ForeignKey<UserRecord, ?>> getReferences() {
        return Arrays.asList(Keys.USER__FK_USER_LAST_NAME, Keys.USER__FK_USER_FIRST_NAME);
    }

    private transient I18nTable _fkUserLastName;
    private transient I18nTable _fkUserFirstName;

    public I18nTable fkUserLastName() {
        if (_fkUserLastName == null)
            _fkUserLastName = new I18nTable(this, Keys.USER__FK_USER_LAST_NAME);

        return _fkUserLastName;
    }

    public I18nTable fkUserFirstName() {
        if (_fkUserFirstName == null)
            _fkUserFirstName = new I18nTable(this, Keys.USER__FK_USER_FIRST_NAME);

        return _fkUserFirstName;
    }

    @Override
    @Nonnull
    public UserTable as(String alias) {
        return new UserTable(DSL.name(alias), this);
    }

    @Override
    @Nonnull
    public UserTable as(Name alias) {
        return new UserTable(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public UserTable rename(String name) {
        return new UserTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public UserTable rename(Name name) {
        return new UserTable(name, null);
    }

    // -------------------------------------------------------------------------
    // Row15 type methods
    // -------------------------------------------------------------------------

    @Override
    @Nonnull
    public Row15<UUID, UUID, UUID, UserRoleEnum, String, String, String, Boolean, String, String, Boolean, OffsetDateTime, String, OffsetDateTime, String> fieldsRow() {
        return (Row15) super.fieldsRow();
    }
}
