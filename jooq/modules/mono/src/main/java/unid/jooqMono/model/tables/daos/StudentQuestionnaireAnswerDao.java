/*
 * This file is generated by jOOQ.
 */
package unid.jooqMono.model.tables.daos;


import java.math.BigDecimal;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.UUID;

import javax.annotation.Nonnull;
import javax.annotation.Nullable;
import javax.annotation.processing.Generated;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;

import unid.jooqMono.model.enums.QuestionnaireAnswerTypeEnum;
import unid.jooqMono.model.tables.StudentQuestionnaireAnswerTable;
import unid.jooqMono.model.tables.pojos.StudentQuestionnaireAnswerPojo;
import unid.jooqMono.model.tables.records.StudentQuestionnaireAnswerRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.15.12"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class StudentQuestionnaireAnswerDao extends DAOImpl<StudentQuestionnaireAnswerRecord, StudentQuestionnaireAnswerPojo, UUID> {

    /**
     * Create a new StudentQuestionnaireAnswerDao without any configuration
     */
    public StudentQuestionnaireAnswerDao() {
        super(StudentQuestionnaireAnswerTable.STUDENT_QUESTIONNAIRE_ANSWER, StudentQuestionnaireAnswerPojo.class);
    }

    /**
     * Create a new StudentQuestionnaireAnswerDao with an attached configuration
     */
    public StudentQuestionnaireAnswerDao(Configuration configuration) {
        super(StudentQuestionnaireAnswerTable.STUDENT_QUESTIONNAIRE_ANSWER, StudentQuestionnaireAnswerPojo.class, configuration);
    }

    @Override
    @Nonnull
    public UUID getId(StudentQuestionnaireAnswerPojo object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<StudentQuestionnaireAnswerPojo> fetchRangeOfId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(StudentQuestionnaireAnswerTable.STUDENT_QUESTIONNAIRE_ANSWER.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    @Nonnull
    public List<StudentQuestionnaireAnswerPojo> fetchById(UUID... values) {
        return fetch(StudentQuestionnaireAnswerTable.STUDENT_QUESTIONNAIRE_ANSWER.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    @Nullable
    public StudentQuestionnaireAnswerPojo fetchOneById(UUID value) {
        return fetchOne(StudentQuestionnaireAnswerTable.STUDENT_QUESTIONNAIRE_ANSWER.ID, value);
    }

    /**
     * Fetch records that have <code>student_questionnaire_question_id BETWEEN
     * lowerInclusive AND upperInclusive</code>
     */
    @Nonnull
    public List<StudentQuestionnaireAnswerPojo> fetchRangeOfStudentQuestionnaireQuestionId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(StudentQuestionnaireAnswerTable.STUDENT_QUESTIONNAIRE_ANSWER.STUDENT_QUESTIONNAIRE_QUESTION_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>student_questionnaire_question_id IN
     * (values)</code>
     */
    @Nonnull
    public List<StudentQuestionnaireAnswerPojo> fetchByStudentQuestionnaireQuestionId(UUID... values) {
        return fetch(StudentQuestionnaireAnswerTable.STUDENT_QUESTIONNAIRE_ANSWER.STUDENT_QUESTIONNAIRE_QUESTION_ID, values);
    }

    /**
     * Fetch records that have <code>order BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<StudentQuestionnaireAnswerPojo> fetchRangeOfOrder(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(StudentQuestionnaireAnswerTable.STUDENT_QUESTIONNAIRE_ANSWER.ORDER, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>order IN (values)</code>
     */
    @Nonnull
    public List<StudentQuestionnaireAnswerPojo> fetchByOrder(Integer... values) {
        return fetch(StudentQuestionnaireAnswerTable.STUDENT_QUESTIONNAIRE_ANSWER.ORDER, values);
    }

    /**
     * Fetch records that have <code>description_i18n_id BETWEEN lowerInclusive
     * AND upperInclusive</code>
     */
    @Nonnull
    public List<StudentQuestionnaireAnswerPojo> fetchRangeOfDescriptionI18nId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(StudentQuestionnaireAnswerTable.STUDENT_QUESTIONNAIRE_ANSWER.DESCRIPTION_I18N_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>description_i18n_id IN (values)</code>
     */
    @Nonnull
    public List<StudentQuestionnaireAnswerPojo> fetchByDescriptionI18nId(UUID... values) {
        return fetch(StudentQuestionnaireAnswerTable.STUDENT_QUESTIONNAIRE_ANSWER.DESCRIPTION_I18N_ID, values);
    }

    /**
     * Fetch a unique record that has <code>description_i18n_id = value</code>
     */
    @Nullable
    public StudentQuestionnaireAnswerPojo fetchOneByDescriptionI18nId(UUID value) {
        return fetchOne(StudentQuestionnaireAnswerTable.STUDENT_QUESTIONNAIRE_ANSWER.DESCRIPTION_I18N_ID, value);
    }

    /**
     * Fetch records that have <code>tag_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<StudentQuestionnaireAnswerPojo> fetchRangeOfTagId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(StudentQuestionnaireAnswerTable.STUDENT_QUESTIONNAIRE_ANSWER.TAG_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>tag_id IN (values)</code>
     */
    @Nonnull
    public List<StudentQuestionnaireAnswerPojo> fetchByTagId(UUID... values) {
        return fetch(StudentQuestionnaireAnswerTable.STUDENT_QUESTIONNAIRE_ANSWER.TAG_ID, values);
    }

    /**
     * Fetch records that have <code>score BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<StudentQuestionnaireAnswerPojo> fetchRangeOfScore(BigDecimal lowerInclusive, BigDecimal upperInclusive) {
        return fetchRange(StudentQuestionnaireAnswerTable.STUDENT_QUESTIONNAIRE_ANSWER.SCORE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>score IN (values)</code>
     */
    @Nonnull
    public List<StudentQuestionnaireAnswerPojo> fetchByScore(BigDecimal... values) {
        return fetch(StudentQuestionnaireAnswerTable.STUDENT_QUESTIONNAIRE_ANSWER.SCORE, values);
    }

    /**
     * Fetch records that have <code>type BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<StudentQuestionnaireAnswerPojo> fetchRangeOfType(QuestionnaireAnswerTypeEnum lowerInclusive, QuestionnaireAnswerTypeEnum upperInclusive) {
        return fetchRange(StudentQuestionnaireAnswerTable.STUDENT_QUESTIONNAIRE_ANSWER.TYPE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>type IN (values)</code>
     */
    @Nonnull
    public List<StudentQuestionnaireAnswerPojo> fetchByType(QuestionnaireAnswerTypeEnum... values) {
        return fetch(StudentQuestionnaireAnswerTable.STUDENT_QUESTIONNAIRE_ANSWER.TYPE, values);
    }

    /**
     * Fetch records that have <code>created_on BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<StudentQuestionnaireAnswerPojo> fetchRangeOfCreatedOn(OffsetDateTime lowerInclusive, OffsetDateTime upperInclusive) {
        return fetchRange(StudentQuestionnaireAnswerTable.STUDENT_QUESTIONNAIRE_ANSWER.CREATED_ON, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>created_on IN (values)</code>
     */
    @Nonnull
    public List<StudentQuestionnaireAnswerPojo> fetchByCreatedOn(OffsetDateTime... values) {
        return fetch(StudentQuestionnaireAnswerTable.STUDENT_QUESTIONNAIRE_ANSWER.CREATED_ON, values);
    }

    /**
     * Fetch records that have <code>created_by BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<StudentQuestionnaireAnswerPojo> fetchRangeOfCreatedBy(String lowerInclusive, String upperInclusive) {
        return fetchRange(StudentQuestionnaireAnswerTable.STUDENT_QUESTIONNAIRE_ANSWER.CREATED_BY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>created_by IN (values)</code>
     */
    @Nonnull
    public List<StudentQuestionnaireAnswerPojo> fetchByCreatedBy(String... values) {
        return fetch(StudentQuestionnaireAnswerTable.STUDENT_QUESTIONNAIRE_ANSWER.CREATED_BY, values);
    }

    /**
     * Fetch records that have <code>updated_on BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<StudentQuestionnaireAnswerPojo> fetchRangeOfUpdatedOn(OffsetDateTime lowerInclusive, OffsetDateTime upperInclusive) {
        return fetchRange(StudentQuestionnaireAnswerTable.STUDENT_QUESTIONNAIRE_ANSWER.UPDATED_ON, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>updated_on IN (values)</code>
     */
    @Nonnull
    public List<StudentQuestionnaireAnswerPojo> fetchByUpdatedOn(OffsetDateTime... values) {
        return fetch(StudentQuestionnaireAnswerTable.STUDENT_QUESTIONNAIRE_ANSWER.UPDATED_ON, values);
    }

    /**
     * Fetch records that have <code>updated_by BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<StudentQuestionnaireAnswerPojo> fetchRangeOfUpdatedBy(String lowerInclusive, String upperInclusive) {
        return fetchRange(StudentQuestionnaireAnswerTable.STUDENT_QUESTIONNAIRE_ANSWER.UPDATED_BY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>updated_by IN (values)</code>
     */
    @Nonnull
    public List<StudentQuestionnaireAnswerPojo> fetchByUpdatedBy(String... values) {
        return fetch(StudentQuestionnaireAnswerTable.STUDENT_QUESTIONNAIRE_ANSWER.UPDATED_BY, values);
    }
}
