/*
 * This file is generated by jOOQ.
 */
package unid.jooqMono.model.tables.daos;


import java.time.LocalDate;
import java.time.LocalTime;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.UUID;

import javax.annotation.Nonnull;
import javax.annotation.Nullable;
import javax.annotation.processing.Generated;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;

import unid.jooqMono.model.enums.BookingStatusEnum;
import unid.jooqMono.model.tables.EducatorCalendarTable;
import unid.jooqMono.model.tables.pojos.EducatorCalendarPojo;
import unid.jooqMono.model.tables.records.EducatorCalendarRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.15.12"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class EducatorCalendarDao extends DAOImpl<EducatorCalendarRecord, EducatorCalendarPojo, UUID> {

    /**
     * Create a new EducatorCalendarDao without any configuration
     */
    public EducatorCalendarDao() {
        super(EducatorCalendarTable.EDUCATOR_CALENDAR, EducatorCalendarPojo.class);
    }

    /**
     * Create a new EducatorCalendarDao with an attached configuration
     */
    public EducatorCalendarDao(Configuration configuration) {
        super(EducatorCalendarTable.EDUCATOR_CALENDAR, EducatorCalendarPojo.class, configuration);
    }

    @Override
    @Nonnull
    public UUID getId(EducatorCalendarPojo object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<EducatorCalendarPojo> fetchRangeOfId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(EducatorCalendarTable.EDUCATOR_CALENDAR.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    @Nonnull
    public List<EducatorCalendarPojo> fetchById(UUID... values) {
        return fetch(EducatorCalendarTable.EDUCATOR_CALENDAR.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    @Nullable
    public EducatorCalendarPojo fetchOneById(UUID value) {
        return fetchOne(EducatorCalendarTable.EDUCATOR_CALENDAR.ID, value);
    }

    /**
     * Fetch records that have <code>educator_profile_id BETWEEN lowerInclusive
     * AND upperInclusive</code>
     */
    @Nonnull
    public List<EducatorCalendarPojo> fetchRangeOfEducatorProfileId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(EducatorCalendarTable.EDUCATOR_CALENDAR.EDUCATOR_PROFILE_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>educator_profile_id IN (values)</code>
     */
    @Nonnull
    public List<EducatorCalendarPojo> fetchByEducatorProfileId(UUID... values) {
        return fetch(EducatorCalendarTable.EDUCATOR_CALENDAR.EDUCATOR_PROFILE_ID, values);
    }

    /**
     * Fetch records that have <code>date BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<EducatorCalendarPojo> fetchRangeOfDate(LocalDate lowerInclusive, LocalDate upperInclusive) {
        return fetchRange(EducatorCalendarTable.EDUCATOR_CALENDAR.DATE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>date IN (values)</code>
     */
    @Nonnull
    public List<EducatorCalendarPojo> fetchByDate(LocalDate... values) {
        return fetch(EducatorCalendarTable.EDUCATOR_CALENDAR.DATE, values);
    }

    /**
     * Fetch records that have <code>hour_start BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<EducatorCalendarPojo> fetchRangeOfHourStart(LocalTime lowerInclusive, LocalTime upperInclusive) {
        return fetchRange(EducatorCalendarTable.EDUCATOR_CALENDAR.HOUR_START, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>hour_start IN (values)</code>
     */
    @Nonnull
    public List<EducatorCalendarPojo> fetchByHourStart(LocalTime... values) {
        return fetch(EducatorCalendarTable.EDUCATOR_CALENDAR.HOUR_START, values);
    }

    /**
     * Fetch records that have <code>hour_end BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<EducatorCalendarPojo> fetchRangeOfHourEnd(LocalTime lowerInclusive, LocalTime upperInclusive) {
        return fetchRange(EducatorCalendarTable.EDUCATOR_CALENDAR.HOUR_END, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>hour_end IN (values)</code>
     */
    @Nonnull
    public List<EducatorCalendarPojo> fetchByHourEnd(LocalTime... values) {
        return fetch(EducatorCalendarTable.EDUCATOR_CALENDAR.HOUR_END, values);
    }

    /**
     * Fetch records that have <code>booking_status BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<EducatorCalendarPojo> fetchRangeOfBookingStatus(BookingStatusEnum lowerInclusive, BookingStatusEnum upperInclusive) {
        return fetchRange(EducatorCalendarTable.EDUCATOR_CALENDAR.BOOKING_STATUS, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>booking_status IN (values)</code>
     */
    @Nonnull
    public List<EducatorCalendarPojo> fetchByBookingStatus(BookingStatusEnum... values) {
        return fetch(EducatorCalendarTable.EDUCATOR_CALENDAR.BOOKING_STATUS, values);
    }

    /**
     * Fetch records that have <code>payment_transaction_id BETWEEN
     * lowerInclusive AND upperInclusive</code>
     */
    @Nonnull
    public List<EducatorCalendarPojo> fetchRangeOfPaymentTransactionId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(EducatorCalendarTable.EDUCATOR_CALENDAR.PAYMENT_TRANSACTION_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>payment_transaction_id IN (values)</code>
     */
    @Nonnull
    public List<EducatorCalendarPojo> fetchByPaymentTransactionId(UUID... values) {
        return fetch(EducatorCalendarTable.EDUCATOR_CALENDAR.PAYMENT_TRANSACTION_ID, values);
    }

    /**
     * Fetch a unique record that has <code>payment_transaction_id =
     * value</code>
     */
    @Nullable
    public EducatorCalendarPojo fetchOneByPaymentTransactionId(UUID value) {
        return fetchOne(EducatorCalendarTable.EDUCATOR_CALENDAR.PAYMENT_TRANSACTION_ID, value);
    }

    /**
     * Fetch records that have <code>meeting_url BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<EducatorCalendarPojo> fetchRangeOfMeetingUrl(String lowerInclusive, String upperInclusive) {
        return fetchRange(EducatorCalendarTable.EDUCATOR_CALENDAR.MEETING_URL, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>meeting_url IN (values)</code>
     */
    @Nonnull
    public List<EducatorCalendarPojo> fetchByMeetingUrl(String... values) {
        return fetch(EducatorCalendarTable.EDUCATOR_CALENDAR.MEETING_URL, values);
    }

    /**
     * Fetch records that have <code>meeting_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<EducatorCalendarPojo> fetchRangeOfMeetingId(String lowerInclusive, String upperInclusive) {
        return fetchRange(EducatorCalendarTable.EDUCATOR_CALENDAR.MEETING_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>meeting_id IN (values)</code>
     */
    @Nonnull
    public List<EducatorCalendarPojo> fetchByMeetingId(String... values) {
        return fetch(EducatorCalendarTable.EDUCATOR_CALENDAR.MEETING_ID, values);
    }

    /**
     * Fetch records that have <code>created_on BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<EducatorCalendarPojo> fetchRangeOfCreatedOn(OffsetDateTime lowerInclusive, OffsetDateTime upperInclusive) {
        return fetchRange(EducatorCalendarTable.EDUCATOR_CALENDAR.CREATED_ON, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>created_on IN (values)</code>
     */
    @Nonnull
    public List<EducatorCalendarPojo> fetchByCreatedOn(OffsetDateTime... values) {
        return fetch(EducatorCalendarTable.EDUCATOR_CALENDAR.CREATED_ON, values);
    }

    /**
     * Fetch records that have <code>created_by BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<EducatorCalendarPojo> fetchRangeOfCreatedBy(String lowerInclusive, String upperInclusive) {
        return fetchRange(EducatorCalendarTable.EDUCATOR_CALENDAR.CREATED_BY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>created_by IN (values)</code>
     */
    @Nonnull
    public List<EducatorCalendarPojo> fetchByCreatedBy(String... values) {
        return fetch(EducatorCalendarTable.EDUCATOR_CALENDAR.CREATED_BY, values);
    }

    /**
     * Fetch records that have <code>updated_on BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<EducatorCalendarPojo> fetchRangeOfUpdatedOn(OffsetDateTime lowerInclusive, OffsetDateTime upperInclusive) {
        return fetchRange(EducatorCalendarTable.EDUCATOR_CALENDAR.UPDATED_ON, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>updated_on IN (values)</code>
     */
    @Nonnull
    public List<EducatorCalendarPojo> fetchByUpdatedOn(OffsetDateTime... values) {
        return fetch(EducatorCalendarTable.EDUCATOR_CALENDAR.UPDATED_ON, values);
    }

    /**
     * Fetch records that have <code>updated_by BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    @Nonnull
    public List<EducatorCalendarPojo> fetchRangeOfUpdatedBy(String lowerInclusive, String upperInclusive) {
        return fetchRange(EducatorCalendarTable.EDUCATOR_CALENDAR.UPDATED_BY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>updated_by IN (values)</code>
     */
    @Nonnull
    public List<EducatorCalendarPojo> fetchByUpdatedBy(String... values) {
        return fetch(EducatorCalendarTable.EDUCATOR_CALENDAR.UPDATED_BY, values);
    }
}
