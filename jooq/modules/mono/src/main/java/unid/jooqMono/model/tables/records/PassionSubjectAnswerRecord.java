/*
 * This file is generated by jOOQ.
 */
package unid.jooqMono.model.tables.records;


import java.beans.ConstructorProperties;
import java.util.UUID;

import javax.annotation.Nonnull;
import javax.annotation.Nullable;
import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;

import unid.jooqMono.model.tables.PassionSubjectAnswerTable;
import unid.jooqMono.model.tables.pojos.PassionSubjectAnswerPojo;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.15.12"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@lombok.experimental.FieldNameConstants(innerTypeName = "Columns")
public class PassionSubjectAnswerRecord extends UpdatableRecordImpl<PassionSubjectAnswerRecord> implements Record3<UUID, UUID, UUID> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.passion_subject_answer.id</code>.
     */
    public PassionSubjectAnswerRecord setId(@Nonnull UUID value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>public.passion_subject_answer.id</code>.
     */
    @Nonnull
    public UUID getId() {
        return (UUID) get(0);
    }

    /**
     * Setter for <code>public.passion_subject_answer.answer_i18n_id</code>.
     */
    public PassionSubjectAnswerRecord setAnswerI18nId(@Nullable UUID value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>public.passion_subject_answer.answer_i18n_id</code>.
     */
    @Nullable
    public UUID getAnswerI18nId() {
        return (UUID) get(1);
    }

    /**
     * Setter for <code>public.passion_subject_answer.subject_id</code>.
     */
    public PassionSubjectAnswerRecord setSubjectId(@Nullable UUID value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>public.passion_subject_answer.subject_id</code>.
     */
    @Nullable
    public UUID getSubjectId() {
        return (UUID) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    @Nonnull
    public Record1<UUID> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    @Nonnull
    public Row3<UUID, UUID, UUID> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    @Nonnull
    public Row3<UUID, UUID, UUID> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    @Nonnull
    public Field<UUID> field1() {
        return PassionSubjectAnswerTable.PASSION_SUBJECT_ANSWER.ID;
    }

    @Override
    @Nonnull
    public Field<UUID> field2() {
        return PassionSubjectAnswerTable.PASSION_SUBJECT_ANSWER.ANSWER_I18N_ID;
    }

    @Override
    @Nonnull
    public Field<UUID> field3() {
        return PassionSubjectAnswerTable.PASSION_SUBJECT_ANSWER.SUBJECT_ID;
    }

    @Override
    @Nonnull
    public UUID component1() {
        return getId();
    }

    @Override
    @Nullable
    public UUID component2() {
        return getAnswerI18nId();
    }

    @Override
    @Nullable
    public UUID component3() {
        return getSubjectId();
    }

    @Override
    @Nonnull
    public UUID value1() {
        return getId();
    }

    @Override
    @Nullable
    public UUID value2() {
        return getAnswerI18nId();
    }

    @Override
    @Nullable
    public UUID value3() {
        return getSubjectId();
    }

    @Override
    @Nonnull
    public PassionSubjectAnswerRecord value1(@Nonnull UUID value) {
        setId(value);
        return this;
    }

    @Override
    @Nonnull
    public PassionSubjectAnswerRecord value2(@Nullable UUID value) {
        setAnswerI18nId(value);
        return this;
    }

    @Override
    @Nonnull
    public PassionSubjectAnswerRecord value3(@Nullable UUID value) {
        setSubjectId(value);
        return this;
    }

    @Override
    @Nonnull
    public PassionSubjectAnswerRecord values(@Nonnull UUID value1, @Nullable UUID value2, @Nullable UUID value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached PassionSubjectAnswerRecord
     */
    public PassionSubjectAnswerRecord() {
        super(PassionSubjectAnswerTable.PASSION_SUBJECT_ANSWER);
    }

    /**
     * Create a detached, initialised PassionSubjectAnswerRecord
     */
    @ConstructorProperties({ "id", "answerI18nId", "subjectId" })
    public PassionSubjectAnswerRecord(@Nonnull UUID id, @Nullable UUID answerI18nId, @Nullable UUID subjectId) {
        super(PassionSubjectAnswerTable.PASSION_SUBJECT_ANSWER);

        setId(id);
        setAnswerI18nId(answerI18nId);
        setSubjectId(subjectId);
    }

    /**
     * Create a detached, initialised PassionSubjectAnswerRecord
     */
    public PassionSubjectAnswerRecord(PassionSubjectAnswerPojo value) {
        super(PassionSubjectAnswerTable.PASSION_SUBJECT_ANSWER);

        if (value != null) {
            setId(value.getId());
            setAnswerI18nId(value.getAnswerI18nId());
            setSubjectId(value.getSubjectId());
        }
    }
}
